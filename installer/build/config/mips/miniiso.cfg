# This is completely meaningless, since the mini-ISO uses prebuilt
# boot images, but some Makefile magic depends on those definitions.
KERNELVERSION = 2.4.22-r4k-ip22 2.4.22-r5k-ip22
KERNEL_FLAVOUR = di
KERNELIMAGEVERSION = $(KERNELVERSION)
KERNELNAME =

MEDIA_TYPE = CD-ROM

# Hack, hack!
TARGET = 
EXTRATARGETS = build_r4k-ip22_netboot build_r5k-ip22_netboot $(MINIISO)
EXTRANAME = cdrom-

MANIFEST-MINIISO = "tiny bootable CD image for pure network install"

.PHONY: arch_miniiso
arch_miniiso:
	-rm -rf $(TEMP_CD_TREE)/*
	install -m 644 -D $(BASE_TMP)r4k-ip22/netboot/boot.img $(TEMP_CD_TREE)/install/r4k-ip22-boot.img
	install -m 644 -D $(BASE_TMP)r5k-ip22/netboot/boot.img $(TEMP_CD_TREE)/install/r5k-ip22-boot.img
	mkisofs -r -J -o $(TEMP_MINIISO) $(TEMP_CD_TREE)
# genisovh is not yet in the archive
#	set -e; \
#	ISOVH_BOOTFILES= ; \
#	$(foreach SUB,r4k-ip22 r5k-ip22, \
#		start=$$(isoinfo -i $(TEMP_MINIISO) -lsR |grep -A 10 'Directory listing of /install' |grep $(SUB)-boot.img |awk '{print $$10 * 4}'); \
#		size=$$(isoinfo -i $(TEMP_MINIISO) -lsR |grep -A 10 'Directory listing of /install' |grep $(SUB)-boot.img |awk '{print $$5 * 2048}'); \
#		ISOVH_BOOTFILES="$$ISOVH_BOOTFILES $(SUB):$$start,$$size";) \
#	genisovh $(TEMP_MINIISO) $$ISOVH_BOOTFILES
