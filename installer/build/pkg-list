#!/usr/bin/perl
# Outputs a list of udebs to install. Pass it the type of image to build as
# the first parameter, then the kernel flavour, then the major kernel type
# (2.4, 2.6, etc), then the sub architecture (or an empty string if there
# are none) and then the kernel version(s) as the rest of the parameters.
# Reads the lists in pkg-lists.

use warnings;
use strict;

if (int(@ARGV) < 5) {
	die "Usage: $0 type KERNEL_FLAVOUR KERNELMAJOR SUB_ARCH KERNEL_VERSION [KERNEL_VERSION ...]\n";
}
my $type=shift;
my $kernel_flavour=shift;
my $kernel_major=shift;
my $sub_arch=shift;
my @kernel_versions=@ARGV;

my $deb_host_arch=`dpkg-architecture -qDEB_HOST_ARCH`;
chomp $deb_host_arch;

my @lists = ("pkg-lists/local");
my $t="";
foreach my $subtype (split "/", $type) {
	if (! length $t) {
		$t=$subtype;
	}
	else {
		$t="$t/$subtype";
	}
	push @lists, ("pkg-lists/$t/local", "pkg-lists/$t/common",
	              "pkg-lists/$t/$deb_host_arch.cfg");
	push @lists, "pkg-lists/$t/$deb_host_arch/$sub_arch.cfg" if $sub_arch;
}

my %collect;
my %exclude;

while (@lists) {
	my $list=pop @lists;
	if (! -e $list) {
		print STDERR "warning: missing list, $list, for type $type\n"
			if $list !~ /local$/ && $list !~ m#$deb_host_arch/$sub_arch.cfg$#;
	}
	else {
		open (LIST, $list) || die "open $list $!";
		while (<LIST>) {
			chomp;

			# includes
			if (/^#include \"(.*)\"/) {
				my $include=$1;
				if (-e "pkg-lists/kernel_specific/$kernel_major/$deb_host_arch/$sub_arch/$include") {
					push @lists, "pkg-lists/kernel_specific/$kernel_major/$deb_host_arch/$sub_arch/$include";
				}
				if (-e "pkg-lists/kernel_specific/$kernel_major/$deb_host_arch/$include") {
					push @lists, "pkg-lists/kernel_specific/$kernel_major/$deb_host_arch/$include";
				}
				if (-e "pkg-lists/kernel_specific/$kernel_major/$include") {
					push @lists, "pkg-lists/kernel_specific/$kernel_major/$include";
				}
				else {
					push @lists, "pkg-lists/$include";
				}
			}
			
			# comments
			s/^#.*//;
			next unless length;
			
			# normal kernel version substitution
			if (/\${kernel:Version}/) {
				foreach my $v (@kernel_versions) {
					my $l=$_;
					$l=~s/\${kernel:Version}/$v-$kernel_flavour/g;
					collectpackage($l);
				}
				next; # move on to the next line
			}
			collectpackage($_);
		}
		close LIST;
	}
}

foreach my $p (sort keys %collect) {
	print "$p\n" unless $exclude{$p};

	# Warn about missing deps. This is not perfect, in since pkgdeps
	# ignores dependencies on virtual packages and does not support
	# alternates. Still, it will catch most common mistakes.
	foreach my $dep (pkgdeps($p)) {
		if (! $collect{$dep} && ! $exclude{$dep}) {
			print STDERR "** warning: in $type, $p has unsatisfied dependency on $dep\n";
		}
	}
}

# Add a package, possibly expanding dependencies.
sub collectpackage {
	my $line=shift;
	if ($line=~/^(.*) \*$/) {
		# Asterisk at end means include all dependencies of this
		# package.
		$collect{$1}=1;
		collectdeps($1);
	}
	elsif ($line=~/^(.*) \-$/) {
		# Minus sign at the end means exclude this package from the
		# list.
		$exclude{$1}=1;
	}
	else {
		$collect{$line}=1;
	}
}

# Recursively add dependencies of package.
sub collectdeps {
	my $package=shift;
	my %seendeps;
	%seendeps=%{shift()} if @_;
	return if $seendeps{$package};
	foreach my $dep (pkgdeps($package)) {
		chomp $dep;
		$dep=~s/^\s*Depends:\s*//;
		$collect{$dep}=1;
		$seendeps{$dep}=1;
		collectdeps($dep, \%seendeps);
	}
}

# Get the dependencies of a package;
sub pkgdeps {
	my $package=shift;
	my @ret;
	my @deps=`apt-cache \\
		-o Dir::Etc::sourcelist=./sources.list.udeb \\
		-o Dir::State=./apt.udeb/state \\
		-o Dir::Cache=./apt.udeb/cache depends $package`;
	shift @deps; # package name;
	foreach my $dep (@deps) {
		chomp $dep;
		# Note that this intentionally skips alternate
		# dependencies, taking only the first.
		if ($dep=~/^\s*Depends:\s/) {
			$dep=~s/^\s*Depends:\s*//;
			next if $dep=~/\<.*\>/; # skip virtual packages
			push @ret, $dep;
		}
	}
	return @ret;
}
