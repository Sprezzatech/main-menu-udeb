#!/usr/bin/perl
# Outputs a list of udebs to install. Pass it the type of image to build as
# the first parameter, then the kernel flavour, then the major kernel type
# (2.4, 2.6, etc), then the sub architecture (or an empty string if there
# are none) and then the kernel version(s) as the rest of the parameters.
# Reads the lists in pkg-lists.

use warnings;
use strict;

if (int(@ARGV) < 5) {
	die "Usage: $0 type KERNEL_FLAVOUR KERNELMAJOR SUB_ARCH KERNEL_VERSION [KERNEL_VERSION ...]\n";
}
my $type=shift;
my $kernel_flavour=shift;
my $kernel_major=shift;
my $sub_arch=shift;
my @kernel_versions=@ARGV;

my $deb_host_arch=`dpkg-architecture -qDEB_HOST_ARCH`;
chomp $deb_host_arch;

my @lists = ("pkg-lists/local");
my $t="";
foreach my $subtype (split "/", $type) {
	if (! length $t) {
		$t=$subtype;
	}
	else {
		$t="$t/$subtype";
	}
	push @lists, ("pkg-lists/$t/local", "pkg-lists/$t/common",
	              "pkg-lists/$t/$deb_host_arch.cfg");
	push @lists, "pkg-lists/$t/$deb_host_arch/$sub_arch.cfg" if $sub_arch;
}

while (@lists) {
	my $list=pop @lists;
	if (! -e $list) {
		print STDERR "warning: missing list, $list, for type $type\n"
			if $list !~ /local$/ && $list !~ m#$deb_host_arch/$sub_arch.cfg$#;
	}
	else {
		open (LIST, $list) || die "open $list $!";
		while (<LIST>) {
			chomp;

			# includes
			if (/^#include \"(.*)\"/) {
				my $include=$1;
				if (-e "pkg-lists/kernel_specific/$kernel_major/$deb_host_arch/$sub_arch/$include") {
					push @lists, "pkg-lists/kernel_specific/$kernel_major/$deb_host_arch/$sub_arch/$include";
				}
				if (-e "pkg-lists/kernel_specific/$kernel_major/$deb_host_arch/$include") {
					push @lists, "pkg-lists/kernel_specific/$kernel_major/$deb_host_arch/$include";
				}
				if (-e "pkg-lists/kernel_specific/$kernel_major/$include") {
					push @lists, "pkg-lists/kernel_specific/$kernel_major/$include";
				}
				else {
					push @lists, "pkg-lists/$include";
				}
			}
			
			# comments
			s/^#.*//;
			next unless length;
			
			# normal kernel version substitution
			if (/\${kernel:Version}/) {
				foreach my $v (@kernel_versions) {
					my $l=$_;
					$l=~s/\${kernel:Version}/$v-$kernel_flavour/g;
					printpackage($l);
				}
				next; # move on to the next line
			}
			printpackage($_);
		}
		close LIST;
	}
}

# Print a package, possibly expanding dependencies.
sub printpackage {
	my $line=shift;
	if ($line=~/^(.*) \*$/) {
		# Asterisk at end means include all dependencies of this
		# package.
		print "$1\n";
		printdeps($1);
	}
	else {
		print "$line\n";
	}
}

# Recursively print dependencies of package.
sub printdeps {
	my $package=shift;
	my %seendeps;
	if (@_) {
		%seendeps=%{shift()}
	}
	return if $seendeps{$package};
	my @deps=`apt-cache \\
		-o Dir::Etc::sourcelist=./sources.list.udeb \\
		-o Dir::State=./apt.udeb/state \\
		-o Dir::Cache=./apt.udeb/cache depends $package`;
	shift @deps; # package name;
	foreach my $dep (@deps) {
		chomp $dep;
		$dep=~s/^\s*Depends:\s*//;
		print "$dep\n";
		$seendeps{$dep}=1;
		printdeps($dep, \%seendeps);
	}
}
