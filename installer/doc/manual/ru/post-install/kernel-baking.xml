<!-- retain these comments for translator revision tracking -->
<!-- $Id: kernel-baking.xml 23058 2004-10-12 23:51:17Z cjwatson $ -->

 <sect1 id="kernel-baking"><title>Сборка нового ядра</title>
<para>Для чего некоторые люди пересобирают ядро? Часто это делать не нужно, так как ядро, устанавливаемое по умолчанию в Debian, подходит для многих конфигураций. Однако, полезно пересобрать ядро в следующих случаях: <itemizedlist>
<listitem><para>если установлено специфичное оборудование, или возникается конфликт аппаратного обеспечения со стандартным ядром </para></listitem>
<listitem><para>если нужна поддержка оборудования или параметры не включённые в готовое ядро, например APM или SMP </para></listitem>

<listitem arch="i386"><para>В сборках compact и idepci не включёна поддержка звука. Хотя изначально в ядре эта поддержка есть, она может не заработать по некоторым причинам. </para></listitem>
<listitem><para>для оптимизации ядра, удаляя ненужные драйверы для уменьшения времени загрузки </para></listitem>
<listitem><para>задействовать параметры ядра, которые не поддерживаются в ядре по умолчанию(например, межсетевой экран) </para></listitem>
<listitem><para>для установки обновлённого или разрабатываемого ядра </para></listitem>
<listitem><para>удивить друзей, попробовать новые фишки </para></listitem>
</itemizedlist>

</para>

  <sect2><title>Управление образами ядра</title>
<para>Не бойтесь пересобрать ядро. Это забавно и полезно. </para><para>Чтобы собрать ядро по технологии Debian, вы потребуются некоторые пакеты: <classname>kernel-package</classname>, <classname>kernel-source-&kernelversion;</classname> (последняя версия на время написания), <classname>fakeroot</classname> и некоторые другие, которые, вероятно, уже установлены(в <filename>/usr/share/doc/kernel-package/README.gz</filename> есть полный список). </para><para>С помощью этого метода создаётся .deb файл исходных текстов ядра, а также, если у вас имеются нестандартные модули, делается .deb файл с синхронизированными зависимостями. Это наилучший способ управления образами ядра; в <filename>/boot</filename> лежит ядро, System.map и журнальный конфигурационный файл от сборки. </para><para>Заметим, что вам <emphasis>не обязательно</emphasis> собирать ядро``по технологии Debian''; но мы пришли к выводу, что управлять ядрами с помощью системы управления пакетами на самом деле безопаснее и легче. Фактически, вы можете получить исходные тексты ядра прямо уЛинуса, а не в виде <classname>kernel-source-&kernelversion;</classname>, собранного с помощью <classname>kernel-package</classname>. </para><para>Заметим, что полную документацию по использованию <classname>kernel-package</classname> вы найдёте в <filename>/usr/share/doc/kernel-package</filename>. Это раздел описывает лишь краткое руководство. </para><para arch="sparc">Если вы собираете ядро для UltraSPARC, убедитесь, что установили пакет<classname>egcs64</classname>. Это наиболее предпочтительный компилятор для 64-битных ядер SPARC. По умолчанию <command>gcc</command> также компилирует 64-битные ядра, но они нестабильны. Плюс, если вы не использовали <classname>egcs64</classname> и столкнулись с проблемой, то вас, вероятней всего, попросят пересобрать ядро с помощью<classname>egcs64</classname>, чтобы убедиться, что проблема осталась. После установки <classname>egcs64</classname> не забудьте запустить<userinput>update-alternatives --config sparc64-linux-gcc</userinput> от суперпользователя, и проверьте, что <classname>egcs64</classname> стала использоваться в качестве этой программы. </para><para>Дальше, мы предполагаем, что исходный текст ядра располагается в каталоге <filename>/usr/local/src</filename> и что версия ядра &kernelversion;. От суперпользователя создайте каталог <filename>/usr/local/src</filename> и измените владельца этого каталога на вашу обычную не суперпользовательскую учётную запись. Из под обычного пользователя, перейдите в каталог, куда вы хотите распаковать исходный текст ядра (<userinput>cd /usr/local/src</userinput>), распакуйте исходный текст ядра (<userinput>tar xjf /usr/src/kernel-source-&kernelversion;.tar.bz2</userinput>), перейдите в получившийся каталог (<userinput>cd kernel-source-&kernelversion;/</userinput>). </para><para>Теперь вы можете настроить ядро. Запустите <userinput>make xconfig</userinput>, если установлены, настроены и запущены X11, иначе <userinput>make menuconfig</userinput> (вам потребуется установить пакет <classname>ncurses-dev</classname>). Внимательно прочитайте интерактивную документацию и осторожно выберите нужные параметры. Если про что-то вам непонятно, обычно лучше включить драйвер устройства(программное обеспечение, которое управляет установленным оборудованием, например карты Ethernet, SCSI контроллеры и так далее). Будьте осторожны: для других параметров, не относящиеся к определённому аппаратному обеспечению, нужно оставить значения по умолчанию, если вы не понимаете что они делают. Не забудьте выбрать ``Kernel module loader'' в ``Loadable module support'' <phrase arch="alpha"> и ``Enhanced Real Time Clock Support'' в ``Character devices'' (они </phrase> <phrase arch="not-alpha"> (</phrase> не выключены по умолчанию). Если их не включить, возникнутпроблемы с установкой Debian. </para><para>Очистите дерево исходных текстов и сбросьте параметры <classname>kernel-package</classname>. Для этого выполните <userinput>make-kpkg clean</userinput>. </para><para>Теперь, соберите ядро: <userinput>fakeroot make-kpkg --revision=custom.1.0 kernel_image</userinput>. Номер версии ``1.0'' можно изменить; это номер версии, только для отслеживания ваших сборок. Более того, вы можете добавить любое слово вместо ``custom'' (например имя машины). Сборка ядра может занять некоторое время, в зависимости от мощности машины. </para><para condition="supports-pcmcia">Если требуется поддержка PCMCIA, вам нужно установить пакет<classname>pcmcia-source</classname>. Распакуйте сжатый tar файл с правами суперпользователя в каталог <filename>/usr/src</filename> (это важно, так как модули должны находится там где их будут искать, то есть в, <filename>/usr/src/modules</filename>). Затем, с правами суперпользователя, выполните <userinput>make-kpkg modules_image</userinput>. </para><para>После завершения сборки, вы можете установить собранное ядро как обычный пакет.От суперпользователя выполните <userinput>dpkg -i ../kernel-image-&kernelversion;-<replaceable>subarchitecture</replaceable>_custom.1.0_&architecture;.deb</userinput>. Часть <replaceable>subarchitecture</replaceable> это необязательная субархитектура, <phrase arch="i386"> например ``i586'', </phrase> в зависимости от установленных параметров ядра. <userinput>dpkg -i kernel-image...</userinput> установит ядро, вместе с некоторыми полезными файла поддержки.Например, <filename>System.map</filename> будет правильно установлен(полезен при отладке проблем с ядром), а также <filename>/boot/config-&kernelversion;</filename>, содержащий параметры сборки выполняемого ядра. Также, ваш новый <classname>kernel-image-&kernelversion;</classname> пакет достаточно умён, чтобы автоматически использовать системный загрузик платформы для обновления загрузки, позволяя вам загрузиться без перезапуска системного загрузчика. Если вы создали пакет с модулями, например, если у вас есть PCMCIA, то вам нужно установить и этот пакет. </para><para>Настало время перезагрузить систему: внимательно прочитайте все предупрездения, которые могут появиться, затем наберите <userinput>shutdown -r now</userinput>. </para><para>Полная информация на <classname>kernel-package</classname> лежит в каталоге <filename>/usr/share/doc/kernel-package</filename>. </para>
  </sect2>
 </sect1>
