<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- $Id$ -->
<!-- original version: 1.5 -->

 <sect1 id="kernel-baking"><title>Compilando um Novo Kernel</title>
<para>

Porque alguém desejaria compilar um um novo kernel? É mais provável que
não precise fazer isto, pois o kernel da debian padrão trabalha com a 
maioria das configurações. No entanto, é útil compilar um novo kernel
para:

<itemizedlist>
<listitem><para>

adicionar suporte a hardwares especiais, ou hardwares que conflitam com 
os kernels padrões

</para></listitem>
<listitem><para>

adicionar suporte a hardware ou opções não incluidas no kernel padrão, tal
como APM ou SMP

</para></listitem>

<listitem arch="i386"><para>

O tipo compact e idepci não vem com som. Entretanto, o vanilla 
vem, ele pode também não funcionar por outras razões.

</para></listitem>
<listitem><para>

otimizar o kernel removendo controladores desnecessários e
deixar a inicialização mais rápida

</para></listitem>
<listitem><para>

utilizar opções do kernel que não suportados no kernel padrão
(tal como o firewall de rede)

</para></listitem>
<listitem><para>

executar um kernel atualizado ou em desenvolvimento

</para></listitem>
<listitem><para>

impressionar seus amigos, tantando coisas novas

</para></listitem>
</itemizedlist>

</para>

  <sect2><title>Gerenciamento da Imagem do Kernel</title>
<para>

Não tema tentar compilar um novo kernel. É divertido e proveitoso.

</para><para>

Para compilar um kernel usando o método da Debian, você precisará de 
alguns pacotes:
<classname>kernel-package</classname>,
<classname>kernel-source-&kernelversion;</classname> (a versão mais 
recente quando este documento foi escrito), <classname>fakeroot</classname> e 
alguns outros pacotes que provavelmente já estão instalados (veja
<filename>/usr/share/doc/kernel-package/README.gz</filename> para ver a 
lista completa).

</para><para>

Este método construirá um .deb do seu funte do kernel e caso tenha
módulos não-padrões, criar um arquivo .deb dependente destes também.
É uma ótima maneira de gerenciar imagens do kernel; O
kernel será gravado em <filename>/boot</filename>, incluindo o arquivo 
System.map e um log do arquivo de configuração ativo da compilação.

</para><para>

Note que você não <emphasis>precisará</emphasis> compilar seu kernel usando
o "Método da Debian"; mas nós achamos que o uso do sistema de empacotamento
para gerenciamento do kernel é seguro e fácil. De fato, você poderá pegar 
os fontes do kernel do Linus ao invés do
<classname>kernel-source-&kernelversion;</classname> e ainda usar o método
de compilação do <classname>kernel-package</classname>. 

</para><para>

Você encontrará a documentação completa sobre o usod do
<classname>kernel-package</classname> sob o diretório
<filename>/usr/share/doc/kernel-package</filename>. Esta seção
contém somene um breve tutorial.

</para><para arch="sparc">

Se estiver compilando um kernel para a UltraSPARC, você precisará ter 
certeza de ter instalado o pacote <classname>egcs64</classname>. Este é 
o compilador preferido para kernels 64bits da SPARC. O <command>gcc</command> 
padrão também compilará kernels 64 bits, mas ele não é estável. Mais ainda,
se você não usar o <classname>egcs64</classname> e encontrar problemas
nos kernels, você será perguntado para recompilar o kernel usando o 
<classname>egcs64</classname> para verificar se o seu problema ainda persiste.
Após instalar o <classname>egcs64</classname> tenha certeza de executar o 
comando <userinput>update-alternatives --config
sparc64-linux-gcc</userinput> como usuário root, e ter certeza 
que o <classname>egcs64</classname> está sendo usado por este programa. 

</para><para>

Nós assumiremos que o fonte do kernel está localizado em 
<filename>/usr/local/src</filename> e que a versão do seu kernel é
&kernelversion;. Como root, crie um diretório sob
<filename>/usr/local/src</filename> e altere o dono deste diretório para 
sua conta não-root. Com sua conta normal não-root, altere o diretório
para onde deseja descompactar os fontes do kernel 
(<userinput>cd /usr/local/src</userinput>), descompacte os fontes do 
kernel (<userinput>tar xIf /usr/src/kernel-source-&kernelversion;.tar.bz2</userinput>), 
mude seu diretório para ele (<userinput>cd
kernel-source-&kernelversion;/</userinput>). 

</para><para>

Agora você poderá configurar seu kernel. Execute o comando <userinput>make
xconfig</userinput> caso o X11 esteja instalado, configurado e 
sendo executado, <userinput>make menuconfig</userinput> (será necessário o pacote
<classname>ncurses-dev</classname> instalado). Leve algum tempo lendo as 
mensagens de ajuda on-line e selecione as opções cuidadosamente. Quando 
estiver em dúvida, é melhor incluir o controlador de dispositivo 
(o programa que gerencia periféricos de hardware, tal como placas 
Ethernet, controladores SCSI e outras). Benha cuidado: outras opções
não relacionadas a hardwares específicos, devem ser deicadas no 
valor padrão caso não as entenda. Não se esqueça de selecionar a 
opção "Kernel module loader" em "Loadable module support".

<phrase arch="alpha"> e  "Enhanced Real Time
Clock Support" em "Character devices" (eles não serão selecionados </phrase>
<phrase arch="not-alpha"> (ele não será selecionado  </phrase>

por padrão). Caso não estejam incluidos, sua instalação Debian poderá apresentar
problemas.

</para><para>
Limpe a árvore de fontes e resete os parâmetros do pacote <classname>kernel-package</classname>.
Para fazer isto, execute o comando <userinput>make-kpkg clean</userinput>.

</para><para>

Agora, compile o kernel: 
<userinput>fakeroot make-kpkg --revision=custom.1.0 kernel_image</userinput>. 
O número de verão "1.0" poderá ser modificado se desejar; este é somente
um número de versão que usará para ter controle sobre as construções do 
seu ekrnel. De forma parecida, você poderá colocar uma palavra no lugar
de "custom" (e.g., um nome de máquina). A compilação do Kernel poderá 
levar um tempo, dependendo do poder de processamento da sua máquina.

</para><para condition="supports-pcmcia">

Caso precise do suporte a PCMCIA, você também precisará instalar o 
pacote <classname>pcmcia-source</classname>. Descompacta o arquivo 
tar.gz como root no diretório <filename>/usr/src</filename> (é importante
que os módulos sejam encontrados no local onde o programa espere encontra-los, 
no caso, o diretório <filename>/usr/src/modules</filename>). Então, digite como 
usuário root <userinput>make-kpkg modules_image</userinput>.  

</para><para>

Assim que a compilação estiver concluída, você poderá instalar o kernel
personalizado como qualquer pacote. Como root, execute o comando <userinput>dpkg -i 
../kernel-image-&kernelversion;-<replaceable>subarquitetura</replaceable>_custom.1.0_&architecture;.deb</userinput>.
A parte <replaceable>subarquitetura</replaceable> é uma sub-arquitetura 
opcional,
<phrase arch="i386"> tal como "i586", </phrase>
dependendo das opções do kernel qe escolheu.
O comando <userinput>dpkg -i kernel-image...</userinput> instalará o kernel,
junto com outros arquivos de suporte. Por exemplo, o 
<filename>System.map</filename> será instalado
(útil para depurar problemas no kernel) assim como o
<filename>/boot/config-&kernelversion;</filename>
(contendo seu conjunto de configurações do kernel). Seu novo pacote
<classname>kernel-image-&kernelversion;</classname> é também 
inteligente o bastante para usar automaticamente o gerenciador de partida
de sua plataforma para executar uma atualização do setor de partida para 
que a inicialização ocorra sem problemas. Caso tenha criado um pacote
PCMCIA, você precisará instala-lo também.

</para><para>

É hora de reiniciar o sistema: leia cuidadosamente o alerta que o passo
acima produziu, então execute o comando <userinput>shutdown -r now</userinput>.

</para><para>

Para mais informações sobre o <classname>kernel-package</classname>, leia
a bela documentação em <filename>/usr/share/doc/kernel-package</filename>.

</para>
  </sect2>
 </sect1>
