<!-- original version: 16990 -->
<!-- Revisado por Rudy Godoy -->

 <sect1 id="kernel-baking"><title>Compilar un nuevo núcleo</title>
<para>

¿Por qué querría alguien compilar un nuevo núcleo? La mayoría de las
veces no será necesario puesto que el núcleo estándar entregado
con Debian maneja la mayoría de configuraciones. En cualquier caso
es útil compilar un nuevo núcleo para:

<itemizedlist>
<listitem><para>

tratar necesidades especiales de hardware, o conflictos de los mismos con
núcleos predeterminados

</para></listitem>
<listitem><para>

tratar hardware u opciones no incluidas en el núcleo predeterminado, como
APM o SMP

</para></listitem>

<listitem arch="i386"><para>

Las variantes «compact» y «idepci» no proveen sonido. Mientras que los núcleos
«vanilla» lo hacen, sin embargo este podría no funcionar por otros motivos.

</para></listitem>
<listitem><para>

optimizar el núcleo eliminando controladores no usados para acelerar
el tiempo de arranque

</para></listitem>
<listitem><para>

usar opciones del núcleo que no estén soportadas por el núcleo
estándar (como el sistema de cortafuegos para red)

</para></listitem>
<listitem><para>

ejecutar un núcleo actualizado o de desarrollo

</para></listitem>
<listitem><para>

impresionar a sus amigos, probar nuevas cosas

</para></listitem>
</itemizedlist>

</para>

  <sect2><title>Gestión de la imagen del núcleo</title>
<para>

No tenga temor de intentar compilar el núcleo. Es divertido y fructífero.

</para><para>

Para compilar un núcleo a la manera de Debian, necesita algunos paquetes:
<classname>kernel-package</classname>,
<classname>kernel-source-&kernelversion;</classname> (la versión mas reciente
al momento de editar este documento), <classname>fakeroot</classname> y 
algunos otros que probablemente ya estén instalados (vea 
<filename>/usr/share/doc/kernel-package/README.gz</filename> para una
lista completa.

</para><para>

Este método creara un «.deb» para su núcleo fuente y, si tiene módulos 
no estándares, construya también un «.deb» con dependencia sincronizada de
los mismos. Es la mejor forma de gestionar imágenes del núcleo;
<filename>/boot</filename> albergará el núcleo, el fichero «System.map» y
el fichero de registro del fichero «config» activo para la construcción.

</para><para>

Observe que no <emphasis>tiene</emphasis> que compilar su núcleo «al estilo
Debian»; pero creemos que usar el sistema de paquetes para
gestionar su núcleo es realmente más seguro y sencillo. De hecho, puede
obtener las fuentes de su núcleo directamente de Linus en lugar de
<classname>kernel-source-&kernelversion;</classname>, y aún así usar el método
de compilación <classname>kernel-package</classname>.

</para><para>

Note que puede encontrar documentación completa sobre el uso de 
<classname>kernel-package</classname> en 
<filename>/usr/doc/kernel-package</filename>. Esta sección sólo contiene un
breve tutorial.

</para><para arch="sparc">

Si está compilando un núcleo para UltraSPARC necesitará asegurase de
tener instalado el paquete <classname>egcs64</classname>. Éste es el 
compilador preferido para núcleos SPARC de 64bits. El compilador 
predeterminado <command>gcc</command> también compilará núcleos de 64bit, 
pero no tan estables. Además, si no usa  <classname>egcs64</classname> y 
se encuentra con problemas en el núcleo es bastante probable que se le pida
recompilar éste con <classname>egcs64</classname> para asegurarse de que el
problema persiste. Después de instalar  <classname>egcs64</classname> 
asegúrese de ejecutar 
<userinput>update-alternatives --config sparc64-linux-gcc</userinput>
como superusuario, y asegúrese de utilizar <classname>egcs64</classname> 
para esto.

</para><para>

A partir de ahora, asumiremos que las fuentes de su núcleo se
encuentran en <filename>/usr/local/src</filename> y que la versión de su
núcleo es &kernelversion;. Como superusuario, cree un directorio
dentro de <filename>/usr/local/src</filename> y cambie el propietario del
mismo a su cuenta de usuario común. Usando su cuenta de usuario común, 
ubiquese en el directorio donde desee desempaquetar las fuentes del
núcleo (<userinput>cd /usr/local/src</userinput>), extraiga las fuentes del
mismo (<userinput>tar xzf /usr/src/kernel-source-&kernelversion;.tar.bz2
</userinput>), y cámbiese a este directorio (<userinput>cd
kernel-source-&kernelversion;/</userinput>).  

</para><para>

Ahora puede configurar su núcleo. Ejecute  
<userinput>make xconfig</userinput> si tiene X11 instalado,
configurado y ejecutándose, <userinput>make menuconfig</userinput> en 
otro caso (necesitará instalar <classname>ncurses-dev</classname>). Tómese 
su tiempo para leer la ayuda en línea y escoja cuidadosamente. Cuando 
tenga duda, a menudo es mejor incluir el controlador de dispositivo
(el software que maneja el hardware periférico, como tarjetas Ethernet, 
controladoras SCSI, etc.) del que no está seguro. Tenga cuidado: Otras 
opciones no relacionadas con un hardware específico deberían dejarse en 
su valor predeterminado si no las comprende. No olvide seleccionar 
«Kernel module loader» (para la autocarga de módulos) en  
«Loadable module support»

<phrase arch="alpha"> y «Enhanced Real Time
Clock Support» en «Character devices» (éstos no son </phrase>
<phrase arch="not-alpha"> (éste no es </phrase>

elegidos por omisión).  Si no son incluidos, su instalación Debian
experimentará problemas.

</para><para>

Limpie el árbol de fuentes y reinicie los parámetros de
<classname>kernel-package</classname>. Para hacerlo, ejecute
<userinput>make-kpkg clean</userinput>.

</para><para>

Ahora, compile el núcleo: <userinput>fakeroot /usr/sbin/make-kpkg
--revision=custom.1.0 kernel_image</userinput>. Por supuesto, el número de la
versión «1.0» puede cambiarse por el que quiera; éste sólo es el número 
de versión que usará para seguir la pista a los núcleos que haya 
construido. La compilación del núcleo puede tomar un buen
tiempo, dependiendo de la potencia de su máquina.

</para><para condition="supports-pcmcia">

Si necesita soporte PCMCIA, también necesitará instalar el paquete
<classname>pcmcia-source</classname>. Desempaquete el fichero tar comprimido
con gzip, como superusuario en el directorio <filename>/usr/src</filename> 
(es importante que los módulos se encuentren donde se espera que estén, a 
saber, <filename>/usr/src/modules</filename>). Luego, como superusuario, 
ejecute <userinput>make-kpkg modules_image</userinput>.

</para><para>

Una vez finalizada la compilación, puede instalar su núcleo
personalizado como cualquier paquete. Como superusuario, ejecute 
<userinput>dpkg -i ../kernel-image-&kernelversion;-<replaceable>subarquitectura</replaceable>_custom.1.0_&architecture;.deb</userinput>.
La parte <replaceable>subarquitectura</replaceable> es una sub-arquitectura 
opcional, 
<phrase arch="i386"> como "i586", </phrase> dependiendo de las opciones 
que haya establecido en el núcleo. 
<userinput>dpkg -i kernel-image...</userinput> 
instalará el núcleo, junto con otros ficheros de soporte. Por ejemplo, 
<filename>System.map</filename> será adecuadamente instalado (de gran ayuda
para depuración de problemas con el núcleo), y también se instalará
<filename>/boot/config-&kernelversion;</filename>, conteniendo su actual
configuración. Su nuevo paquete 
<classname>kernel-image-&kernelversion;</classname> es también lo
suficientemente listo como para usar automáticamente usar el gestor de
de arranque de su plataforma y actualizar así la información de la imagen 
del núcleo, la cual le permita arrancar sin necesidad de ejecutarlo nuevamente.
Si ha creado un paquete de módulos, por ejm. si tiene PCMCIA, necesitará 
instalar también dicho paquete.

</para><para>

Es momento de reiniciar el sistema: lea cuidadosamente cualquier advertencia
que pueda haberse producido, luego ejecute <userinput>shutdown -r now</userinput>.

</para><para>

Para más información sobre <classname>kernel-package</classname>, vea
la excelente documentación en 
<filename>/usr/share/doc/kernel-package</filename>.

</para>
  </sect2>
 </sect1>
