<!-- Start of file appendix/random-bits.xml -->
<!-- $Id: random-bits.xml 22661 2004-10-06 15:34:52Z fjpop-guest $ -->

<appendix id="random-bits"><title>Random Bits</title>


<!-- Start of file appendix/example-preseed.xml -->
<!-- $Id: example-preseed.xml 25005 2005-01-17 20:14:40Z joeyh $ -->

<sect1 id="example-preseed">
<title>Preconfiguration File Example</title>

<para>

This is a complete working example of a preconfiguration file for an automated
install. Its use is explained in <xref linkend="automatic-install"/>. You
may want to uncomment some of the lines before using the file.

<note><para>
In order to be able to properly present this example in the manual, we've had
to split some lines. This is indicated by the use of the line-continuation-character
<quote>\</quote> and extra indentation in the next line. In a real preconfiguration
file, these split lines have to be joined into <emphasis>one single line</emphasis>.
If you do not, preconfiguration will fail with unpredictable results.
</para></note>

<informalexample><screen>
#### Modifying syslinux.cfg.

# Edit the syslinux.cfg (or similar) file, and add parameters to the end
# of the append line(s) for the kernel.
#
# You'll at least want to add a parameter telling the installer where to
# get its preseed file from.
# If you're installing from USB media, use this, and put the preseed file
# in the toplevel directory of the USB stick.
#   preseed/file=/hd-media/preseed
# If you're netbooting, use this instead:
#   preseed/url=http://host/path/to/preseed
# If you're remastering a CD, you could use this:
#   preseed/file=/cdrom/preseed
# Be sure to copy this file to the location you specify.
# 
# While you're at it, you may want to throw a debconf/priority=critical in
# there, to avoid most questions even if the preseeding below misses some.
# And you might set the timeout to 1 in syslinux.cfg to avoid needing to hit
# enter to boot the installer.
#
# Language, country, and keyboard selection cannot be preseeded from a file,
# because the questions are asked before the preseed file can be loaded.
# Instead, to avoid these questions, pass some more parameters to the kernel:
#
#    languagechooser/language-name=English
#    countrychooser/shortlist=US
#    console-keymaps-at/keymap=us
#
# Note that the kernel accepts a maximum of 8 command line options and
# 8 environment options (including any options added by default for the
# installer). If these numbers are exceeded, 2.4 kernels will drop any
# excess options and 2.6 kernels will panic.
# Some of the default options, like 'vga=normal' and 'devfs=mount' may be
# safely removed for most installations, which may allow you to add more
# options for preseeding.

#### Shell commands.

# d-i preseeding is inherently not secure. Nothing in the installer checks
# for attempts at buffer overflows or other exploits of the values of a
# preseed file like this one. Only use preseed files from trusted
# locations! To drive that home, and because it's generally useful, here's
# a way to run any shell command you'd like inside the installer,
# automatically.

# This first command is run as early as possible, just after
# preseeding is read.
#d-i preseed/early_command              string \
#    wget http://url/to/my.udeb -O /tmp/my.udeb; udpkg -i /tmp/my.udeb

# This command is run just before the install finishes, but when there is
# still a usable /target directory.
#d-i preseed/late_command               string \
#    for deb in /hd-media/*.deb; do cp $deb /target/tmp; \
#    chroot /target dpkg -i /tmp/$(basename $deb); done

# This command is run just as base-config is starting up.
#base-config base-config/early_command  string echo hi mom

# This command is run after base-config is done, just before the login:
# prompt. This is a good way to install a set of packages you want, or to
# tweak the configuration of the system.
#base-config base-config/late_command   string \
#    apt-get install zsh; chsh -s /bin/zsh

#### Network configuration.

# Of course, this won't work if you're loading your preseed file from the
# network! But it's great if you're booting from CD or USB stick. You can
# also pass network config parameters in on the kernel params if you are
# loading preseed files from the network.

# netcfg will choose an interface that has link if possible. This makes it
# skip displaying a list if there is more than one interface.
d-i  netcfg/choose_interface            select auto

# If you prefer to configure the network manually, here's how:
#d-i netcfg/disable_dhcp                boolean true
#d-i netcfg/get_nameservers             string 192.168.1.1
#d-i netcfg/get_ipaddress               string 192.168.1.42
#d-i netcfg/get_netmask                 string 255.255.255.0
#d-i netcfg/get_gateway                 string 192.168.1.1
#d-i netcfg/confirm_static              boolean true

# Note that any hostname and domain names assigned from dhcp take
# precedence over values set here. However, setting the values still
# prevents the questions from being shown even if values come from dhcp.
d-i  netcfg/get_hostname                string unassigned-hostname
d-i  netcfg/get_domain                  string unassigned-domain

# Disable that annoying WEP key dialog.
d-i  netcfg/wireless_wep                string
# The wacky dhcp hostname that some ISPs use as a password of sorts.
#d-i netcfg/dhcp_hostname               string radish

#### Mirror settings.

d-i  mirror/country                     string enter information manually
d-i  mirror/http/hostname               string http.us.debian.org
d-i  mirror/http/directory              string /debian
d-i  mirror/suite                       string testing
d-i  mirror/http/proxy                  string 

### Partitioning.

# If the system has free space you can choose to only partition that space.
#d-i partman-auto/init_automatically_partition \
#    select Use the largest continuous free space

# Alternatively, you can specify a disk to partition. The device name can
# be given in either devfs or traditional non-devfs format.
# For example, to use the first disk devfs knows of:
d-i  partman-auto/disk                  string /dev/discs/disc0/disc

# You can choose from any of the predefined partitioning recipes:
d-i  partman-auto/choose_recipe         select \
     All files in one partition (recommended for new users)
#d-i partman-auto/choose_recipe         select Desktop machine
#d-i partman-auto/choose_recipe         select Multi-user workstation

# Or provide a recipe of your own...
# The recipe format is documented in the file devel/partman-auto-recipe.txt.
# If you have a way to get a recipe file into the d-i environment, you can
# just point at it.
#d-i partman-auto/expert_recipe_file    string /hd-media/recipe

# If not, you can put an entire recipe in one line. This example creates
# a small /boot partition, suitable swap, and uses the rest of the space
# for the root partition:
#d-i partman-auto/expert_recipe         string boot-root :: \
#    20 50 100 ext3 $primary{ } $bootable{ } method{ format } format{ } \
#    use_filesystem{ } filesystem{ ext3 } mountpoint{ /boot } . \
#    500 10000 1000000000 ext3 method{ format } format{ } \
#    use_filesystem{ } filesystem{ ext3 } mountpoint{ / } . \
#    64 512 300% linux-swap method{ swap } format{ } . 
# For reference, here is that same recipe in a more readable form:
#    boot-root ::
#       40 50 100 ext3
#          $primary{ } $bootable{ }
#          method{ format } format{ }
#          use_filesystem{ } filesystem{ ext3 }
#          mountpoint{ /boot }
#       .
#       500 10000 1000000000 ext3
#          method{ format } format{ }
#          use_filesystem{ } filesystem{ ext3 }
#          mountpoint{ / }
#       .
#       64 512 300% linux-swap
#          method{ swap } format{ }
#       .

# This makes partman automatically partition without confirmation.
d-i partman/confirm_write_new_label     boolean true
d-i partman/choose_partition            select \
    Finish partitioning and write changes to disk
d-i partman/confirm                     boolean true

#### Boot loader installation.

# Grub is the default boot loader (for x86). If you want lilo installed
# instead, uncomment this:
#d-i grub-installer/skip                boolean true

# This is fairly safe to set, it makes grub install automatically to the MBR
# if no other operating system is detected on the machine.
d-i  grub-installer/only_debian         boolean true

# This one makes grub-installer install to the MBR if if finds some other OS
# too, which is less safe as it might not be able to boot that other OS.
d-i  grub-installer/with_other_os       boolean true

# Alternatively, if you want to install to a location other than the mbr,
# uncomment and edit these lines:
#d-i grub-installer/bootdev             string (hd0,0)
#d-i grub-installer/only_debian         boolean false
#d-i grub-installer/with_other_os       boolean false

##### Finishing up the first stage install.

# Avoid that last message about the install being complete.
d-i  prebaseconfig/reboot_in_progress   note 


##### Preseeding base-config.

# Avoid the introductory message.
base-config  base-config/intro          note

# Avoid the final message.
base-config  base-config/login          note

# If you installed a display manager, but don't want to start it immediately
# after base-config finishes.
#base-config base-config/start-display-manager        boolean false

###### Time zone setup.

# Controls whether or not the hardware clock is set to GMT.
base-config  tzconfig/gmt                             boolean true

# If you told the installer that you're in the United States, then you
# can set the time zone using this variable.
# (Choices are: Eastern, Central, Mountain, Pacific, Alaska, Hawaii,
# Aleutian, Arizona East-Indiana, Indiana-Starke, Michigan, Samoa, other)
base-config  tzconfig/choose_country_zone/US          select Eastern
# If you told it you're in Canada.
# (Choices are: Newfoundland, Atlantic, Eastern, Central,
# East-Saskatchewan, Saskatchewan, Mountain, Pacific, Yukon, other)
base-config  tzconfig/choose_country_zone/CA          select Eastern
# If you told it you're in Brazil. (Choices are: East, West, Acre,
# DeNoronha, other)
base-config  tzconfig/choose_country_zone/BR          select East
# Many countries have only one time zone. If you told the installer you're
# in one of those countries, you can choose its standard time zone via this
# question.
base-config  tzconfig/choose_country_zone_single      boolean true
# This question is asked as a fallback for countries other than those
# listed above, which have more than one time zone. You can preseed one of
# the time zones, or "other".
#base-config tzconfig/choose_country_zone_multiple    select 

###### Account setup.

# To preseed the root password, you have to put it in the clear in this
# file. That is not a very good idea, use caution!
#passwd passwd/root-password            password r00tme
#passwd passwd/root-password-again      password r00tme

# If you want to skip creation of a normal user account.
#passwd passwd/make-user                boolean false

# Alternatively, you can preseed the user's name and login.
#passwd passwd/user-fullname            string Debian User
#passwd passwd/username                 string debian
# And their password, but use caution!
#passwd passwd/user-password            password insecure
#passwd passwd/user-password-again      password insecure

###### Apt setup.

# This question controls what source the second stage installation uses
# for packages. Choices are cdrom, http, ftp, filesystem, edit sources list
# by hand
base-config  apt-setup/uri_type         select http

# If you choose ftp or http, you'll be asked for a country and a mirror.
base-config  apt-setup/country          select enter information manually
base-config  apt-setup/hostname         string http.us.debian.org
base-config  apt-setup/directory        string /debian
# Stop after choosing one mirror.
base-config  apt-setup/another          boolean false

# You can choose to install non-free and contrib software.
#base-config apt-setup/non-free         boolean true
#base-config apt-setup/contrib          boolean true

# Do enable security updates.
base-config  apt-setup/security-updates boolean true

###### Package selection.

# You can choose to install any combination of tasks that are available.
# Available tasks as of this writing include: Desktop environment,
# Web server, Print server, DNS server, File server, Mail server, 
# SQL database, manual package selection. The last of those will run
# aptitude. You can also choose to install no tasks, and force the
# installation of a set of packages in some other way.
tasksel      tasksel/first   multiselect Desktop environment
#tasksel     tasksel/first   multiselect Web server, Mail server, DNS server

###### Mailer configuration.

# During a normal install, exim asks only two questions. Here's how to
# avoid even those. More complicated preseeding is possible.
exim4-config exim4/dc_eximconfig_configtype \
    select no configuration at this time

# It's a good idea to set this to whatever user account you choose to
# create. Leaving the value blank results in postmaster mail going to
# /var/mail/mail.
exim4-config exim4/dc_postmaster        string 

###### X Configuration.

# Preseeding Debian's X config is possible, but you probably need to know
# some details about the video hardware of the machine, since Debian's X
# configurator does not do fully automatic configuration of everything.

# X can detect the right driver for some cards, but if you're preseeding,
# you override whatever it chooses. Still, vesa will work most places.
#xserver-xfree86 xserver-xfree86/config/device/driver select vesa

# A caveat with mouse autodetection is that if it fails, X will retry it
# over and over. So if it's preseeded to be done, there is a possibility of
# an infinite loop if the mouse is not autodetected.
#xserver-xfree86 xserver-xfree86/autodetect_mouse     boolean true

# Monitor autodetection is recommended.
xserver-xfree86 xserver-xfree86/autodetect_monitor    boolean true
# Uncomment if you have a LCD display.
#xserver-xfree86 xserver-xfree86/config/monitor/lcd   boolean true
# X has three configuration paths for the monitor. Here's how to preseed
# the "medium" path, which is always available. The "simple" path may not
# be available, and the "advanced" path asks too many questions.
xserver-xfree86  xserver-xfree86/config/monitor/selection-method \
    select medium
xserver-xfree86  xserver-xfree86/config/monitor/mode-list \
    select 1024x768 @ 60 Hz

###### Everything else.

# Depending on what software you choose to install, or if things go wrong
# during the installation process, it's possible that other questions may
# be asked. You can preseed those too, of course. To get a list of every
# possible question that could be asked during an install, do an
# installation, and then run these commands:
#   debconf-get-selections --installer > file
#   debconf-get-selections >> file

# If you like, you can include other preseed files into this one.
# Any settings in those files will override pre-existing settings from this
# file. More that one file can be listed, separated by spaces; all will be
# loaded. The included files can have preseed/include directives of their
# own as well. Note that if the filenames are relative, they are taken from
# the same directory as the preseed file that includes them.
#d-i preseed/include                    string x.cfg

# More flexibly, this runs a shell command and if it outputs the names of
# preseed files, includes those files. For example, to switch configs based
# on a particular usb storage device (in this case, a built-in card reader):
#d-i preseed/include_command            string \
#    if $(grep -q "GUID: 0aec3050aec305000001a003" /proc/scsi/usb-storage-*/*); \
#    then echo kraken.cfg; else echo otherusb.cfg; fi
</screen></informalexample>

</para>
</sect1>
<!--   End of file appendix/example-preseed.xml -->

<!-- Start of file appendix/files.xml -->
<!-- $Id: files.xml 24840 2005-01-09 03:34:52Z fjpop-guest $ -->


 <sect1 id="linuxdevices"><title>Linux Devices</title>
<para>

In Linux you have various special files in
<filename>/dev</filename>. These files are called device files. In
the Unix world accessing hardware is different.  There you have a
special file which actually runs a driver which in turn accesses the
hardware. The device file is an interface to the actual system
component. Files under <filename>/dev</filename> also behave
differently than ordinary files. Below are the most important device
files listed.

</para><para>

<informaltable><tgroup cols="2"><tbody>
<row>
  <entry><filename>fd0</filename></entry>
  <entry>First Floppy Drive</entry>
</row><row>
  <entry><filename>fd1</filename></entry>
  <entry>Second Floppy Drive</entry>
</row>
</tbody></tgroup></informaltable>

<informaltable><tgroup cols="2"><tbody>
<row>
  <entry><filename>hda</filename></entry>
  <entry>IDE Hard disk / CD-ROM on the first IDE port (Master)</entry>
</row><row>
  <entry><filename>hdb</filename></entry>
  <entry>IDE Hard disk / CD-ROM on the first IDE port (Slave)</entry>
</row><row>
  <entry><filename>hdc</filename></entry>
  <entry>IDE Hard disk / CD-ROM on the second IDE port (Master)</entry>
</row><row>
  <entry><filename>hdd</filename></entry>
  <entry>IDE Hard disk / CD-ROM on the second IDE port (Slave)</entry>
</row><row>
  <entry><filename>hda1</filename></entry>
  <entry>First partition of the first IDE hard disk</entry>
</row><row>
  <entry><filename>hdd15</filename></entry>
  <entry>Fifteenth partition of the fourth IDE hard disk</entry>
</row>
</tbody></tgroup></informaltable>

<informaltable><tgroup cols="2"><tbody>
<row>
  <entry><filename>sda</filename></entry>
  <entry>SCSI Hard disk with lowest SCSI ID (e.g. 0)</entry>
</row><row>
  <entry><filename>sdb</filename></entry>
  <entry>SCSI Hard disk with next higher SCSI ID (e.g. 1)</entry>
</row><row>
  <entry><filename>sdc</filename></entry>
  <entry>SCSI Hard disk with next higher SCSI ID (e.g. 2)</entry>
</row><row>
  <entry><filename>sda1</filename></entry>
  <entry>First partition of the first SCSI hard disk</entry>
</row><row>
  <entry><filename>sdd10</filename></entry>
  <entry>Tenth partition of the fourth SCSI hard disk</entry>
</row>
</tbody></tgroup></informaltable>

<informaltable><tgroup cols="2"><tbody>
<row>
  <entry><filename>sr0</filename></entry>
  <entry>SCSI CD-ROM with the lowest SCSI ID</entry>
</row><row>
  <entry><filename>sr1</filename></entry>
  <entry>SCSI CD-ROM with the next higher SCSI ID</entry>
</row>
</tbody></tgroup></informaltable>

<informaltable><tgroup cols="2"><tbody>
<row>
  <entry><filename>ttyS0</filename></entry>
  <entry>Serial port 0, COM1 under MS-DOS</entry>
</row><row>
  <entry><filename>ttyS1</filename></entry>
  <entry>Serial port 1, COM2 under MS-DOS</entry>
</row><row>
  <entry><filename>psaux</filename></entry>
  <entry>PS/2 mouse device</entry>
</row><row>
  <entry><filename>gpmdata</filename></entry>
  <entry>Pseudo device, repeater data from GPM (mouse) daemon</entry>
</row>
</tbody></tgroup></informaltable>

<informaltable><tgroup cols="2"><tbody>
<row>
  <entry><filename>cdrom</filename></entry>
  <entry>Symbolic link to the CD-ROM drive</entry>
</row><row>
  <entry><filename>mouse</filename></entry>
  <entry>Symbolic link to the mouse device file</entry>
</row>
</tbody></tgroup></informaltable>

<informaltable><tgroup cols="2"><tbody>
<row>
  <entry><filename>null</filename></entry>
  <entry>Everything pointed to this device will disappear</entry>
</row><row>
  <entry><filename>zero</filename></entry>
  <entry>One can endlessly read zeros out of this device</entry>
</row>
</tbody></tgroup></informaltable>

</para>

  <sect2>
<title>Setting Up Your Mouse</title>

<para>

The mouse can be used in both the Linux console (with gpm) and the X window
environment. The two uses can be made compatible if the gpm repeater is used
to allow the signal to flow to the X server as shown:

<informalexample><screen>
mouse =&gt; /dev/psaux  =&gt; gpm =&gt; /dev/gpmdata -&gt; /dev/mouse =&gt; X
         /dev/ttyS0             (repeater)        (symlink)
         /dev/ttyS1
</screen></informalexample>

Set the repeater protocol to be raw (in <filename>/etc/gpm.conf</filename>) while
setting X to the original mouse protocol in <filename>/etc/X11/XF86Config</filename>
or <filename>/etc/X11/XF86Config-4</filename>.

</para><para>

This approach to use gpm even in X has advantages when the mouse is
unplugged inadvertently.  Simply restarting gpm with

<informalexample><screen>
# /etc/init.d/gpm restart
</screen></informalexample>

will re-connect the mouse in software without restarting X.

</para><para>

If gpm is disabled or not installed with some reason, make sure to set X to
read directly from the mouse device such as /dev/psaux. For details, refer
to the 3-Button Mouse mini-Howto at
<filename>/usr/share/doc/HOWTO/en-txt/mini/3-Button-Mouse.gz</filename>, 
<userinput>man gpm</userinput>, 
<filename>/usr/share/doc/gpm/FAQ.gz</filename>, and 
<ulink url="&url-xfree86;current/mouse.html">README.mouse</ulink>.

</para><para arch="powerpc">

For PowerPC, in <filename>/etc/X11/XF86Config</filename> or
<filename>/etc/X11/XF86Config-4</filename>, set the mouse device to
<userinput>"/dev/input/mice"</userinput>. 

</para><para arch="powerpc">

Modern kernels give you the capability to emulate a three-button mouse
when your mouse only has one button. Just add the following lines to
<filename>/etc/sysctl.conf</filename> file.

<informalexample><screen>
# 3-button mouse emulation 
# turn on emulation
/dev/mac_hid/mouse_button_emulation = 1
# Send middle mouse button signal with the F11 key
/dev/mac_hid/mouse_button2_keycode = 87
# Send right mouse button signal with the F12 key
/dev/mac_hid/mouse_button3_keycode = 88
# For different keys, use showkey to tell you what the code is.
</screen></informalexample>

</para>
  </sect2>
 </sect1>

 <sect1 id="tasksel-size-list">
 <title>Disk Space Needed for Tasks</title>
<para>

The base sarge installation for i386, including all standard packages,
requires 178MB of disk space.

</para><para>

The following table lists sizes reported by aptitude for the tasks listed in
tasksel. Note that some tasks have overlapping constituents, so the total
installed size for two tasks together may be less than the total obtained by
adding the numbers up. 

</para><para>

<informaltable><tgroup cols="4">
<thead>
<row>
  <entry>Task</entry>
  <entry>Installed size (MB)</entry>
  <entry>Download size (MB)</entry>
  <entry>Space needed to install (MB)</entry>
</row>
</thead>

<tbody>
<row>
  <entry>Desktop</entry>
  <entry>1537</entry>
  <entry>521</entry>
  <entry>2058</entry>
</row>

<row>
  <entry>Web server</entry>
  <entry>71</entry>
  <entry>21</entry>
  <entry>92</entry>
</row>

<row>
  <entry>Print server</entry>
  <entry>240</entry>
  <entry>83</entry>
  <entry>323</entry>
</row>

<row>
  <entry>Mail server</entry>
  <entry>41</entry>
  <entry>12</entry>
  <entry>53</entry>
</row>

<row>
  <entry>File server</entry>
  <entry>85</entry>
  <entry>34</entry>
  <entry>119</entry>
</row>

<row>
  <entry>SQL database</entry>
  <entry>108</entry>
  <entry>33</entry>
  <entry>141</entry>
</row>

</tbody>
</tgroup></informaltable>

</para>
 </sect1>
<!--   End of file appendix/files.xml -->

<!-- Start of file appendix/chroot-install.xml -->
<!-- $Id: chroot-install.xml 25154 2005-01-27 18:20:43Z fjpop-guest $ -->

 <sect1 id="linux-upgrade">
 <title>Installing &debian; from a Unix/Linux System</title>

<para>

This section explains how to install &debian; from an existing
Unix or Linux system, without using the ncurses-based, menu-driven
installer as explained in the rest of the manual. This "cross-install"
HOWTO has been requested by users switching to &debian; from
Redhat, Mandrake, and SUSE. In this section some familiarity with
entering *nix commands and navigating the file system is assumed. In
this section, <prompt>$</prompt> symbolizes a command to be entered in
the user's current system, while <prompt>#</prompt> refers to a
command entered in the Debian chroot.

</para><para>

Once you've got the new Debian system configured to your preference,
you can migrate your existing user data (if any) to it, and keep on
rolling. This is therefore a "zero downtime" &debian;
install. It's also a clever way for dealing with hardware that
otherwise doesn't play friendly with various boot or installation
media.

</para>

  <sect2>
  <title>Getting Started</title>
<para>

With your current *nix partitioning tools, repartition the hard
drive as needed, creating at least one filesystem plus swap. You
need at least 150MB of space available for a console only install,
or at least 300MB if you plan to install X.

</para><para>

To create file systems on your partitions. For example, to create an 
ext3 file system on partition <filename>/dev/hda6</filename> (that's  
our example root partition):

<informalexample><screen>
# mke2fs -j /dev/hda6
</screen></informalexample>

To create an ext2 file system instead, omit <userinput>-j</userinput>.

</para><para>

Initialize and activate swap (substitute the partition number for 
your intended Debian swap partition):

<informalexample><screen>
# mkswap /dev/hda5
# sync; sync; sync
# swapon /dev/hda5
</screen></informalexample>

Mount one partition as <filename>/mnt/debinst</filename> (the
installation point, to be the root (<filename>/</filename>) filesystem
on your new system). The mount point name is strictly arbitrary, it is
referenced later below.

<informalexample><screen>
# mkdir /mnt/debinst
# mount /dev/hda6 /mnt/debinst
</screen></informalexample>

</para>
  </sect2>

  <sect2>
  <title>Install <command>debootstrap</command></title>
<para>

The tool that the Debian installer uses, which is recognized as the
official way to install a Debian base system, is
<command>debootstrap</command>. It uses <command>wget</command> and
<command>ar</command>, but otherwise depends only on
<classname>/bin/sh</classname>. Install <command>wget</command> and
<command>ar</command> if they aren't already on your current system,
then download and install <command>debootstrap</command>.

</para><para>

If you have an rpm-based system, you can use alien to convert the 
.deb into .rpm, or download an rpm-ized version at 
<ulink url="http://people.debian.org/~blade/install/debootstrap"></ulink>

</para><para>

Or, you can use the following procedure to install it
manually. Make a work folder for extracting the .deb into:

<informalexample><screen>
# mkdir work
# cd work
</screen></informalexample>

The <command>debootstrap</command> binary is located in the Debian
archive (be sure to select the proper file for your
architecture). Download the <command>debootstrap</command> .deb from
the <ulink url="http://ftp.debian.org/debian/pool/main/d/debootstrap/">
pool</ulink>, copy the package to the work folder, and extract the
binary files from it. You will need to have root privileges to install
the binaries.

<informalexample><screen>
# tar -xf debootstrap_0.X.X_arch.deb
# cd /
# zcat /full-path-to-work/work/data.tar.gz | tar xv
</screen></informalexample>

</para>
  </sect2>

  <sect2>
  <title>Run <command>debootstrap</command></title>
<para>

<command>debootstrap</command> can download the needed files directly
from the archive when you run it. You can substitute any Debian
archive mirror for <userinput>http.us.debian.org/debian</userinput> in
the command example below, preferably a mirror close to you
network-wise. Mirrors are listed at 
<ulink url="http://www.debian.org/misc/README.mirrors"></ulink>.

</para><para>

If you have a &releasename; &debian; CD mounted at
<filename>/cdrom</filename>, you could substitute a file URL instead
of the http URL: <userinput>file:/cdrom/debian/</userinput>

</para><para>

Substitute one of the following for <replaceable>ARCH</replaceable> 
in the <command>debootstrap</command> command: 

<userinput>alpha</userinput>, 
<userinput>arm</userinput>,
<userinput>hppa</userinput>, 
<userinput>i386</userinput>, 
<userinput>ia64</userinput>, 
<userinput>m68k</userinput>,
<userinput>mips</userinput>, 
<userinput>mipsel</userinput>, 
<userinput>powerpc</userinput>, 
<userinput>s390</userinput>, or
<userinput>sparc</userinput>.

<informalexample><screen>
# /usr/sbin/debootstrap --arch ARCH &releasename; \
     /mnt/debinst http://http.us.debian.org/debian
</screen></informalexample>

</para>
  </sect2>

  <sect2>
  <title>Configure The Base System</title>
<para>

Now you've got a real Debian system, though rather lean, on disk.
<command>Chroot</command> into it:

<informalexample><screen>
# chroot /mnt/debinst /bin/bash
</screen></informalexample>

</para>

   <sect3>
   <title>Mount Partitions</title>
<para>

You need to create <filename>/etc/fstab</filename>.

<informalexample><screen>
# editor /etc/fstab
</screen></informalexample>

Here is a sample you can modify to suit:

<informalexample><screen>
# /etc/fstab: static file system information.
#
# file system    mount point   type    options                  dump pass
/dev/XXX         /             ext2    defaults                 0    0
/dev/XXX         /boot         ext2    ro,nosuid,nodev          0    2

/dev/XXX         none          swap    sw                       0    0
proc             /proc         proc    defaults                 0    0

/dev/fd0         /mnt/floppy   auto    noauto,rw,sync,user,exec 0    0
/dev/cdrom       /mnt/cdrom    iso9660 noauto,ro,user,exec      0    0

/dev/XXX         /tmp          ext2    rw,nosuid,nodev          0    2
/dev/XXX         /var          ext2    rw,nosuid,nodev          0    2
/dev/XXX         /usr          ext2    rw,nodev                 0    2
/dev/XXX         /home         ext2    rw,nosuid,nodev          0    2
</screen></informalexample>

Use <userinput>mount -a</userinput> to mount all the file systems you
have specified in your <filename>/etc/fstab</filename>, or to mount
file systems individually use:

<informalexample><screen>
# mount /path   # e.g.: mount /usr
</screen></informalexample>

You can mount the proc file system multiple times and to arbitrary
locations, though /proc is customary. If you didn't use
<userinput>mount -a</userinput>, be sure to mount proc before
continuing:

<informalexample><screen>
# mount -t proc proc /proc
</screen></informalexample>

</para>
   </sect3>

   <sect3>
   <title>Configure Keyboard</title>
<para>

To configure your keyboard:

<informalexample><screen>
# dpkg-reconfigure console-data
</screen></informalexample>

</para>
   </sect3>

   <sect3>
   <title>Configure Networking</title>
<para>

To configure networking, edit
<filename>/etc/network/interfaces</filename>,
<filename>/etc/resolv.conf</filename>, and
<filename>/etc/hostname</filename>.

<informalexample><screen>
# editor /etc/network/interfaces 
</screen></informalexample>

Here are some simple examples from
<filename>/usr/share/doc/ifupdown/examples</filename>:

<informalexample><screen>
######################################################################
# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)
# See the interfaces(5) manpage for information on what options are 
# available.
######################################################################

# We always want the loopback interface.
#
auto lo
iface lo inet loopback

# To use dhcp:
#
# auto eth0
# iface eth0 inet dhcp

# An example static IP setup: (broadcast and gateway are optional)
#
# auto eth0
# iface eth0 inet static
#     address 192.168.0.42
#     network 192.168.0.0
#     netmask 255.255.255.0
#     broadcast 192.168.0.255
#     gateway 192.168.0.1
</screen></informalexample>

Enter your nameserver(s) and search directives in
<filename>/etc/resolv.conf</filename>:

<informalexample><screen>
# editor /etc/resolv.conf
</screen></informalexample>

A simple <filename>/etc/resolv.conf</filename>:

<informalexample><screen>
search hqdom.local\000
nameserver 10.1.1.36
nameserver 192.168.9.100
</screen></informalexample>

Enter your system's host name (2 to 63 characters):

<informalexample><screen>
# echo DebianHostName &gt; /etc/hostname
</screen></informalexample>

If you have multiple network cards, you should arrange the names of
driver modules in the <filename>/etc/modules</filename> file into the
desired order. Then during boot, each card will be associated with the
interface name (eth0, eth1, etc.) that you expect.

</para>
   </sect3>

   <sect3>
   <title>Configure Timezone, Users, and APT</title>
<para>

Set your timezone, add a normal user, and choose your <command>apt</command>
sources by running

<informalexample><screen>
# /usr/sbin/base-config new
</screen></informalexample>

</para>
   </sect3>

   <sect3>
   <title>Configure Locales</title>
<para>

To configure your locale settings to use a language other than
English, install the locales support package and configure it:

<informalexample><screen>
# apt-get install locales
# dpkg-reconfigure locales
</screen></informalexample>

NOTE: Apt must be configured before, ie. during the base-config phase.
Before using locales with character sets other than ASCII or latin1,
please consult the appropriate localization HOWTO.

</para>
   </sect3>
  </sect2>

  <sect2>
  <title>Install a Kernel</title>
<para>

If you intend to boot this system, you probably want a Linux kernel
and a boot loader. Identify available pre-packaged kernels with

<informalexample><screen>
# apt-cache search kernel-image
</screen></informalexample>

Then install your choice using its package name.

<informalexample><screen>
# apt-get install kernel-image-<replaceable>2.X.X-arch-etc</replaceable>
</screen></informalexample>

</para>
  </sect2>

  <sect2>
<title>Set up the Boot Loader</title>
<para>

To make your &debian; system bootable, set up your boot loader to load
the installed kernel with your new root partition. Note that debootstrap
does not install a boot loader, though you can use apt-get inside your
Debian chroot to do so.

</para><para arch="i386">

Check <userinput>info grub</userinput> or <userinput>man
lilo.conf</userinput> for instructions on setting up the
bootloader.  If you are keeping the system you used to install Debian, just
add an entry for the Debian install to your existing grub
<filename>menu.lst</filename> or <filename>lilo.conf</filename>.  For
<filename>lilo.conf</filename>, you could also copy it to the new system and
edit it there. After you are done editing, call lilo (remember it will use
<filename>lilo.conf</filename> relative to the system you call it from).

</para><para arch="i386">

Here is a basic <filename>/etc/lilo.conf</filename> as an example:

<informalexample><screen>
boot=/dev/hda6
root=/dev/hda6
install=/boot/boot-menu.b
delay=20
lba32
image=/vmlinuz
label=Debian
</screen></informalexample>

</para><para arch="powerpc">

Check <userinput>man yaboot.conf</userinput> for instructions on
setting up the bootloader.  If you are keeping the system you used to
install Debian, just add an entry for the Debian install to your
existing <filename>yaboot.conf</filename>.  You could also copy it to
the new system and
edit it there. After you are done editing, call ybin (remember it will
use <filename>yaboot.conf</filename> relative to the system you call it from).

</para><para arch="powerpc">

Here is a basic <filename>/etc/yaboot.conf</filename> as an example:

<informalexample><screen>
boot=/dev/hda2
device=hd:
partition=6
root=/dev/hda6
magicboot=/usr/lib/yaboot/ofboot
timeout=50
image=/vmlinux
label=Debian
</screen></informalexample>

On some machines, you may need to use <userinput>ide0:</userinput> 
instead of <userinput>hd:</userinput>. 

</para>
  </sect2>
 </sect1>
<!--   End of file appendix/chroot-install.xml -->

</appendix>
<!--   End of file appendix/random-bits.xml -->
