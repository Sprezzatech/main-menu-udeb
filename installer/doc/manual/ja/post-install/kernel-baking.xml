<?xml version="1.0" encoding="EUC-JP"?>
<!-- retain these comments for translator revision tracking -->
<!-- $Id$ -->
<!-- original version: 11648 -->

 <sect1 id="kernel-baking"><title>新しいカーネルのコンパイル</title>
<para>

<!--
Why would someone want to compile a new kernel? It is often not
necessary since the default kernel shipped with Debian handles most
configurations. However, it is useful to compile a new kernel in order
to:
-->
新しいカーネルをコンパイルしようとする動機はなんでしょう?
Debian では、標準で入っているカーネルで多くの機能をサポートしてい
るので、ほとんどその必要はありません。しかし、以下のような目的のためには、
新しいカーネルをコンパイルすることは有益です。

<itemizedlist>
<listitem><para>

<!--
handle special hardware needs, or hardware conflicts with the pre-supplied
kernels
-->
特殊なハードウェアを使ったり、
標準カーネルとハードウェアとの競合を回避するため

</para></listitem>
<listitem><para>

<!--
handle hardware or options not included in the stock kernel, such as
APM or SMP
-->
APM や SMP など、
既存のカーネルがサポートしていないハードウェアや機能を利用するため

</para></listitem>

<listitem arch="i386"><para>
 
<!--
The compact and idepci flavors don't come with sound. Although
the vanilla kernel does, it might not work for other reasons.  
-->
compact 版や idepci 版ではサウンドに対応していません。
vanilla kernel では対応していますが、別の理由で動作しないかもしれません。

</para></listitem>
<listitem><para>

<!--
optimize the kernel by removing useless drivers to speed up boot
time
-->
使わないドライバを取り除くことでカーネルを最適化し、
起動にかかる時間を短くするため

</para></listitem>
<listitem><para>

<!--
use options of the kernel which are not supported by the default
kernel (such as network firewalling)
-->
(ネットワークでのファイアウォール機能など)
デフォルトのカーネルでサポートされていない機能を利用するため

</para></listitem>
<listitem><para>

<!--
run a updated or development kernel
-->
最新のカーネルや開発版のカーネルを使用するため

</para></listitem>
<listitem><para>

<!--
impress your friends, try new things
-->
目新しいことをして友達を感心させるため

</para></listitem>
</itemizedlist>

</para>

  <sect2><title>カーネルイメージの管理</title>
<para>

<!--
Don't be afraid to try compiling the kernel.  It's fun and profitable. 
-->
カーネルのコンパイルを恐がらないでください。楽しく、かつ役に立つ作業です。

</para><para>

<!--
To compile a kernel the Debian way, you need some packages:
<classname>kernel-package</classname>,
<classname>kernel-source-&kernelversion;</classname> (the most recent version
at the time of this writing), <classname>fakeroot</classname> and a
few others which are probably already installed (see
<filename>/usr/share/doc/kernel-package/README.gz</filename> for the
complete list).
-->
Debian 流にカーネルをコンパイルするのに必要なパッケージは、
<classname>kernel-package</classname>、
<classname>kernel-source-&kernelversion;</classname> (この文書を執筆している
時点で最も新しいバージョンです)、<classname>fakeroot</classname>、あとは
多分すでにインストール済みのパッケージがいくつか、です (完全な一覧については 
<filename>/usr/share/doc/kernel-package/README.gz</filename> を
ご覧ください)。

</para><para>

<!--
This method will make a .deb of your kernel source, and, if you have
non-standard modules, make a synchronized dependent .deb of those
too. It's a better way to manage kernel images;
<filename>/boot</filename> will hold the kernel, the System.map, and a
log of the active config file for the build.
-->
この方法はカーネルソースから .deb を作り、また非標準のモジュールが
あれば、作成したカーネルに依存した .deb も同時に作ります。
これはカーネルイメージの管理には良い方法で、
<filename>/boot</filename> にカーネル、System.map、
ビルドに使った設定ファイルの記録を保存します。

</para><para>

<!--
Note that you don't <emphasis>have</emphasis> to compile your kernel
the ``Debian way''; but we find that using the packaging system to
manage your kernel is actually safer and easier.  In fact, you can get
your kernel sources right from Linus instead of
<classname>kernel-source-&kernelversion;</classname>, yet still use the
<classname>kernel-package</classname> compilation method.
-->
必ずしも「Debian 流」にカーネルをコンパイルする必要は
<emphasis>ありません</emphasis>。しかし、カーネルの管理にもパッケージング
システムを用いるほうが、実際に安全で簡単です。実は
<classname>kernel-source-&kernelversion;</classname> ではなく、Linus が
配付しているカーネルソースをそのまま利用することもできますが、その場合でも 
<classname>kernel-package</classname> を用いてコンパイルしてください。

</para><para>

<!--
Note that you'll find complete documentation on using
<classname>kernel-package</classname> under
<filename>/usr/share/doc/kernel-package</filename>.  This section just
contains a brief tutorial.
-->
<classname>kernel-package</classname> の利用に必要な文書すべては、
<filename>/usr/share/doc/kernel-package</filename>
ディレクトリにあります。
そのため、この節では簡単な解説のみを行います。

</para><para arch="sparc">

<!--
If you are compiling a kernel for UltraSPARC you will need to be sure
you have installed the <classname>egcs64</classname> package. This is
the preferred compiler for 64bit SPARC kernels. The default
<command>gcc</command> will also compile 64bit kernels, but is not as
stable. Plus, if you do not use <classname>egcs64</classname> and you
encounter kernel problems, you will most likely be asked to recompile
the kernel using <classname>egcs64</classname> in order to verify your
problem still exists. After installing <classname>egcs64</classname>
be sure to run <userinput>update-alternatives -\-config
sparc64-linux-gcc</userinput> as root, and be sure that
<classname>egcs64</classname> is being used for this program. 
-->
UltraSPARC でカーネルをコンパイルする場合は、必ず <classname>egcs64</classname>
パッケージをインストールしておく必要があります。これは
64bit SPARC カーネルで推奨されるコンパイラです。標準の
<command>gcc</command> でも 64 ビットカーネルをコンパイルすることはできますが、
それほど安定していません。それに、<classname>egcs64</classname> を使用していない
カーネルで問題が起きた場合に、それが本当の問題であることを証明するためには、
<classname>egcs64</classname> を用いてカーネルを再構築するよう求められるでしょう。
<classname>egcs64</classname> をインストールした後、必ず root アカウントで
<userinput>update-alternatives --config
sparc64-linux-gcc</userinput> を実行してください。そして実際に
<classname>egcs64</classname> が使われているか確認してください。

</para><para>

<!--
Hereafter, we'll assume your kernel source will be located in
<filename>/usr/local/src</filename> and that your kernel version is
&kernelversion;.  As root, create a directory under
<filename>/usr/local/src</filename> and change the owner of that
directory to your normal non-root account.  As your normal non-root
account, change your directory to where you want to unpack the kernel
sources (<userinput>cd /usr/local/src</userinput>), extract the kernel
sources (<userinput>tar xIf
/usr/src/kernel-source-&kernelversion;.tar.bz2</userinput>), change your
directory to it (<userinput>cd
kernel-source-&kernelversion;/</userinput>). 
-->
ここでは、バージョン &kernelversion; のカーネルソースが
<filename>/usr/local/src</filename> にあると仮定します。
まずは root アカウントで <filename>/usr/local/src</filename>
ディレクトリを作成し、そのディレクトリの所有者を、通常使う root ではない
アカウントに変更してください。続いて通常のアカウントで、
カーネルソースを展開するディレクトリに
移動 (<userinput>cd /usr/local/src</userinput>) し、カーネルソースを
展開 (<userinput>tar xIf
/usr/src/kernel-source-&kernelversion;.tar.bz2</userinput>) してから、
そのディレクトリに移動 (<userinput>cd
kernel-source-&kernelversion;/</userinput>) します。

</para><para>

<!--
Now, you can configure your kernel.  Run <userinput>make
xconfig</userinput> if X11 is installed, configured and being run,
<userinput>make menuconfig</userinput> otherwise (you'll need
<classname>ncurses-dev</classname> installed). Take the time to read
the online help and choose carefully. When in doubt, it is typically
better to include the device driver (the software which manages
hardware peripherals, such as Ethernet cards, SCSI controllers, and so
on) you are unsure about.  Be careful: other options, not related to a
specific hardware, should be left at the default value if you do not
understand them.  Do not forget to select ``Kernel module loader'' in
``Loadable module support''


<phrase arch="alpha"> and ``Enhanced Real Time
Clock Support'' in ``Character devices'' (they are </phrase>
<phrase arch="not-alpha"> (it is </phrase>

not selected by default).  If not included, your Debian installation
will experience problems.
-->
次にカーネルコンパイルの設定を行います。X11 のインストールおよび設定が
済んでいて、X11 を実行中の場合は <userinput>make xconfig</userinput> を、
そうでない場合は <userinput>make menuconfig</userinput> を実行します (後者では
<classname>ncurses-dev</classname> がインストールされている必要があります)。
オンラインヘルプを時間をかけて読み、注意深く選択してください。
一般的に、迷った場合はそのデバイスドライバ (イーサネットカードや、
SCSI コントローラなどの周辺機器を制御するソフトウェア) を入れた方が
よいでしょう。なお注意していただきたいのですが、
特定のハードウェアに関係のないその他のオプションで、
よく理解できないものはデフォルトの値のままにしておいてください。
また、"Loadable module support" にある "Kernel module loader"


<phrase arch="alpha"> と "Character devices" にある "Enhanced Real Time
Clock Support" (これらは</phrase>
<phrase arch="not-alpha"> (</phrase>

デフォルトでは選択されていません) は忘れずに選択してください。
さもないと、Debian のインストールに問題が生じることもあります。

</para><para>

<!--
Clean the source tree and reset the <classname>kernel-package</classname>
parameters.  To do that, do <userinput>make-kpkg clean</userinput>.
-->
続いてソースツリーをクリアし、<classname>kernel-package</classname> のパラメータを
リセットします。これには、<userinput>make-kpkg clean</userinput> を実行してください。

</para><para>

<!--
Now, compile the kernel: 
<userinput>fakeroot make-kpkg -\-revision=custom.1.0 kernel_image</userinput>. 
The version number of ``1.0'' can be changed at will; this is just a
version number that you will use to track your kernel builds.
Likewise, you can put any word you like in place of ``custom'' (e.g.,
a host name).  Kernel compilation may take quite a while, depending on
the power of your machine.
-->
さあ、カーネルをコンパイルしましょう。
<userinput>fakeroot make-kpkg --revision=custom.1.0 kernel_image</userinput>
を実行してください。バージョン番号 ``1.0'' は自由に変えられます。この番号は、
構築したカーネルを後から確認できるようにするためのものだからです。
同様に、``custom'' の箇所にもお好みのキーワード (例えばホスト名など) を
使うことができます。マシンのパワーにもよりますが、カーネルのコンパイルには
かなり時間がかかります。

</para><para condition="supports-pcmcia">

<!--
If you require PCMCIA support, you'll also need to install the
<classname>pcmcia-source</classname> package.  Unpack the gzipped tar file
as root in the directory <filename>/usr/src</filename> (it's important that
modules are found where they are expected to be found, namely,
<filename>/usr/src/modules</filename>).  Then, as root, do <userinput>make-kpkg
modules_image</userinput>.  
-->
PCMCIA の機能が必要なら、<classname>pcmcia-source</classname>
のインストールも必要です。root アカウントで <filename>/usr/src</filename>
ディレクトリに gzip で圧縮された tar ファイルを展開します (モジュールは
あるべき場所、つまり <filename>/usr/src/modules</filename>
になくてはなりません)。それから root アカウントで <userinput>make-kpkg
modules_image</userinput> を実行します。

</para><para>

<!--
Once the compilation is complete, you can install your custom kernel
like any package.  As root, do <userinput>dpkg -i
../kernel-image-&kernelversion;-<replaceable>subarchitecture</replaceable>_custom.1.0_&architecture;.deb</userinput>.
The <replaceable>subarchitecture</replaceable> part is an optional
sub-architecture,
<phrase arch="i386"> such as ``i586'', </phrase>
depending on what kernel options you set.
<userinput>dpkg -i kernel-image...</userinput> will install the
kernel, along with some other nice supporting files.  For instance,
the <filename>System.map</filename> will be properly installed
(helpful for debugging kernel problems), and
<filename>/boot/config-&kernelversion;</filename> will be installed,
containing your current configuration set.  Your new
<classname>kernel-image-&kernelversion;</classname> package is also clever
enough to automatically use your platform's boot-loader to run an
update on the booting, allowing you to boot without re-running the
boot loader.  If you have created a modules package, e.g., if you have
PCMCIA, you'll need to install that package as well.
-->
一旦コンパイルが完了すれば、他のパッケージと同じように、そのカスタムカーネルを
インストールできます。root アカウントで <userinput>dpkg -i
../kernel-image-&kernelversion;-<replaceable>subarchitecture</replaceable>_custom.1.0_&architecture;.deb</userinput>
を実行してください。<replaceable>subarchitecture</replaceable> は、
カーネルのオプションで設定された
<phrase arch="i386"> ``i586'' のような </phrase>
任意のサブアーキテクチャを表しています。
また <userinput>dpkg -i kernel-image...</userinput> とすると、カーネルと一緒に
役に立つ補助的なファイルもいくつかインストールされます。例えば
カーネルの問題をデバッグするのに役立つ <filename>System.map</filename> や、
現行のカーネルの設定が記録されている
<filename>/boot/config-&kernelversion;</filename> などが適切にインストールされます。
さらに、新たに作成された
<classname>kernel-image-&kernelversion;</classname> パッケージは、
自動的にあなたのプラットフォームのブートローダを設定してくれますので、
ブートローダを再度実行する必要はありません。
なお、モジュールパッケージを作成した場合、例えば PCMCIA がある場合は、
同様にそれらもインストールする必要があるでしょう。

</para><para>

<!--
It is time to reboot the system: read carefully any warning that the
above step may have produced, then <userinput>shutdown -r now</userinput>.
-->
さて、システムを再起動する時がやってきました。これまでの作業の間に何か警告が表示されていたら
それらを注意深く読み、それから <userinput>shutdown -r now</userinput> を実行してください。

</para><para>

<!--
For more information on <classname>kernel-package</classname>, read
the fine documentation in <filename>/usr/share/doc/kernel-package</filename>.
-->
<classname>kernel-package</classname> に関するより詳しい情報については、
<filename>/usr/share/doc/kernel-package</filename> にある素晴しいドキュメントをお読みください。

</para>
  </sect2>
 </sect1>
