<?xml version='1.0'?>
<!-- -*- DocBook -*- -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
    "/usr/share/sgml/docbook/dtd/xml/4.2/docbookx.dtd" [
 <!ENTITY % sgml.features "IGNORE">
 <!ENTITY % xml.features  "INCLUDE">
 <!ENTITY % dbcent PUBLIC
      "-//OASIS//ENTITIES DocBook Character Entities V4.2//EN"
      "/usr/share/sgml/docbook/dtd/xml/4.2/dbcentx.mod"> %dbcent;
 <!ENTITY % commondata     SYSTEM "common.ent"        > %commondata;
 <!ENTITY % urlsdata       SYSTEM "urls.ent"          > %urlsdata;
]>


<article>

    <articleinfo>
      <title>Some bits about the Debian Installer by the development team</title>
      <authorgroup>
	<author>
	  <firstname>Joey</firstname>
	  <surname>Hess</surname>
	</author>

	<author>
	  <firstname>Holger</firstname>
	  <surname>Levsen</surname>
	</author>

	<author>
	  <firstname>Christian</firstname>
	  <surname>Perrier</surname>
	</author>

	<author>
	  <firstname>Frans</firstname>
	  <surname>Pop</surname>
	</author>

      </authorgroup>

      <abstract>
	<para>
This article features details about some specific parts of Debian Installer.
</para>

	<para>
One part will give details about Debian Installer internationalisation framework and work methods
</para>
      </abstract>

      <copyright>
	<year>2005
 <trademark class="copyright">
 </trademark>
 </year>
	<holder>Joey Hess, Holger Levsen, Christian Perrier, Frans Pop</holder>
      </copyright>
      <legalnotice>

	<para>
This article is free; you may redistribute it and/or modify it
under the terms of the GNU General Public License. 
</para>

      </legalnotice>
    </articleinfo>

  <sect1><title>The future of the Debian Installer</title>
<para>

A long time ago, installing Debian meant using the boot-floppies, an
installer so old that even its name harks back to days of yore when a
floppy disk was the only reasonable way to install linux.

</para><para>

I think it's important to realize what a good installer the boot-floppies
were for their time. It's possible to find comments circa 1995 praising how
well Debian's installer worked compared to some of the alternitives back
then. Although I had to read them three times to believe it. The
boot-floppies worked, it only took six floppies, and you didn't even need
to use a command line to install Debian.

</para><para>

So the boot-floppies began as a best of breed linux installer, then were
retrofitted to kinda support CD installs and a few ports, then after a few
years began to show their age as hardware detection, streamlined graphical
installers, and fancy partitioners became standards in linux installation.

</para><para>

By the late 90's they were in maintenance mode and were only pulled out and
laboriously dusted off and brought up-to-date with newer kernels,
architectures, and other changes in the several months before new releases
of Debian. In a time when everyone was running around mass-installing
server farms of hundreds of machines using cutting-edge new hardware, the
out of date boot floppies began to hold Debian back.

</para><para>

There's a lesson to be learned in this, and it is that when it comes to
installation, Debian cannot afford to rest on its laurals. 

</para><para>

Now that sarge is released, Debian finally has an installation system that
we can be proud of. Kudos to everyone who helped make the new Debian
Installer the awesome installer it is today; you've wildly exceeded my
expectations, when I began the project, of what a great installer we would
have for sarge.

</para><para>

But things should not stop here, because Debian Installer is not just an
installer for sarge; it's a base we can use for making the Debian install
process continue to improve for etch and beyond. And the Debian Installer
is intentionally not a self-contained installer that does its own thing in
its own corner using its own technology. Instead, from its very core
(debootstrap) up to its finishing touches (tasksel) it's a part of Debian
that is designed to be improved as Debian as a whole is improved, and to
itself promote improvements in Debian.

</para>

   <sect2><title>How to help</title>
<para>

Here are some ways you can get involved and help &d-i; development.

</para>

    <sect3><title>Translate &d-i;</title>
<para>

   We are still looking for more new languages, as well as more translators
   to keep the translations we have current.

</para>
    </sect3>
    <sect3><title>Make it install an UTF-8 system</title>
<para>

   With all these languages, it's time Debian became UTF-8 by default. If
   you agree, then research the pitfalls, convince everyone this is the
   right choice, and make it happen.

</para>
    </sect3>
    <sect3><title>Get involved in supporting your architecture in &d-i;</title>
<para>

   &d-i; has between zero and two porters for most architectures. For
   example, I was forced to do kernel updates for &d-i; hppa a few months
   back because no actual hppa person was available. I have booted exactly
   one hppa machine in my life, and know little about the architecture.
   This was not ideal. 
   
</para><para>

   Continued involvement of porters to the less popular architecttures is
   essential if &d-i; is to continue to support those architectures let alone
   improve its support. It's quite possible that future &d-i; beta releases
   for etch may not be available for all ports, if we don't have active 
   developers and testers for those ports.

</para><para>

   We wouldn't mind seeing &d-i; work as an installer for the Hurd or a BSD
   either..

</para>
    </sect3>
    <sect3><title>Work on &d-i; updates for sarge</title>
<para>

   &d-i;'s modular design makes it pretty easy to update individual udebs
   in a sarge point release to fix important bugs. Many such bugs are
   already known and fixed in unstable; some fixes need backporting to
   sarge, while some fixes are backported to our sarge branch and need only
   testing and uploads.
   
</para><para>

   Some examples of things it would be nice to fix include some nasty bugs
   in translations (especially debconf substitution variable typoes),
   updates to the mirror list to reflect changes since rc3, kernel security
   updates, and updates to the discover1-data hardware detection database to
   make sarge autodetect some more hardware.

</para>
    </sect3>
    <sect3><title>Work on supporting sarge installs using the etch installer</title>
<para>

   It should be possible to install sarge using a &d-i; with a newer kernel
   than 2.6.8 and 2.4.27, so that as new hardware comes out sarge can still
   be installed on it. Etch's &d-i; is planned to be backwards compatible and
   capable of installing sarge, but to make it work usefully some packages
   in sarge (such as kernel and hardware detection packages) will need to
   be updated in a backports-like repository. And someone would need to do
   the work to set up such a repository, put together a version of &d-i; that
   can use this repository, and make CD images based on it.

</para>
    </sect3>
    <sect3><title>Help us develop a graphical installer</title>
<para>

   Work on a graphical version of &d-i; has already begun, and indeed it's
   now mostly usable. It still needs a lot of work, so people proficient in
   UI polishing, graphics, and the technical side of making it work well on
   a variety of graphics hardware are needed in the &d-i; team.

</para>
    </sect3>
    <sect3><title>Help improve automated installs</title>
<para>

   Automated installs work for sarge, but the documentation is poor, it can
   be hard to set up, and need to preseed parameters to set up a network
   interface at the kernel boot line is unweildly and problimatic. Also
   work needs to be done on making the partitioner more flexible and
   friendly for autmated installs, enabling automated LVM and RAID setup,
   and so on.
 
</para>
    </sect3>
    <sect3><title>Add encrypted filesystem support to partman</title>
<para>

   Partman was designed with support for encrypted filesystems in mind, so
   this is just a small matter of code. Your laptop will thank you.

</para>
    </sect3>
    <sect3><title>Help improve hardware detection</title>
<para>

   We hope to be switching &d-i; to use hotplug for hardware detection, at
   least for 2.6, based on work done by Ubuntu, and we need people to help
   work on that. Also one of sarge's weak points is that SATA often doesn't
   work very well, or that other HDD modules are loaded in the wrong order
   to work properly. We also have issues with network interfaces sometimes
   changing names between the installer and the installed system.

</para>
    </sect3>
    <sect3><title>Help support non-free drivers/firmware</title>
<para>

   Since Debian is removing non-free firmware from main for etch, we need
   to make sure that &d-i; can still make use of that firmware, from
   non-free, if the user needs it. We have some interesting ideas involving
   initramfs and catting non-free images to free &d-i; images, but all this
   needs developers to make happen or to come up with better ideas.

</para>
    </sect3>
    <sect3><title>Help support secure apt</title>
<para>

   &d-i; will need changes to support secure apt and signed Packages files.
   To secure the whole installation, &d-i; needs to check signatures of the
   udebs it downloads, too.

</para>
    </sect3>
    <sect3><title>Help support installation by the blind</title>
<para>

   Sarge's installer only supports blind users installing on i386 with 2.4,
   using <emphasis>floppies</emphasis>. We need someone who is committed to
   making this better and making &d-i; fully accessible to these users.

</para>
    </sect3>
    <sect3><title>Help improve base-config, X setup, etc</title>
<para>
 
   Because the installation doesn't finish where &d-i; proper leaves off.
   This part of the install is noticibly lacking polish compared to the
   rest of &d-i;, and we need to find ways to improve that. One possibility
   is to move all of this part into the first stage of the installer, so
   that the installer boots diretly into a fully installer desktop system.

</para>
    </sect3>
    <sect3><title>Add support for installs via PPPOE</title>
<para>
   
   PPPOE is not well integrated with the installer, it is not supported in
   the first stage install and has to be set up by hand in the second
   stage. To get this improved we need a developer who is familiar with
   PPPOE.

</para>
    </sect3>
    <sect3><title>Make it easier to build custom CDs and otherwise customise the installer</title>
<para>

   Many of our users need custom versions of the installer, and we need
   improved documentation and/or better tools for doing this.
   
</para><para>

   A particular problem area is CD generation, which is very hard to get
   working. That could be improved by making some easier CD creation tool
   (like pickax) support &d-i;, or improving debian-cd, or some other way. 

</para><para>

   Another problem area is building versions of the installer with a custom
   kernel or third party modules. This needs to be made easier, so that a
   regular user can hope to do it, and it needs to be well documented.

</para>
    </sect3>
    <sect3><title>Find a way to remove a single question from the standard install process</title>
<para>

   Every question the installer asks a user is one more place for the
   installation process to go wrong or for a newie to give up. During your
   next install, pick a question and figure out ways to do away with it.
   
</para><para>

   Some candidates:
<itemizedlist>
<listitem><para>
       Why should the installer ask the user to choose a Debian mirror when
       it can pick a good one? 
</para></listitem>
<listitem><para>
       Could the installer get enough sanity checks added so it could 
       sometimes safely install grub without asking the user for
       confirmation?
</para></listitem>
<listitem><para>
       Could the installer automatically resize existing Windows partitions
       to make room for Debian, without the user having to work out how to do
       it by hand?
</para></listitem>
<listitem><para>
       Could the installer figure out that a machine is a laptop and
       install the right set of packages for it?
</para></listitem>
</itemizedlist>

</para>
    </sect3>
    <sect3><title>Invent the next great thing in &d-i;</title>
<para>

   The &d-i; developers love to take a good idea and run with it. For
   example, last spring some basic work was contributed to let &d-i; detect
   other OSes and other linux distros also installed on the machine. Now we
   detect a dozen or so OSes and all major distros; this feature is a key
   part of &d-i; and is used in the bootloader setup, partitioner, and
   elsewhere. It wouldn't have happened without that initial idea and the
   beginning of work on what has become our os-prober component. Next time
   you install sarge, see if you cannot think of novel way that &d-i; could
   improve the installation process -- and then work on coding up enough of
   it so there's a plausable premise of a nice feature -- and we will help
   you take it the rest of the way.

</para>
    </sect3>
    <sect3><title>Add moon-buggy to &d-i;</title>
<para>

   This one has just been on our TODO list for too long to be ignored..

</para>
    </sect3>
   </sect2>
   <sect2><title>Conclusion</title>

<para>

So please don't assume that Debian Installer development is over, or that
it can be put off until near the release of etch. We lost some development
momentum while the installer was frozen for the sarge release. Now we're
trying to ramp things back up, involve as many developers with the
installer as we can, and make sarge's old installer, in a year's time, look
as quaint as the boot-floppies do today.

</para>
   </sect2>
  </sect1>

    <sect1>
      <title>Debian Installer i18n/l10n issues</title>

      <sect2>
	<title>Some history</title>

	<sect3>
	  <title>Why localize?</title>

	  <para>
A recurrent debate often comes about the necessity to localize the
installation process of a Linux distribution. Indeed, a very commonly spread
idea floats where Unix/Linux systems adminstrators have to get some fluency
in the English language to do their work, so they should not really worry
about using this language to install a Linux system.
</para>

	  <para>
This very narrow point of view is fortunately quite outdated in the Debian
community and the need for localisation of the installer is well established
for years. However, the main arguments are still valid and reminding them
may be of some interest.
</para>

	  <para>
First of all, not every system administrator prefers using English. Most of
them, in real life, just pick up their own language when it is available.
</para>

	  <para>
Moreover, Debian is more and more newbie friendly. As explained elsewhere in
this paper, one of the design goals of the installer was making it easy to
use for every user, including newcomers to the Linux environments. Here,
offering a completely localised installation process becomes a key point.
</para>

	  <para>
Finally, more and more Custom Debian Distributions are based on Debian sarge
and thus depend on Debian Installer for their installation process. Some of
these distributions are targeted at home users or for use in educational
environments, where a complete localisation is also a key argument of choice.
</para>

	</sect3>

	<sect3>
	  <title>Boot floppies i18n</title>
	</sect3>

	<sect3>
	  <title>Early design choices</title>

	  <para>
The very modular nature of &d-i; has made localisation easier because it
became really easy for translators to focus on the most important issues.
</para>

	  <para>
The key point has been putting all translatable strings into
debconf-style templates (sometimes by using specific templates introduced
with cdebconf, the C-rewritten debconf program). The advent, during early
sarge development, of the use of gettext for debconf templates i18n, made
the process very simple for translators.
</para>

	</sect3>

	<sect3>
	  <title>The advent of the &d-i; i18n team</title>

	  <para>
During the early stages of Debian Installer, translators first were
the translators of boot-floppies, or were coming from established
translation teams. The work was then pretty informal with translators
joining the &d-i; development mailing list spontaneously and getting
access to the CVS repository to commit translations themselves.
</para>

	  <para>
There already were a few dozen &d-i; packages at that time and
following the status of translations rapidly became nearly impossible for
translators.
</para>

	  <para>
The first &d-i; beta versions also raised the problem of completing the
translation work for the releases with hardly any infrastructure to follow
the completion and showed a need for a gateway between developers and the
emerging "team" of translators. The need for some documentation for
internationalisation and localisation work for the installer was also a good
motivation to get people specifically involved in i18n coordination.
</para>

	  <para>
The first signs of i18n coordination appeared in mid 2003 with
the first beta releases of &d-i;. Petter Reinholdtsen, because of the
Skolelinux needs in that matter, began acting that way and wrote the first
version of specific documentation for &d-i; localisation.
</para>

	  <para>
The beta 4 release finally made the i18n coordination team a reality,
bringing &d-i; developers a reliable way to include i18n and l10n in release
schedules.
</para>

	</sect3>


      </sect2>

      <sect2>
	<title>Generalities</title>

	<sect3>
	  <title>Internationalisation with po-debconf</title>

	  <para>Each &d-i; package, just like other regular packages, includes
a translation template in the "debian/po" directory in the package's source tree. In that
directory, one file per language groups together the translation of all the template's strings
for that package
</para>

	  <para>
The final package build process assembles these templates and their
translations without any manual intervention from the package
maintainer or &d-i; developer.
</para>

	  <para>
That very simple process is completely identical to processes for
regular Debian packages using debconf template translation, which makes
the work simpler for both translators and developers.
</para>


	</sect3>
	
	<sect3>
	  <title>The concept of "levels"</title>

	  <para>
The design choices of &d-i; make it interact strongly with "regular" &d-i;
packages. Indeed, as soon as possible in the installation process, &d-i;
leaves other packages control the installation process. Even in "first
stage" (the installation phase before the only reboot), some of the user
interaction is provided by stripped udeb versions of regular Debian packages.
</para>

	  <para>
After the reboot, the "second stage" of &d-i; is controlled by the
base-config package, which may still be seen as a &d-i; package (it is
maintained by the &d-i; team). However, this package heavily relies on other
packages such as shadow, tasksel, pppconfig and a few others to achieve some
tasks. This means that a full localisation of the installation process, as
seen from the user, has to include localisation for these packages.
</para>

	  <para>
In order to give translators priorities and make their work
progressive, the i18n team has established "levels" of translation which
group together all involved parts, sorted by order of "importance" with
regards to localisation.
</para>

	  <para>
The technical section of this paper will describe details about these
levels.
</para>

	</sect3>

	<sect3>
	  <title>Documentation i18n</title>

	  <para>
Documenting the installation process has always been a priority in
Debian. The Installation Manual is indeed a long tradition of good quality
documentation to assist users and system administrators installing their new
Debian system.
</para>

	  <para>
Because of the complete rewrite of the installation process, the
Installation Manual had to be completely rewritten, from scratch for many
parts. Here as well, getting some translation work is a huge improvment to
make Debian a real "universal operating system".
</para>

	  <para>
The installation manual translations are handled separately from the
programs translations. Up to a very recent past, they even didn't use
gettext to handle translations but a system quite similar to the Debian web
site translation system.
</para>

	  <para>
For obvious reasons, the amount of work involved being significantly larger, the
installation manual is currently translated into less languages than the
installer itself. This is also probably due to the use of a somewhat more
complex system not involving gettext.
</para>

	  <para>
Plans for the future are a slow switch to gettext, which already
began for a few languages, while other teams have preferred staying with
the former system as long as sarge is not released.
</para>

	</sect3>

      </sect2>


      <sect2>
	<title>Organisation</title>
	<sect3>
	  <title>The coordination team</title>

	  <para>
The role of the i18n coordination team is very broad. Indeed, it may be
shortened to "be the articulation point between &d-i; developers and &d-i;
translators". Even if translators have always been considered to be full
members of the &d-i; team, the need for this articulation point was obvious.
</para>
<!-- Not sure what you mean here, but "articulation" almost certainly is not it...
     Maybe "pivotal"? -->

	  <para>
The role of the i18n coordination team may be resumed in the following tasks:
</para>
	  <itemizedlist>
	    <listitem>
	      <para>
		     It is the reference point for translators. Each translator
		     knows that (s)he can get any needed information from
		     one of the i18n team members.
                </para>
	    </listitem>
	    <listitem>
	      <para>
		     It guarantees consistency in writing style between English 
		     messages. Though not strictly related to 
		     the l10n tasks, it rapidly appears that the i18n team is
		     most often the first aware of new needed templates and an
		     established practice is now, for developers, to get
		     a discussion about writing style for new templates.
               </para>
	    </listitem>
	    <listitem>
	      <para>
		     Searching for and "validating" new translators.
		     There are indeed two ways for new languages to get
		     included: self-nominated volunteers or contacts
		     established by one of the i18n team members. All these
		     new translators have to be mentored during the early
		     stages of their work, up to the moment they can handle
		     it in complete autonomy. This process could be called
		     the "New Translator" process, even if not as formalized
		     as the New Maintainer process.
                </para>
	    </listitem>
	    <listitem>
	      <para>
		     The translators need tools to check whether their
		     translation work is still up-to-date. Translators are
		     never happy until they reached the heavens of 100%
		     completion. The role of the
		     &d-i; i18n team is to provide them with these tools
                </para>
	    </listitem>
	    <listitem>
	      <para>
		      The i18n team members have to get a good knowledge of
		      &d-i; development to be able to assist translators as
		      well as handle i18n-related issues and bug reports.
		      Some &d-i; packages are also partly maintained by the
		      i18n team such as languagechooser and countrychooser.
<!-- You could also mention encoding, LTR, special packages to support arabic, oriental languages -->
                </para>
	    </listitem>
	    <listitem>
	      <para>
		      In general, the i18n team coordinates all i18n-related activites
		      in the &d-i; team; It also manages the testing of the
		      release candidates with regards to i18n/l10n.
                </para>
	    </listitem>
	    <listitem>
	      <para>
		      As translators are not always heavily aware of the
		      Debian development environment, the i18n team assists them
		      with Debian specific parts such as reporting
		      translations as bugs when they concern packages which
		      are not maintained by the &d-i; team.
                </para>
	    </listitem>
	    <listitem>
	      <para>
		      Bring new ideas and concepts to make the translators
		      work easier. A translator should not have to focus on
		      complex systems such as the revision control system
		      or bug reporting. The translator's time is better
		      invested doing translation work.
                </para>
	    </listitem>
	    <listitem>
	      <para>
		      Maintain contact with translators and put them to work
		      when releases are due.
                </para>
	    </listitem>
	    <listitem>
	      <para>
		      Maintain contact with derived distributions when coordination
                      is needed for l10n issues (Skolelinux, Ubuntu...).
                </para>
	    </listitem>
	    <listitem>
	      <para>
		      Finally, the i18n team is responsible for all issues
		      related to Debian installer Manual i18n.
                </para>
	    </listitem>
	  </itemizedlist>

	</sect3>

	<sect3>
	  <title>The translators</title>

	  <para>
The translators and the translation teams are obviously the
people who do the real job. The basic principle in &d-i; i18n (and
indeed in Debian as a whole) is leaving translators and translation teams with
great freedom to choose their work method.
</para>

	  <para>
This ends up in various situations, from languages where a
single individual is the only person responsible for the whole translation,
QA work, interaction with i18n coordination team up to languages where
a very structured team exists.
</para>

	  <para>
The only requirement by the i18n coordination team is getting
the name and email address of a "reliable" contact who will be
further called the "language coordinator" for this language. Having a backup
coordinator is preferred, but not required. And, finally, if
the translation is made with the support of a translation team
(internal or external to the Debian project), the name and address of
this team is needed (possibly with some write access to the team's
mailing list).
</para>

	  <para>
Though the i18n coordination team assists translators in their
tasks and sometimes commits files in their name, autonomy is highly
wished with the language coordinator commiting him/herself
translations produced by the team and reporting bug reports for
packages tahat are not part of the &d-i; team maintenance area.
</para>

	</sect3>

	<sect3>
	  <title>The developers</title>

	  <para>
In the i18n process, the role of &d-i; developers is to ensure that all possibly translatable material is properly marked as translatable and use strings from the debconf i18n system for their packages. The "cdebconf" package documentation gives good examples of the use of debconf strings even outside the context of debconf.
</para>

	  <para>
&d-i; developers also have to coordinate their work with the i18n coordination team when their work is likely to introduce new translatable strings. Such strings need peer review for the English messages style consistency checks.
</para>

	  <para>
Developers of packages not maintained by the &d-i; team, but
needed by the installer (mostly source packages that produce
udeb packages) are requested to get in touch with the &d-i; i18n team when their
package includes translatable material.
</para>

	</sect3>
      </sect2>

      <sect2>
	<title>Technical aspects</title>

	<sect3>
	  <title>The levels</title>

	  <sect4>
	    <title>Level 1</title>

	    <para>
The so-called level 1 of translation in Debian includes all udeb
files which are part of the "first stage" of the installation process
and are maintained by the &d-i; team. This consists of the whole
debian-installer/ source tree on the &d-i; development server.
</para>

	    <para>
A few packages which technically
belong in level 1 because some of their translatable material is used
during the first stage of the installation process, have been moved to
level 2 to make it clear that the level 1 is the "core"
of &d-i; translations.
</para>

	    <para>
At the moment of writing of this paper, level 1 consists of
65 packages with l10n messages for a total of 1270 strings.
</para>

	    <para>
To make the translators work easier to maintain, all strings in level 1 files
are gathered together in a single "master" file in packages/po in the &d-i;
development trees (sarge branch and development branch).
</para>

	    <para>
This method of work does not allow split work but makes the
maintenance process far more easier as well as improves Quality
Assurance (because it guarantees that the same string is translated
the same way among packages).
</para>

	    <para>
At the moment of writing this, only one team has not chosen to
switch to the "single file" system. This is still possible because
it is taken into account by the synchronisation script.
</para>

	    <para>
The synchronisation script (l10n-sync) main job is to spread out
translations from the "master" file to the PO files in each
package. The internals of this script are detailed in the &d-i; i18n
documentation. This script also combines the PO templates files (POT files)
from all packages into a single POT file, which may be used by translators
starting a new translation.
</para>

	    <para>
Some languages may be defined as "prospective" languages, which
means that the translations for these languages are not spread out to
individual packages. The reason for this is the impact translations
have on the initial RAM disk size and the memory requirements of
&d-i;. Languages are removed from the "prospective" list only after the
&d-i; i18n coordination team has received the agreement of the &d-i;
development coordinator.
</para>

	    <para>
Nine "prospective" languages are waiting for the "opening of the gates".
These translations were started after the language freeze of &d-i; which occurred during
&d-i; RC2 development with the decision not to add more languages up to
the sarge release. These languages have been unmarked during &d-i; Debcamp during Debconf 5.
</para>

	    <para>
Including the "prospective" languages, the total number of languages supported in &d-i; is
50, including English. The number of languages supported in the sarge
branch is 41.
</para>

	  </sect4>

	  <sect4>
	    <title>Level 2</title>

	    <para>
&d-i; translation "level 2" includes all packages <emphasis>prompting</emphasis>
users during a default (high priority) base system installation.
</para>

	    <para>
This includes two packages maintained by the &d-i; team
itself (base-config and tasksel) as well as regular packages
maintained by Debian developers outside the &d-i; team.
</para>

	    <para>
Packages producing udebs used during the first stage of the
installation process have been added to this "level". These include
iso-codes and console-data.
</para>

	    <para>
Finally, two regular packages are also included in level 2 because
part of their debconf templates are used during the second stage of
the installation process: shadow and exim4.
</para>

	  </sect4>
	  
	  <sect4>
	    <title>Level 3</title>

	    <para>
&d-i; translation "level 3" includes all packages <emphasis>prompting</emphasis>
users during any kind of base system installation.
</para>

	    <para>
It currently includes only "regular" Debian packages, some of which are
quite widely used in some types of installs (aptitude, pppconfig).
Some others that are no longer prompting users but used to in the past, are kept for
historical reasons or in case they come back (popularity-contest,
pcmcia-cs..) and a few which currently only have their menu entry to
base-config that needs translation (xdebconfigurator,
localization-config).
</para>

	  </sect4>

	  <sect4>
	    <title>Level 4</title>

	    <para>
&d-i; translation "level 4" includes all packages that display messages
during a base system installation.
</para>

	    <para>
The purpose of including these packages is to try to reach the
state where users only see display in their language while installing
the system. A side-effect is pushing for the translation of two of the
most important packages in Debian: dpkg and apt.
</para>

	    <para>
Shadow has been added to this list because it very briefly displays a
few messages. The side effect here is also getting some very widely
used programs such as "login", "passwd" and all other such utilities
translated into many languages.
</para>

	  </sect4>


	</sect3>
	<sect3>
	  <title>Typical process to integrate a new translation</title>


	  <para>
Several steps are required for new translators to integrate the &d-i; translation team and start working on translations in their language. The typical sequence ("the New Translator Process") is the following:
</para>
	  <itemizedlist>
	    <listitem>
	      <para>First contact : the translator may come by him/herself, or be directed by a third party to the &d-i; development team. The i18n coordination team also happens to be proactive towards translators already working in other FLOSS projects and try convincing them to work on &d-i; translations.</para>
	    </listitem>
	    <listitem>
	      <para>Locale and language code identification : from
	      information given by the candidate translator, the i18n
	      team determines the language code that needs to be
	      used. If a locale already exists in Debian for that
	      language, the work can go on. Otherwise, the coordinator
	      and the translator work on writing one (which is a very
	      tedious task) and propose it to the locales package
	      maintainers.
</para>
	    </listitem>
	    <listitem>
<para>Local language name : the translator send the coordinators the name of the language as a UTF-8 string. The i18n coordinator updates localechooser accordingly.
</para>
	    </listitem>
	    <listitem>
<para>
   Activate early support : the i18n coordinator adds the languagechooser entry and request the translator about needed information for this : display specifics, input systems...
</para>
	    </listitem>
	    <listitem>
<para>
   The languagechooser and localechooser packages are modified accordingly and possibly uploaded
</para>
	    </listitem>
	    <listitem>
<para>
   The translator begins working on level1, translating a few strings
   and sends the new PO file to the i18n coordinator who checks it and
   commits it (not forgetting to add the given language to the
   prospective languages list).
</para>
	    </listitem>
	    <listitem>
<para>
   The new translator registers for an account on Alioth and the i18n coordinator ass him/her to the &d-i; commiters list. Subscription to the debian-i18n is also highly encouraged (and actually presented as mandatory). Subscription to the debian-boot mailing list is also encouraged but less enforced.
</para>
	    </listitem>
	    <listitem>
<para>
   Finally, the i18n coordinator assists the new translator for SVN commits/checkouts so that (s)he can work autonomously
</para>
	    </listitem>
	  </itemizedlist>
<para>
This whole process has been proven to be a good way to integrate new translators and teams progressively. It also gives the i18n coordination team a good method to really test the translators motivation and avoid losing people in the wild.
</para>
	</sect3>

	<sect3>
	  <title>The framework</title>

	  <para>Stricto sensu, the &d-i; internationalisation framework only consists in the tools used to manage translation of level 1 packages (all packages developed by the &d-i; team) and the tools use to monitor the translation status. This paper will not describe any special method involved in handling translations for level 2-4 packages because there is indeed no special method involve to handle their translation except regular bug reporting and handling of PO files by their maintainers.
</para>

	  <sect4>
	    <title>Handling of level 1 PO files</title>

<para>All PO files coming from all &d-i;packages are combined together
in a big PO file named the "master file". This has the advantage of
avoiding translators to dig in each and every &d-i; package to update
its translation. Moreover, as several packages share common strings
(or similar strings), having these only translated once helps in
keeping the general consistency among translations.
</para>

<para>Translators only work on the master file and all
mergin/spreading of translations back and forth this master file to
all individual packages is handled by special script named
"l10n-sync". This script is maintained by the &d-i; i18n coordination
team and is run from one of the Debian servers available to
developers.
</para>

<para>l10n-sync tasks :</para>
<itemizedlist>
	      <listitem>
		<para>merge together all POT files in a single POT file
</para>
	      </listitem>
	      <listitem>
		<para>update the master files from this POT file
</para>
	      </listitem>
	      <listitem>
		<para>update all packages PO files for each language from the master file of that language
</para>
	      </listitem>
	    </itemizedlist>
<para>All this is achieved with a simple shell script, by using the
various gettext utilities. A minor drawback of this is being dependent
on the version of the gettext utilities used to run l10n-sync. For
instance, woody's gettext utilities have different behaviour and
different options than sarge's gettext utilities. This sometimes
resulted in gratuitous commits byt the script and some headaches for
the &d-i; developers.
</para>
<para>l10n-sync also has the ability to update a branch of the installer development repository from the PO files in another branch. For instance, the current sarge branch is updated from the PO files in the trunk. This is again aimed to simplfy the work of translators who only have to deal with one file.
</para>

	  </sect4>
	  <sect4>
	    <title>Other levels handling</title>
<para>
For levels 2 to 4, the translation files are dealt with
individually. The translators work on each of them, complete them and
then send them as bug reports against the relevant packages.To make this work easier, the translation status pages collect the
files from either the Debian archive (when no public repository is
accessible for the given package) or from the maintainer(s) CVS or SVN
repositories. That allows translators to easily grab the files to
translate without digging into packages and/or repositories.
</para>

<para>
To make this work easier, the translation status pages collect the
files from either the Debian archive (when no public repository is
accessible for the given package) or from the maintainer(s) CVS or SVN
repositories. That allows translators to easily grab the files to
translate without digging into packages and/or repositories.
</para>

<para>
The &d-i; i18n coordinators have usually got a commit access on the
relevant repositories and follow these packages development through
the Package Tracking System, which allows them to act as gateways
between translators and maintainers and save some precious time for
maintainers.
</para>

	  </sect4>
	  <sect4>
	    <title>The translation status pages</title>

	  <para>
The &d-i; i18n coordination team maintains status pages for all levels translations. The main status page is, at the time of this writing, located at http://people.debian.org/%7Eseppy/d-i/translation-status.html. It gives news about the translations (usually modified strings), statistics about each level translation and access to all releavant files (PO files and POT files) for all levels. The status page also features graphics of the translation ratio progress and gives access to other useful resources.
</para>

	  <para>
The staus page is built by scripts run from the i18n coordinators
account on people.debian.org. These scripts spider through all
relevant repositories or in the Debian archive (when no repository is
available for the package). They currently cannot easily work with
distributed revision control systems. Two packages in the various
&d-i; l10n levels use such systems (apt and dpkg). For these packages,
one of the i18n coordinators maintains a special tla branch for l10n.
</para>

	  </sect4>
	</sect3>
	
	<sect3>
	  <title>Quality Assurance work</title>

	  <sect4>
	    <title>Error checking, proofreading</title>

<para>Peer review is one of the corner stones of translation
work. Because translation is a very tedious work, translators are very
prone to errors, spelling mistakes and typos. For that reason, all
teams that can afford the required manpower should invest a strong
effort in peer review. The only drawback is that it needs at least two
translators, which is currently not yet achieved for all languages.
</para>

<para>
Except for automated spellchecking, no special infrastructure exists
for peer review of translations. Several teams have setup their own
policyand sometimes even did document it. The Dutch team peer review
system is for instance very well documented : TODO_ADDRESS.
</para>

	    </sect4>
	  <sect4>
	    <title>Spellchecking</title>

	  <para>
During the very late steps of sarge development, Davide Viti has setup a framework for automated spellchecking of &d-i; translations. This framework makes use of the aspell utility as well as aspell dictionaries for many language among the languages supported in &d-i;.
</para>

	  <para>
A common word list is built for each &d-i; i18n level : this word list contains all words not recognized by aspell (most of the time, jargon words, words kept in English, acronyms, etc.). Each language team can also build its own word list with all words from this language which are not recognized by aspell even if they are correct (here again , most often jargon words, acronyms, country names, etc.).
</para>

	  <para>
The spellchecking system also checks for incorrect variable
substitution in translations. Translators should not translate
variable names in debconf translations, but mistakes or typos often
happen in that matter, which results in "strange" displays to
users. Variable substitution checking has been one of the most
immediate benefits from the spellcheking framework for &d-i;.
</para>

</sect4>
	</sect3>
      </sect2>

      <sect2>
	<title>The future</title>
	<sect3>
	  <title>Web-based translation tools</title>
	</sect3>

<para>Web-based translation tools currently receive an increased
popularity in FLOSS development. They allow barely everyone to
participate in the translation effort because the access to it is made
very easy, even to people not running Free Software environments.
</para>

<para>
Web-based translation tools cannot completely replace specialized
software such as KBabel, Poedit, Gtranslator or Emacs PO mode,
especially on heavy translation work. However, they may be very
convenient for translation maintenance as well as giving more
opportunities to get new (wo)manpower to localization team.
</para>

<para>Two main systems have emerged recently:
</para>
<itemizedlist>
<listitem>
Rosetta, developed for the Ubuntu project, is used quite widely in
Ubuntu for localisation work. Being mostly developed by contributors in (or near) the Debian community, it may very likely be adapted for Debian specific needs. Its main rawback is being based on a technlogy which does not meet the Debian Free Software Guidelines (at least at the time of this writing).
</listitem>
<listitem>
Pootle, developed by contributors of the translate.org project, has
got a very wide recognition by several major localisation projects in
FLOSS. The devleoeprs have setup a server at
http://pootle.wordforge.net but they also made the Pootle Toolkit
available to teams who want to setup their own Pootle server. Setting up a Pootle server for Debian could be a way to go, which could help in &d-i; localisation as well as all other localisation work in the project.
</listitem>
</itemizedlist>

	<sect3>
	  <title>Language packs</title>

	  <para>
Currently, integrating a new language in &d-i; needs to remove it from the "prospective" list so that the PO files for it are built into all packages from &d-i; level 1. Then, each one of these packages has to be rebuilt and uploaded for the language translations to be available in &d-i;.
</para>

	  <para>The drawback here is to bloat &d-i; for each additionnal language. Then the size of the initial RAM disk image as well as the memory requirements of &d-i; may become out of control. This is the major reason for which 9 languages have been kept out of sarge &d-i; since September 2004 while the &d-i; team was doing its best to keep &d-i; in a releasable state so that it is no more a blocker for the whole release of sarge.
</para>

	</sect3>
	<sect3>
	  <title>Installation manual translations</title>

	  <para>
The installation manual translation framework now uses a XML-PO
gateway so that translators can work on Portable Object files which
makes the update work easier than using the XML-based system. This
system is still used by a few translation teams (namely the most
ancient ones, who preferred avoid switching before the release).
</para>

	  <para>
Using gettext for manual translations will however probably be
enforced soon as this helps using the same framework which is used in
the programs translations work, with similar tools such a
spellchecking tools.
</para>


	</sect3>

      </sect2>
      
    </sect1>
  </article>
