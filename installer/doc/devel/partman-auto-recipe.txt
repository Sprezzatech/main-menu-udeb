partman-auto recipe files

Contents:
  0. Introduction
  1. Format of the recipes
  2. Examples
  3. Architecture specific recipes
  4. Limitations
  5. Appendix

0. INTRODUCTION
---------------

partman-auto is the part of the partitioner that automatically partitions
disks. It is controlled by recipes, which are provided in partman-auto as
files, but may also be provided by other udebs, or by preseeding. This
document explains the format of the recipes and how to use them.


1. FORMAT OF THE RECIPES
------------------------

All new lines and tabs in the recipe are converted to spaces.
Then two or more consecutive spaces are converted to one space.
Almost all tokens must be separated by spaces.  An important exception
is the opening curly bracket ("{"); before it there must be _no_
space.

In the following rules we denote spaces by "_".

<recipe>::=<header>_<partitions>

<header>::=<simple name>|<debconf name>

<simple name>::=<name>_:

<name> can be for example "Multi user system".

<debconf name>::=<debconf template>_::

The purpose of <debconf name> is to allow translation of the names of
the recipes into different languages.

<partitions>::=<partition>|<partition>_<partitions>

<partition>::=<limits>_<specifiers>_.

<limits>::=<minimal size>_<priority>_<maximal size>_<parted fs>

<minimal size> is the minimal allowed size of the partition in
megabytes.  It is rounded to cylinder size, so if you make <minimal
size> to be 20 MB and the cylinder size is 12MB, then it is possible
for the partition to be only 12MB.  These sizes may also be given as
a percentage, which makes the size be that percentage of the system's
total RAM.

<maximal size> is the maximal size for the partition, i.e. a limit
size such that there is no sense to make this partition larger.

<priority> is some size usually between <minimal size> and <maximal
size>.  It determines the priority of this partition in the contest
with the other partitions for size.  Notice that if <priority> is too
small (relative to the priority of the other partitions) then this
partition will have size close to <minimal size>.  That's why it is
recommended to give small partitions a <priority> larger than their
<maximal size>.

<parted fs> is the file system as known to parted of this partition.


<specifiers>::=<specifier>|<specifier>_<specifiers>

<specifier>::=<internal specifier>|<regular specifier>

<internal specifier>::=$primary{_}|$bootable{_}

$primary{_} says that the partition should be primary (if possible).
$bootable{_} says that the bootable flag will be set.

<regular specifier>::=<file name>{ <file contents> }

<file name> is a file to be created in the directory of the partition
in partman's filesystem info. (See section 2.4 of the partman manual
for details.)
<file contents> is the information to write in this file.


2. EXAMPLES
-----------

Here is a very simple recipe that creates a swap partition and uses the
rest of the disk for one large root filesystem.

partman-auto/text/atomic_scheme ::

500 10000 1000000 ext3
	$primary{ }
	$bootable{ }
	method{ format }
	format{ }
	use_filesystem{ }
	filesystem{ ext3 }
	mountpoint{ / } .

64 512 300% linux-swap
	method{ swap }
	format{ } .

Here the root partition must be at least 500 mb, and has effectively no
maximum size. The swap partition ranges from 64 mb to 3 times the system's
ram.

Note the use of $bootable{ } to make the partition bootable, and $primary{ }
to mark it as the primary partition.

The specifiers used in this example are:

method{ format }
	Used to make the partition be formatted. To keep the content of
	an existing partition, change "format" to "keep". For swap
	partitions, change it to "swap".
format{ }
	Also needed to make the partition be formatted.
use_filesystem{ }
	Specifies that the partition has a filesystem on it.
filesystem{ ext3 }
	Specifies the filesystem to put on the partition.
mountpoint { / }
	Where to mount the partition.

Here is another example; this time there is a smaller root partition, and a
separate /home partition.

partman-auto/text/home_scheme ::

300 4000 7000 ext3
        $primary{ }
        $bootable{ }
        method{ format }
        format{ }
        use_filesystem{ }
        filesystem{ ext3 }
        mountpoint{ / } .

64 512 300% linux-swap
        method{ swap }
        format{ } .

100 10000 1000000000 ext3
        method{ format }
        format{ }
        use_filesystem{ }
        filesystem{ ext3 }
        mountpoint{ /home } .

Notice that the partitions will be created in the order they are defined
in the recipe.


3. ARCHITECTURE DEPENTENT RECIPES
---------------------------------

Some architectures have specific requirements for their partitions.
For example many of them require special partitions to support
bootloading.

For example, newworld powerpc machines need a newworld boot partition at
the start of the disk. Here is an example fragment of a recipe file to
create one; it should come before other partitions in a recipe. Notice that
the partition is not formatted.

1 1 1 hfs
	$bootable{ }
	method{ newworld } .

Another example is a netwinder, which requires a small /boot partition
formated in revision 0 ext2.

50 500 100 ext2
	$primary{ }
	$bootable{ }
	method{ format }
	format{ }
	use_filesystem{ }
	filesystem{ ext2r0 }
	mountpoint{ /boot } .

And finally, an example of how to set up the efi boot partition needed on
ia64.

100 100 150 fat16
        $primary{ }
        method{ efi }
        format{ } .

For other examples, see the architecture-specific recipes in partman-auto.


4. LIMITATIONS
--------------

Due to limitation of the algorithms in partman-auto, there must be at
least one partition with high maximal size so that the whole free
space can be used.  Usually you can give the partition containing /home
a maximal size 1000000000 which is high enough for the present storage
devices.  Do not use higher than 1000000000 numbers because the shell
arithmetic is limited to 31 bits (on i386).


5. APPENDIX
-----------

On May 25th 2004, it was noted that on i386 systems, the very minimum size of
a Debian installation on a classical (/, /usr, /usr, /home) setup was:
48MB on / (6MB on /boot)
77MB on /usr
17MB on /var
It is thus wise to use minimum values with this consideration in mind.

#261244: 70MB are required for /var
#265290: 1.8GB are not enough for / with desktop
