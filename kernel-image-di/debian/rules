#!/usr/bin/make -f

# Kernel version.
KVERS=2.4.2
# Kernel flavor.
FLAVOUR=di

ARCH=$(shell dpkg --print-architecture)

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This is the debhelper compatability version to use.
export DH_COMPAT=2

PRIORITY=$(shell grep ^Priority: debian/control | cut -d ' ' -f 2)
VERSION=$(shell dpkg-parsechangelog | grep ^Version: | cut -d ' ' -f 2)
ARCH=$(shell dpkg --print-architecture)

# This is a convenicnce function, not used as part of the build process.
# Use it to edit the config file using make xconfig.
configure: unpack
	cd kernel-source-$(KVERS); make xconfig
	cp kernel-source-$(KVERS)/.config config.$(ARCH)

# Unpack the source (which we build-depend on), and set it up
# for a kernel-package build.
unpack: unpack-stamp
unpack-stamp:
	tar xf /usr/src/kernel-source-$(KVERS).tar.bz2 --bzip2
	mkdir -p kernel-source-$(KVERS)/debian
	./make-kernel-control $(KVERS) $(FLAVOUR) \
		kernel-source-$(KVERS)/debian/control
	cp debian/changelog kernel-source-$(KVERS)/debian
	echo official > kernel-source-$(KVERS)/debian/official
	cp config.$(ARCH) kernel-source-$(KVERS)/.config
	# Hack up the Makefile for flavour support. Not necessary with
	# recent debian kernel source packages, which are pre-hacked..
	#
	#cd kernel-source-$(KVERS); \
	#	if [ ! -e Makefile.pristine ]; then \
	#		cp Makefile Makefile.pristine; \
	#	fi; \
	#	sed 's/^\(KERNELRELEASE=.*\)$$/\1-$$(FLAVOUR)/' Makefile.pristine > Makefile; \
	touch unpack-stamp

# Use kernel-package to do the actual building.
build: build-stamp
build-stamp: fixcontrol unpack
	cd kernel-source-$(KVERS); make-kpkg --flavour di build
	touch build-stamp

# Ensure that the control file has up-to-date substitutions for kernel
# version. This must be done at package clean time so dpkg-gencontrol
# generates a valid .dsc.
fixcontrol:
	sed 's/$${kernel:Version}/$(KVERS)-$(FLAVOUR)/g' \
		< debian/control.template > debian/control

clean:
	rm -f build-stamp unpack-stamp
	-rm -rf kernel-source-$(KVERS)
	-dh_clean
	debian/rules fixcontrol
	dh_clean

# Use kernel-package to build the kernel image.
binary-image: build
	cd kernel-source-$(KVERS); \
		CLEAN_SOURCE=no make-kpkg --flavour di kernel-image
	cat kernel-source-$(KVERS)/debian/files >> debian/files
	mv *.deb ..

# Build module udebs. Skip processing the kernel image deb.
export DH_OPTIONS=
binary-udebs: DH_OPTIONS=-Nkernel-image-$(KVERS)-$(FLAVOUR)
binary-udebs: build
	dh_testversion 2.1.18
	dh_testdir
	dh_testroot
	
	cd kernel-source-$(KVERS); \
		FLAVOUR=di make INSTALL_MOD_PATH=`pwd`/modules modules_install
	# Actually installs all the modules into place.
	./copy-modules kernel-source-$(KVERS)/modules $(KVERS) $(FLAVOUR)
	
	install -d debian/kernel-image-$(KVERS)-$(FLAVOUR)-udeb/boot
	# Copy in the kernel image. Since make-kpkg has complex logic about
	# what file is the kernel image that I do not care to duplicate,
	# I use a nasty little hack to make its rules file echo the
	# variable. I have talked to Manoj, and a better method may be
	# forthcoming.
	cd kernel-source-$(KVERS); \
		../get-kernel-image DEST=$(shell pwd)/debian/kernel-image-$(KVERS)-$(FLAVOUR)-udeb/boot/vmlinuz
		
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_shlibdeps
	# Don't write your stupid guesses to debian/files.
	dh_gencontrol -- -fdebian/files~
	# Register udebs manually and build udebs.
	for package in `dh_listpackages`; do \
		dpkg-distaddfile $${package}_$(VERSION)_$(ARCH).udeb \
			debian-installer $(PRIORITY); \
		dh_builddeb --package=$${package} \
			--filename=$${package}_$(VERSION)_$(ARCH).udeb; \
	done

binary-arch: binary-image binary-udebs
binary-indep:

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install unpack fixcontrol
