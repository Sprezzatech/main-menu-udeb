Done this week:
- choose-mirror is usable
- wget retriever works, needs some things like proxy support
- cdebconf udebs build now, and it is usable
- demo2a.tar.gz, demo system that can download udebs from the web
  and uses cdebconf (20001208215147.A1035@tausq.org)
- netcfg has been started, to perform manual network configuration
- package pools are here, and udebs can be uploaded

Still Todo (for individual TODO lists, see inside the trees of the
individual modules):

	- design [Joey Hess, debian-boot]
                80% done. Enough to know what the big peices are 
                and how they fit together.
        - cdebconf (miniature debconf in C) [Randolph Chung, Anthony Towns]
                In progress, has one working database backend and one
		working text-based frontend, with progress on a ncurses
		frontend.
        - udpkg (tiny dpkg clone) [Randolph Chung, Joey Hess]
		Usable. One todo item (localized descriptions)
        - main-menu (main menu generator) [Joey Hess]
                90% done (one non-trivial todo item)
        - busybox integration [Erik Andersen]
		First pass busybox udeb is ready.
		http://people.debian.org/~andersee/
        - network card detector [Glenn McGrath, David Whedon]
		Pcidetect is written, detects PCI cards only. Needs
		testing. David has another detector that uses libdetect
		instead.
	- other hardware detection [David Whedon]
		David has written detectors for sound, ethernet, cd, cpu,
		disk, and memory detection. All need testing.
        - netcfg [David Whedon]
		Development in progress, and partly works now.
        - anna (retreiver control program) [Joey Hess, Glenn McGrath]
		About 10% done realistically, but it does work.
        - choose-mirror [Joey Hess]
		75% done
 	- http retreiver [Joey Hess]
		Nearly 50% done, but entirely untested.
 	- http retriever [Joey Hess, Erik Anderson]
		Started, uses busybox wget.
        - target media detector [UNCLAIMED]
                Not started. Just has to figure out what media to install to.
                Probably trivial; most support already in the kernel.
        - disk partitioner [UNCLAIMED]
                Not started. Some kind of a UI to let the user partition their
                disks and decide what the partitions are used for.
        - disk formatter [UNCLAIMED]
                Not started. Formats disks, turns on swap, etc.
        - base system installer [UNCLAIMED]
                Not started. Installs the base system, probably from base.tgz
                for now, and does any necessary setup.
        - {lilo,grub} installer [UNCLAIMED]
                Not started. Sets up {lilo,grub}.
        - kernel module udebs [Vaidhy]
                Not started. We will need various sets of kernel modules;
                one such set is NIC drivers. Each set goes in a udeb; there
                probably has to be a system to build the whole kernel and
                udebs.
        - library reduction [Marcus Brinkmann]
                Not started. There is code in the boot-floppies that should
                be usable, but this is still one of the hardest parts.
        - install media build system [UNCLAIMED]
                Not started. Puts all the peices together and makes
                install media.
        - user documentation
		Not started. (Waiting until we have something to document..)
	- after-reboot configuration [Joey?]
		Many packages that are currently set up by the
		boot-floppies need to start handling their own setup, after
		reboot, via debconf. These include timezone config, many of
		the things in base-config now, what else?

Other stuff:
     - The main menu design has some issues. If a step is failing
       because some step above it did something wrong, but thought
       it succeeded (a disk was partitioned, but very badly, and
       installing the base system to it fails), there is no way to
       force the user to back up. This seems to preclude linear
       install mode. I posted a longer example to -boot. Three
       possible fixes:
                        - Detect loops, and have code to figure out what went
                          wrong and back up to the appropriate step that can
                          fix it
                        - Detect loops, and back up to the beginning of
                          the menu
                        - Detect whenever any menu item fails, and leave
                          linear mode. (BEST)
    - Need to define module subsystems for network/hardware
      support, network configuration, target media support, etc.

