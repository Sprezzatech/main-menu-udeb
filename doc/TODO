Done this week:
- busybox udebs (Erik says soon anyway  ** check **)
- retriever controller (aka "anna", for anna's not nearly apt) is 
  started, and works in a limited way, good enough for demo purposes.
- file retriever, which is the simplest possible retriever (it just
  symlinks a file, rather like apt's file method).
- cdebconf now has a working frontend, and is usable.
- basic demo system, in which you can use the main menu to tell anna to
  retrieve and unpack some more udebs, then see them appear on the main
  menu. http://lists.debian.org/debian-boot-0011/msg00629.html

Still Todo:
	- design [Joey Hess, debian-boot]
                80% done. Enough to know what the big peices are 
                and how they fit together.
        - udeb archive setup [James Troup, Anthony Towns, Jason Gunthorpe]
                95% support in new package pools code. James is now waiting
		for after 2.1r2, it seems.
        - cdebconf (miniature debconf in C) [Randolph Chung, Anthony Towns]
                In progress, has one working database backend and one 
		working text-based frontend.
        - udpkg (tiny dpkg clone) [Randolph Chung, Joey Hess]
		Usable. One todo item (localized descriptions)
        - main-menu (main menu generator) [Joey Hess]
                90% done (one non-trivial todo item)
        - busybox integration [Erik Andersen]
		First pass busybox udeb is ready.
        - network card detector [Glenn McGrath, David Whedon]
		Pcidetect is written, detects PCI cards only. Needs
		testing. David has another detector that uses libdetect
		instead.
	- other hardware detection [David Whedon]
		David has written detectors for sound, ethernet, cd, cpu,
		disk, and memory detection. All need testing.
        - network setup [UNCLAIMED]
                Not started. Set up the network, via dhcp or via prompting;
                implementor decides.
        - retreiver control program [Joey Hess, Glenn McGrath]
		About 10% done realistically, but it does work.
	- file retreiver [Joey Hess]
		100% done, such as it is. Probably not useful in real life
		expcet in CD installs, but handy for the demo system.
        - http retreiver [UNCLAMED]
                Not started. Download udebs, other files from network.
        - target media detector [UNCLAIMED]
                Not started. Just has to figure out what media to install to.
                Probably trivial; most support already in the kernel.
        - disk partitioner [UNCLAIMED]
                Not started. Some kind of a UI to let the user partition their
                disks and decide what the partitions are used for.
        - disk formatter [UNCLAIMED]
                Not started. Formats disks, turns on swap, etc.
        - base system installer [UNCLAIMED]
                Not started. Installs the base system, probably from base.tgz
                for now, and does any necessary setup.
        - {lilo,grub} installer [UNCLAIMED]
                Not started. Sets up {lilo,grub}.
        - kernel module udebs [Vaidhy]
                Not started. We will need various sets of kernel modules;
                one such set is NIC drivers. Each set goes in a udeb; there
                probably has to be a system to build the whole kernel and
                udebs.
        - library reduction [Marcus Brinkmann]
                Not started. There is code in the boot-floppies that should
                be usable, but this is still one of the hardest parts.
        - install media build system [UNCLAIMED]
                Not started. Puts all the peices together and makes
                install media.
        - user documentation
		Not started. (Waiting until we have something to document..)

Other stuff:
     - The main menu design has some issues. If a step is failing
       because some step above it did something wrong, but thought
       it succeeded (a disk was partitioned, but very badly, and
       installing the base system to it fails), there is no way to
       force the user to back up. This seems to preclude linear
       install mode. I posted a longer example to -boot. Three
       possible fixes:
                        - Detect loops, and have code to figure out what went
                          wrong and back up to the appropriate step that can
                          fix it
                        - Detect loops, and back up to the beginning of
                          the menu
                        - Detect whenever any menu item fails, and leave
                          linear mode. (BEST)
    - Need to define module subsystems for network/hardware
      support, network configuration, target media support, etc.

