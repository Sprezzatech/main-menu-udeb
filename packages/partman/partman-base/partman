#!/bin/sh

. /lib/partman/definitions.sh

abort () {
	if [ -f /var/run/parted_server.pid ]; then
		stop_parted_server
	fi
	exit $1
}

db_capb backup

###########################################################
# Compute some constants in order to make things faster.
###########################################################

# The width of partman/text/number.
# number_width is used only in visual.d/number
db_metaget partman/text/number description
RET=$(printf "$RET" '')
RET=$(stralign 50 "$RET" | sed 's/[^ ]//g')
number_width=$((2 + 50 - ${#RET}))
export number_width

# Detect if Debconf can escape strings
# non-empty means we can escape
can_escape=''
if type debconf-escape >/dev/null 2>&1; then
	db_capb backup
	for cap in $RET; do
		case $cap in
			escape)	can_escape=yes ;;
		esac
	done
fi
export can_escape

# The decimal separator (dot or comma)
#db_metaget partman/text/deci description
#deci="$RET"
# The comma has special meaning for debconf.  Lets force dot until we
# start using escaped strings.
deci='.'
export deci

###########################################################


# Commented due to #240145
#if [ -e /var/lib/partman ]; then
#	rm -rf /var/lib/partman
#fi

mkdir -p /var/lib/partman

while true; do
	initcount=$(ls /lib/partman/init.d/* | wc -l)
	db_progress START 0 $initcount partman/progress/init/title

	for s in /lib/partman/init.d/*; do
		if [ -x $s ]; then
			#logger -t partman "Running init.d/$s"

			base=$(basename $s | sed 's/[0-9]*//')
			# Not every init script has, or needs, its own progress
			# template. Add them to slow init scripts only.
			if ! db_progress INFO partman/progress/init/$base; then
				db_progress INFO partman/progress/init/fallback
			fi
			if ! $s; then
				db_progress STOP
				abort 10
			fi
		fi
		db_progress STEP 1
	done
	db_progress STOP

	while true; do
		for s in /lib/partman/display.d/*; do
			if [ -x $s ]; then
				#logger -t partman "Running display.d/$s"
				$s || {
					exitcode=$?
					if [ $exitcode -eq 255 ]; then
						abort 10 # back up to main menu
					elif [ $exitcode -ge 100 ]; then
						break # successful partitioning
					else
						continue 2
					fi
				}
			fi
		done
		
		for s in /lib/partman/check.d/*; do
			if [ -x $s ]; then
				#logger -t partman "Running check.d/$s"
				if ! $s; then
					continue 2
				fi
			fi
		done
		if confirm_changes "partman"; then
			break
		fi
	done
	
	for s in /lib/partman/commit.d/*; do
		if [ -x $s ]; then
			#logger -t partman "Running commit.d/$s"
			$s || continue 2
		fi
	done

	for s in /lib/partman/finish.d/*; do
		if [ -x $s ]; then
			#logger -t partman "Running finish.d/$s"
			$s || {
				exitcode=$?
				if [ "$exitcode" = 1 ]; then
					continue 2
				else
					abort $exitcode
				fi
			}
		fi
	done

	break
done

exit 0
