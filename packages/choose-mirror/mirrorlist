#!/usr/bin/perl -w
# Generates a mirrors_<type>.h file, reading from Mirrors.masterlist.
# Note that there will be duplicate strings in the generated file.
# I am relying on the c compiler to fix this, which gcc does.
#
# Pass in the type of mirror we are interested in (http or ftp), 
# or use httplist or ftplist to generate a list of country codes for the
# mirror type.
use strict;

my $type = shift || die "please specify mirror type\n";

# Slurp in the mirror file.
my %data;
my %countries;
my %http_countries;
my %ftp_countries;
my $site;
open (IN, "Mirrors.masterlist") or die "Mirrors.masterlist: $!";
while (<IN>) {
	chomp;
	if (m/([^:]*):\s+(.*)/) {
		my $key = lc $1;
		my $value = $2;
		if (lc $key eq 'site') {
			$site = $value;
		}
		elsif (lc $key eq 'country') {
			$value =~ s/ .*//;
			$value = uc $value;
			$data{$site}->{$key} = $value;
		}
		else {
			$data{$site}->{$key} = $value;
		}
	}
}
close IN;

# Poor man's mirror rating system: push-primary, push* (-secondary), others
foreach my $site (keys %data) {
	my $rating=0;
	if (exists $data{$site}->{type}) {
	        $rating=1 if $data{$site}->{type} =~ /push/i;
                $rating=2 if $data{$site}->{type} =~ /push-primary/i;
        }
       $data{$site}->{rating}=$rating;
}

if ($type =~ /(.*)list/) {
	my $type=$1;
 	open (LIST, ">debian/${type}list-countries") or die "debian/${type}list-countries: $!";
	foreach my $site (sort keys %data) {
		next unless exists $data{$site}->{"archive-$type"} and
		                    exists $data{$site}->{country};
		$countries{$data{$site}->{country}} = 1;
	}
	foreach  my $country (sort (keys %countries)) {
		print LIST "${country}\n";
	}
	close LIST;
}
else {
	open (OUT, ">mirrors_$type.h") or die "mirrors_$type.h: $!";
	print OUT "/* Automatically generated; do not edit. */\n";

	# Now output the mirror list. It is ordered with better mirrors
	# near the top.
	print OUT "static struct mirror_t mirrors_$type\[] = {\n";
	my $q='"';
	foreach my $site (sort { $data{$b}->{rating} <=> $data{$a}->{rating} } keys %data) {
		next unless exists $data{$site}->{"archive-$type"} and
			    exists $data{$site}->{country};
		print OUT "\t{",
			  join(", ", $q.$site.$q, $q.$data{$site}->{country}.$q,
				$q.$data{$site}->{"archive-$type"}.$q),
			  "},\n";
	}
	print OUT "\t{NULL, NULL, NULL}\n";
	print OUT "};\n";

	close OUT;
}
