#!/bin/sh
set -e

# Program to search for disks with a correct yaboot setup, and then
# prompt the user for which one to install yaboot on.
#
# Copyright (C) 2004 Colin Watson <cjwatson@debian.org>
# Copyright (C) 2003 Gaudenz Steinlin <gaudenz@soziologie.ch>
# Copyright (C) 2003 Thorsten Sauter <tsauter@gmx.net>
# Copyright (C) 2002 Colin Walters <walters@gnu.org>

. /usr/share/debconf/confmodule

log() {
    logger -t yaboot-installer "$@"
}

error() {
    log "error: $@"
}

info() {
    log "info: $@"
}

db_progress START 0 6 yaboot-installer/progress

die() {
    template="$1"
    shift

    error "$@"
    db_input critical "$template" || [ $? -eq 30 ]
    db_go
    db_progress STOP
    exit 1
}

# Install yaboot in /target

db_progress INFO yaboot-installer/apt-install

if ! apt-install yaboot hfsutils powerpc-utils; then
    info "Calling 'apt-install yaboot hfsutils powerpc-utils' failed"
    # Hm, unable to install yaboot into /target/, what should we do?
    db_input critical yaboot-installer/apt-install-failed || [ $? -eq 30 ]
    if ! db_go; then
	db_progress STOP
	exit 10 # back up to menu
    fi
    db_get yaboot-installer/apt-install-failed
    if [ "$RET" != true ]; then
	db_progress STOP
	exit 10
    fi
fi

# Find the boot partition

db_progress STEP 1
db_progress INFO yaboot-installer/part

db_get debian-installer/kernel/subarchitecture
SUBARCH="$RET"
info "subarchitecture $SUBARCH"

case $SUBARCH in
    powermac_newworld)
	ALLOWED_PTYPES='hfs'
	;;
    chrp)
	ALLOWED_PTYPES='.*' # no parted support yet
	;;
    *)
	error 'unknown subarchitecture; allowing any bootable partition'
	ALLOWED_PTYPES='[^ ]\+'
	;;
esac
info "allowing partition types matching '$ALLOWED_PTYPES'"

for i in /dev/discs/*/disc; do
    info "parted dump of partition table on $i:"
    parted -s "$i" print | logger -t yaboot-installer
    dev="`parted -s "$i" print | sed -n 's,^Disk geometry for \([^:]*\)/disc:.*$,\1,p'`"
    # Look for partitions with an appropriate partition type and with the
    # boot flag set.
    for part in `parted -s "$i" print | sed -n 's,^\([0-9]\+\) \+[0-9.]\+ \+[0-9.]\+ \+'"$ALLOWED_PTYPES"' \+.\+ \+boot$,'"$dev"'/part\1,p'`; do
	if [ -z "$PARTITIONS" ]; then
	    DEFAULT="$part"
	    PARTITIONS="$part"
	else
	    PARTITIONS="$PARTITIONS,$part"
	fi
    done
done

if [ -z "$PARTITIONS" ]; then
    # error: no viable boot partitions found; fall over
    die yaboot-installer/nopart 'No bootstrap partitions found'
fi

db_subst yaboot-installer/bootdev DEVICES $PARTITIONS
db_set yaboot-installer/bootdev "$DEFAULT"
db_input low yaboot-installer/bootdev || [ $? -eq 30 ]
db_go

db_get yaboot-installer/bootdev
if [ "$RET" = false ]; then
    die yaboot-installer/nopart 'No bootstrap partition selected (?)'
fi
bootdev="$RET"

# Find the root partition

db_progress STEP 1
db_progress INFO yaboot-installer/root

rootdev="`sed -n -e '/^[^[:space:]]\+[[:space:]]\+\/target[[:space:]]/ { s/[[:space:]].*//; p }' /proc/mounts`"
[ "$rootdev" ] || die yaboot-installer/noroot 'No root partition found'

# mkofboot needs proc in /target
mkdir -p /target/proc || \
    die yaboot-installer/mounterr 'Error creating /target/proc'
mount -t proc none /target/proc || \
    die yaboot-installer/mounterr 'Error mounting /target/proc'
trap 'umount /target/proc' HUP INT QUIT KILL PIPE TERM EXIT

# Probe for other OSes.

db_progress STEP 1
db_progress INFO yaboot-installer/os-probing

newline="
"

probed="$(os-prober)"

if [ "$probed" ]; then
    OLDIFS="$IFS"
    IFS="$newline"
    for os in $probed; do
	IFS="$OLDIFS"
	info "probed: $os"
	partition="$(echo "$os" | cut -d: -f1)"
	mappedpartition="$(mapdevfs "$partition")"
	label="$(echo "$os" | cut -d: -f3)"
	loadertype="$(echo "$os" | cut -d: -f4)"
	# You only get the first of each non-Linux OS here, as that's all
	# yaboot supports without painful hacking. Sorry.
	case $loadertype in
	    macosx)	[ "$macosx" ] || macosx="$mappedpartition" ;;
	    macos)	[ "$macos" ]  || macos="$mappedpartition"  ;;
	    *)		info "unhandled: $os" ;;
	esac
	IFS="$newline"
    done
    IFS="$OLDIFS"
fi

# Generate yaboot.conf

db_progress STEP 1
db_progress INFO yaboot-installer/conf

boot="`mapdevfs "$bootdev"`"
root="`mapdevfs "$rootdev"`"

partnr="`printf %s "$root" | sed 's/[^0-9]*\([0-9]\)/\1/'`"
disk="`printf %s "$root" | sed 's/[0-9].*//'`"

ofpath="`chroot /target ofpath "$disk"`"

# we generate our own yaboot.conf kernel (yabootconfig is horribly broken)
# cjwatson: a little more justification of that would have been nice ...

>/target/etc/yaboot.conf \
    || die yaboot-installer/conferr 'Error writing to yaboot.conf'

writeyabootconf () {
    cat >>/target/etc/yaboot.conf \
	|| die yaboot-installer/conferr 'Error writing to yaboot.conf'
}

writeyabootconf <<EOF
## yaboot.conf generated by debian-installer
##
## run: "man yaboot.conf" for details. Do not make changes until you have!!
## see also: /usr/share/doc/yaboot/examples for example configurations.
##
## For a dual-boot menu, add one or more of:
## bsd=/dev/hdaX, macos=/dev/hdaY, macosx=/dev/hdaZ

boot=$boot
device=$ofpath
partition=$partnr
root=$root
timeout=30
install=/usr/lib/yaboot/yaboot
magicboot=/usr/lib/yaboot/ofboot
enablecdboot
EOF

if [ "$macos" ]; then
    echo "macos=$macos" | writeyabootconf
fi
if [ "$macosx" ]; then
    echo "macosx=$macosx" | writeyabootconf
fi

writeyabootconf <<EOF

image=/vmlinux
	label=linux
	read-only
EOF
if [ "$video" ]; then
    writeyabootconf <<EOF
	append="video=$video"
EOF
fi
writeyabootconf <<EOF

image=/vmlinux.old
	label=old
	read-only
EOF
if [ "$video" ]; then
    writeyabootconf <<EOF
	append="video=$video"
EOF
fi

# Install into bootstrap partition

db_progress STEP 1
db_progress INFO yaboot-installer/ybin

chroot /target mkofboot -v -f || \
    die yaboot-installer/ybinerr 'mkofboot failed'

# Done!

db_progress STEP 1
db_progress STOP

db_input medium yaboot-installer/success || [ $? -eq 30 ]
db_go
