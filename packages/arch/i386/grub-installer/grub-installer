#! /bin/sh

set -e
. /usr/share/debconf/confmodule
#set -x

if [ "$1" ]; then
	ROOT="$1"
	chroot=chroot
else
	ROOT=
	chroot=
fi

. /usr/share/grub-installer/functions.sh
. /usr/share/grub-installer/otheros.sh

newline="
"

db_capb backup

log() {
	logger -t grub-installer "$@"
}

error() {
	log "error: $@"
}

info() {
	log "info: $@"
}

ARCH="$(archdetect)"
info "architecture: $ARCH"

get_serial_console() {
	# Get the last 'console=' entry (if none, the whole string is returned)
	local defconsole="$(sed -e 's/.*\(console=[^ ]*\).*/\1/' /proc/cmdline)"
	if echo "$defconsole" | grep -q console=ttyS; then
		echo "$defconsole"
	fi
}

grub_serial_console() {
	#$1=output of get_serial_console
	local serconsole=${1##console=}
	local device=${serconsole%%,*}
	local unit=${device##ttyS}
	local options=""
	if echo $serconsole | grep -q ","; then
		options=${serconsole##*,}
	fi
	local speed=$(echo "$options" | sed -e 's/^\([0-9]*\).*$/\1/')
	# Take optional 1st (parity) and 2nd (word) characters after speed
	options=${options##${speed}}
	local parity=$(echo $options | sed 's/^\(.\?\).*$/\1/')
	local word=$(echo $options | sed 's/^.\?\(.\?\).*$/\1/')
	if [ -z "$speed" ]; then
		speed="9600"
	fi
	case "$parity" in 
		n) parity="--parity=no" ;;
		e) parity="--parity=even" ;;
		o) parity="--parity=odd" ;;
		*) parity="" ;;
	esac
	if [ "$word" ]; then
		word="--word=$word"
	fi

	echo serial --unit=$unit --speed=$speed $word $parity --stop=1
}

serial="$(get_serial_console)"

# Usage: convert os_device
# Convert an OS device to the corresponding GRUB drive
convert () {
	tmp_drive="$($chroot $ROOT grub-probe -d -t drive "$1")" || exit $?
	if [ "$partition_offset" != 0 ]; then
		tmp_part="$(echo "$tmp_drive" | sed 's%.*,\([0-9]*\)).*%\1%')"
		if [ "$tmp_part" ] && [ "$tmp_part" != "$tmp_drive" ]; then
			tmp_drive="$(echo "$tmp_drive" | sed "s%\(.*,\)[0-9]*\().*\)%\1`expr $tmp_part - $partition_offset`\2%")"
		fi
	fi
	echo "$tmp_drive"
}

# Convert a linux non-devfs disk device name into the hurd's syntax
hurd_convert () {
	dr_type=$(expr "$1" : '.*\([hs]d\)[a-h][0-9]*')
	dr_letter=$(expr "$1" : '.*d\([a-h]\)[0-9]*')
	dr_part=$(expr "$1" : '.*d[a-h]\([0-9]*\)')
	case "$dr_letter" in
	a) dr_num=0 ;;
	b) dr_num=1 ;;
	c) dr_num=2 ;;
	d) dr_num=3 ;;
	e) dr_num=4 ;;
	f) dr_num=5 ;;
	g) dr_num=6 ;;
	h) dr_num=7 ;;
	esac
	echo "$dr_type${dr_num}s$dr_part"
}

# Run update-grub in $ROOT
update_grub () {
	if ! log-output -t grub-installer $chroot $ROOT $update_grub; then
		error "Running '$update_grub' failed." 1>&2
		db_input critical grub-installer/update-grub-failed || [ $? -eq 30 ]
		db_go || true
		db_progress STOP
		exit 1
	fi
}

findfs () {
	mount | grep "on $ROOT${1%/} " | tail -n1 | cut -d' ' -f1
}

findfstype () {
	mount | grep "on $ROOT${1%/} " | tail -n1 | cut -d' ' -f5
}

rootfs=$(findfs /)
bootfs=$(findfs /boot)
[ -n "$bootfs" ] || bootfs="$rootfs"

bootfstype=$(findfstype /boot)
[ -n "$bootfstype" ] || bootfstype="$(findfstype /)"

case $ARCH in
    powerpc/*)
      offs=$(findfs /boot/grub)
      [ -n "$offs" ] || error "GRUB requires that the OF partition is mounted in /boot/grub" 1>&2
    ;;
esac

# This code to set disc_offered was taken from lilo-installer
rootfs_nodevfs=$(mapdevfs $rootfs)
bootfs_nodevfs=$(mapdevfs $bootfs)
prefix=$(echo "$bootfs" | \
  sed 's:\(/dev/\(cciss\|ida\|rs\)/c[0-9]d[0-9][0-9]*\|/dev/mmcblk[0-9]\|/dev/\(ad\|da\)[0-9]\+\|/dev/[a-z]\+\).*:\1:')

case $prefix in
    /dev/md)
	disc_offered_devfs="$bootfs"
	;;
    /dev/mapper)
	disc_offered_devfs="$bootfs"
	;;
    /dev/[hsv]d[a-z]|/dev/xvd[a-z]|/dev/cciss/c[0-9]d[0-9]*|/dev/ida/c[0-9]d[0-9]*|/dev/rs/c[0-9]d[0-9]*|/dev/mmcblk[0-9]|/dev/ad[0-9]*|/dev/da[0-9]*)
	disc_offered_devfs="$prefix"
	;;
    *)
	disc_offered_devfs=$(echo "$bootfs_nodevfs" | sed "s:\(.*\)/.*:\1/disc:")
	;;
esac
disc_offered=$(mapdevfs "$disc_offered_devfs")

# Identify partition table of the disk containing our boot partition
bootfslabel=$(partmap $disc_offered || echo unknown)

# Check if the boot file system is on Serial ATA RAID
frdev=""
if type dmraid >/dev/null 2>&1 && dmraid -s -c >/dev/null 2>&1 && \
   db_get disk-detect/activate_dmraid && [ "$RET" = true ]; then
	for frdisk in $(dmraid -s -c); do
		if echo "$disc_offered" | grep -q "/$frdisk[0-9]\+"; then
			frdev=/dev/mapper/$frdisk
			frbootpart=${disc_offered#$frdev}
			frgrubroot=$frbootpart
			frtype=sataraid
			break
		fi
	done
# Check if the boot file system is on multipath
elif type multipath >/dev/null 2>&1; then
	for frdisk in $(multipath -l 2>/dev/null | \
			grep '^mpath[0-9]\+ ' | cut -d ' ' -f 1); do
		if echo "$disc_offered" | 	   \
			grep -q "^/dev/mapper/${frdisk}-part[0-9]\+"; then
			frdev=/dev/mapper/$frdisk
			frbootpart=${disc_offered#$frdev}
			frgrubroot=${frbootpart#-part}
			frtype=multipath
			break
		fi
	done
	if [ "$frdisk" ]; then
		# Create the device nodes for grub:
		apt-install dmsetup
		$chroot $ROOT mount /proc
		$chroot $ROOT dmsetup mknodes
	fi
elif type lvdisplay >/dev/null 2>&1 && \
     (lvdisplay "$disc_offered" | grep -q 'LV Name' 2>/dev/null || \
      [ -e "$(dirname "$disc_offered")/control" ]); then
	# Don't set frdev/frdisk here, otherwise you'll end up in different
	# code paths below ...
	frtype=lvm
fi

info "Identified partition label for $bootfs: $bootfslabel"

case $ARCH in
    i386/mac|amd64/mac)
	# Note: depends on partman-efi to load the efivars module!
	if [ -d /sys/firmware/efi ]; then
		# This point can't be reached (yet).  See debian/isinstallable.
		grub_package="grub-efi"
	else
		# On PC/BIOS, default to GRUB Legacy
		grub_package="grub"
	fi
	;;
    i386/*|amd64/*)
	# On PC/BIOS, default to GRUB Legacy
	grub_package="grub"
	;;
    kfreebsd-i386/*|kfreebsd-amd64/*)
	grub_package="grub-pc"
	;;
    powerpc/*)
	grub_package="grub-ieee1275"
	;;
esac

case "$frtype:$bootfstype:$bootfslabel:$grub_package" in
    sataraid:*:*:*)
	# Serial ATA RAID partition, currently only grub is supported
	: ;;
    multipath:*:*:*)
	# Multipath requires GRUB Legacy for now
	: ;;
    lvm:*:*:*)
	# Booting from LVM requires grub2
	grub_package="grub-pc"
	;;
    *:*:gpt:*)
	if [ "$grub_package" = "grub" ] ; then
		grub_package="grub-pc"
	fi
	;;
    *:ext4:*:grub)
	# We boot from ext4, requires grub2
	grub_package="grub-pc"
	;;
    *:*:*:grub)
	db_input low grub-installer/grub2_instead_of_grub_legacy || [ $? -eq 30 ]
	db_go || exit 10
	db_get grub-installer/grub2_instead_of_grub_legacy
	if [ "$RET" = true ]; then
		grub_package="grub-pc"
	fi
	;;
    *:ufs:*:*)
	# Booting from UFS requires grub2
	grub_package="grub-pc"
	;;
    *:*:*:*)
	db_subst grub-installer/grub_not_mature_on_this_platform ARCH $ARCH
	db_input low grub-installer/grub_not_mature_on_this_platform || [ $? -eq 30 ]
	db_go || exit 10
	db_get grub-installer/grub_not_mature_on_this_platform
	if [ "$RET" != true ]; then
		exit 10
	fi
	;;
esac

case $grub_package in
    grub)
	grub_version="grub"
	menu_file="menu.lst"
	update_grub="update-grub"
	partition_offset=1
	frgrubroot=$(($frgrubroot - 1))
	;;
    *)
	grub_version="grub2"
	menu_file="grub.cfg"
	update_grub="update-grub"
	partition_offset=0
	;;
esac

user_params=$(user-params) || true
defopt_params=""
kopt_params=""
got_quiet=""
for u_param in $user_params; do
	case "$u_param" in
	    quiet)
		got_quiet=1
		defopt_params=${defopt_params:+$defopt_params }$u_param ;;
	    *)
		kopt_params=${kopt_params:+$kopt_params }$u_param ;;
	esac
done
if [ "$grub_version" = grub2 ]; then
	# Add user parameters to the menu file; some options are only added
	# to the default entry for a kernel instead of all entries.
	# We have to duplicate grub2's default for
	# GRUB_CMDLINE_LINUX_DEFAULT here.
	if [ -z "$got_quiet" ]; then
		defopt_params="quiet${defopt_params:+ $defopt_params}"
	fi
	# (quoting to deconfuse vim)
	$chroot $ROOT 'debconf-set-selections' <<EOF
$grub_package grub2/linux_cmdline string $kopt_params
$grub_package grub2/linux_cmdline_default string $defopt_params
EOF
fi
if [ "$grub_package" = grub-pc ]; then
	# Empty this for now to stop it being asked. We'll fix this up later.
	$chroot $ROOT 'debconf-set-selections' <<EOF
$grub_package grub-pc/install_devices multiselect
EOF
fi

db_progress START 0 6 grub-installer/progress/title

db_subst grub-installer/progress/step_install GRUB "$grub_version"
db_progress INFO grub-installer/progress/step_install

# apt-install passes --no-remove to apt, but grub{,2} conflict each other, so
# we need to purge them first to support users who try grub2 and then switch
# to grub legacy, or vice-versa
case "$grub_package" in
    grub)
	log-output -t grub-installer $chroot $ROOT dpkg -P grub-pc
	;;
    grub-pc)
	log-output -t grub-installer $chroot $ROOT dpkg -P grub grub-legacy
	;;
esac

exit_code=0
inst_package=$grub_package
case "$grub_package" in
    grub)
	if apt-install --no-recommends grub-legacy ; then
		inst_package=grub-legacy
	else
		apt-install $grub_package || exit_code=$? 
	fi
	;;
   *)
	# Will pull in os-prober based on global setting for Recommends
	apt-install $grub_package || exit_code=$? 
	;;
esac

if [ $exit_code -ne 0 ] ; then
	db_progress STOP
	info "Calling 'apt-install $inst_package' failed"
	db_subst grub-installer/apt-install-failed GRUB "$inst_package"
	db_input critical grub-installer/apt-install-failed || true
	if ! db_go; then
		exit 10 # back up to menu
	fi
	exit 1
fi

grub_debian_version="$($chroot $ROOT dpkg-query -W -f '${Version}' $inst_package)"

if [ "$frtype" = multipath ]; then
	$chroot $ROOT umount /proc
fi

db_progress STEP 1
db_progress INFO grub-installer/progress/step_os-probe
os-prober > /tmp/os-probed || true

# Work out what probed OSes can be booted from grub
tmpfile=/tmp/menu.lst.extras
if [ -s /tmp/os-probed ]; then
	supported_os_list=""
	unsupported_os_list=""

	OLDIFS="$IFS"
	IFS="$newline"
	for os in $(cat /tmp/os-probed); do
		IFS="$OLDIFS"
		title=$(echo "$os" | cut -d: -f2)
		type=$(echo "$os" | cut -d: -f4)
		case "$type" in
		    chain)
			: ;;
		    linux)
			# Check for linux systems that we don't
			# know how to boot
			partition=$(echo "$os" | cut -d: -f1)
			if [ -z "$(linux-boot-prober $partition)" ]; then
				if [ -n "$unsupported_os_list" ]; then
					unsupported_os_list="$unsupported_os_list, $title"
				else
					unsupported_os_list="$title"
				fi
				continue
			fi
			;;
		    hurd)
			: ;;
		    *)
			if [ -n "$unsupported_os_list" ]; then
				unsupported_os_list="$unsupported_os_list, $title"
			else
				unsupported_os_list="$title"
			fi
			continue
			;;
		esac

		if [ -n "$supported_os_list" ]; then
			supported_os_list="$supported_os_list, $title"
		else
			supported_os_list="$title"
		fi
		
		IFS="$newline"
	done
	IFS="$OLDIFS"
	
	if [ -n "$unsupported_os_list" ]; then
		# Unsupported OS, jump straight to manual boot device question.
		state=2
	else
		q=grub-installer/with_other_os
		db_subst $q OS_LIST "$supported_os_list"
		state=1
	fi
else
	q=grub-installer/only_debian
	state=1
fi

if [ "$frdev" ]; then
	if [ -e $ROOT$frdev ] && [ -e $ROOT$frdev$frbootpart ] && \
	   [ $frgrubroot -ge $((1 - $partition_offset)) ]; then
		db_subst grub-installer/$frtype GRUBROOT $ROOT$frdev$frbootpart
		q=grub-installer/$frtype
	else
		db_input critical grub-installer/${frtype}-error
		db_go || true
		exit 1
	fi
fi

db_progress STEP 1
db_progress INFO grub-installer/progress/step_bootdev

while : ; do
	if [ "$state" = 1 ]; then
		db_input high $q || true
		if ! db_go; then
			# back up to menu
			db_progress STOP
			exit 10
		fi
		db_get $q
		if [ "$RET" = true ]; then
			# Try to avoid using (hd0) as a boot device name.
			# Something which can be turned into a stable by-id
			# name is better.
			bootdev_os="$($chroot $ROOT grub-mkdevicemap --no-floppy -m - | head -n1 | cut -f2)"
			if [ "$bootdev_os" ]; then
				bootdev="$bootdev_os"
			else
				bootdev="(hd0)"
			fi
			break
		else
			# Exit to menu if /boot is on SATA RAID/multipath; we
			# don't support device selection in that case
			if [ "$frdev" ]; then
				db_progress STOP
				exit 10
			fi
			state=2
		fi
	else
		db_input critical grub-installer/bootdev || true
		if ! db_go; then
			if [ "$q" ]; then
				state=1
			else
				# back up to menu
				db_progress STOP
				exit 10
			fi
		else
			db_get grub-installer/bootdev
			bootdev=$RET
			if echo "$bootdev" | grep -qv '('; then
				mappedbootdev=$(mapdevfs "$bootdev") || true
				if [ -n "$mappedbootdev" ]; then
					bootdev="$mappedbootdev"
				fi
			fi
			break
		fi
	fi
done

db_progress STEP 1
db_subst grub-installer/progress/step_install_loader BOOTDEV "$bootdev"
db_progress INFO grub-installer/progress/step_install_loader

info "Installing grub on '$bootdev'"

update_mtab

if [ -z "$frdisk" ]; then

	# Install grub on each space separated disk in the list
	bootdevs="$bootdev"
	for bootdev in $bootdevs; do
		grub_install_params=
		if ! is_floppy "$bootdev"; then
			if $chroot $ROOT grub-install -h 2>&1 | grep -q no-floppy; then
				info "grub-install supports --no-floppy"
				grub_install_params="$grub_install_params --no-floppy"
			else
				info "grub-install does not support --no-floppy"
			fi
		fi

		if [ "$ARCH" = "powerpc/chrp_pegasos" ] ; then
			# nvram is broken here
			grub_install_params="$grub_install_params --no-nvram"
		fi

		if [ "$grub_version" = "grub" ] ; then
			grub_install_params="$grub_install_params --recheck"
		else
			# install even if it requires blocklists
			grub_install_params="$grub_install_params --force"
		fi

		info "Running $chroot $ROOT grub-install $grub_install_params \"$bootdev\""
		if log-output -t grub-installer $chroot $ROOT grub-install $grub_install_params "$bootdev"; then
			info "grub-install ran successfully"
		else
			error "Running 'grub-install $grub_install_params \"$bootdev\"' failed."
			db_subst grub-installer/grub-install-failed BOOTDEV "$bootdev"
			db_input critical grub-installer/grub-install-failed || [ $? -eq 30 ]
			db_go || true
			db_progress STOP
			exit 1
		fi
	done

else

	# Semi-manual grub setup for Serial ATA RAID/multipath
	info "Boot partition is on a Serial ATA RAID disk or multipath device"
	info "Installing GRUB to $frdev; grub root is $disc_offered"
	case $(archdetect) in
	    i386/*)
		stagedir=i386-pc ;;
	    amd64/*)
		stagedir=x86_64-pc ;;
	    *)
		error "Unsupported architecture for SATA RAID/multipath installation"
		exit 1
		;;
	esac
	if [ ! -d $ROOT/usr/lib/grub/$stagedir/ ]; then
		error "Grub stage files not available"
		exit 1
	fi
	mkdir -p $ROOT/boot/grub
	cp $ROOT/usr/lib/grub/$stagedir/* $ROOT/boot/grub

	# TODO: Check for errors during this process!
	TERM=linux $chroot $ROOT \
        grub --device-map=/dev/null >/var/log/grub-${frtype}.log 2>&1 </dev/null <<EOF
device (hd0,$frgrubroot) $disc_offered
device (hd0) $frdev
root (hd0,$frgrubroot)
setup (hd0)
quit
EOF

fi

if [ "$grub_package" = "grub-pc" ]; then
	# Do the same thing on upgrades.
	$chroot $ROOT 'debconf-set-selections' <<EOF
$grub_package grub-pc/install_devices multiselect $bootdevs
EOF
fi

db_progress STEP 1
db_progress INFO grub-installer/progress/step_config_loader

# Delete for idempotency
rm -f $ROOT/boot/grub/$menu_file
update_grub

# For SATA RAID/multipath the grub root may need fixing up
# For dmraid we can end up with e.g. '(sil_aiahbgbgaaaj1)', or we can end up
# with '(hd0,0)' when it should be a higher partition
# TODO: This should really be better supported in update-grub
if [ "$frdev" ] && \
   ! grep -q "^# groot=(hd0,$frgrubroot)" $ROOT/boot/grub/$menu_file; then
	info "Fixing up the grub root to '(hd0,$frgrubroot)'"
	sed -i "/^# groot/s/(.*)/(hd0,$frgrubroot)/" $ROOT/boot/grub/$menu_file
	update_grub
fi

# Set a password if asked
if [ "$grub_version" = "grub" ] ; then
	# Set up a password if asked or preseeded.
	password=
	db_get grub-installer/password-crypted
	if [ "$RET" = false ] || [ "$RET" = true ]; then
		# password-crypted used to be a boolean template
		error "Preseeding of encrypted passwords changed! Check installation guide."
		exit 1
	elif [ "$RET" ]; then
		password="$RET"
	else
		PW_PRIO=low
		while :; do
			password=""
			db_input $PW_PRIO grub-installer/password || true
			if ! db_go; then
				# back up to menu
				db_progress STOP
				exit 10
			fi

			db_get grub-installer/password
			if [ "$RET" ]; then
				password="$RET"
				db_input $PW_PRIO grub-installer/password-again || true
				if ! db_go; then
					db_progress STOP
					exit 10
				fi
				
				db_get grub-installer/password-again
				if [ "$password" = "$RET" ]; then
					break
				else
					db_input critical grub-installer/password-mismatch || true
					if ! db_go; then
						db_progress STOP
						exit 10
					fi
				fi
			else
				# The user doesn't want a password
				break
			fi
			# We only get here if passwords don't match
			PW_PRIO=critical
			db_set grub-installer/password ""
			db_set grub-installer/password-again ""
			db_fset grub-installer/password seen false
			db_fset grub-installer/password-again seen false
		done
		if [ "$password" ]; then
			password=$(echo -e "md5crypt\n$password" | \
				   $chroot $ROOT \
				   grub --batch --device-map=/dev/null 2>&1 | \
				   grep "^Encrypted:" | cut -d' ' -f2)
		fi
	fi

	if [ "$password" ]; then
		echo "password --md5 $password" >/tmp/menu.lst.password
		# Add a line to menu.lst to use the given password
		# The line is appended after the commented example
		sed -i '/^# password/r /tmp/menu.lst.password' $ROOT/boot/grub/$menu_file
		# By default, menu.lst is world-readable, which is not so good if it
		# contains a password.
		chmod o-r $ROOT/boot/grub/$menu_file
		rm -f /tmp/menu.lst.password
	fi 
fi

if [ "$grub_version" = grub ]; then
	# Add user parameters to menu.lst; some options are only added to
	# the default entry for a kernel instead of all entries. We can't do
	# this in the same place as the grub2 case because we need the menu
	# file to exist.
	if [ "$defopt_params" ]; then
		sed -i "s!^\(# defoptions=.*\)!\1 $defopt_params!" $ROOT/boot/grub/$menu_file
	fi
	if [ "$kopt_params" ]; then
		sed -i "s!^\(# kopt=.*\)!\1 $kopt_params!" $ROOT/boot/grub/$menu_file
	fi
	# In either case, update the Debian kernel entries
	if [ "$user_params" ]; then
		update_grub
	fi
fi

if [ "$serial" ] ; then
	# Modify menu.lst so _grub_ uses serial console.
	case $grub_package in
	    grub)
		(
			grub_serial_console $serial
			echo "terminal serial"
			cat $ROOT/boot/grub/$menu_file
		) >$ROOT/boot/grub/$menu_file.new
		mv $ROOT/boot/grub/$menu_file.new $ROOT/boot/grub/$menu_file
		;;
	    grub-pc)
		if grep -q "^GRUB_TERMINAL=" $ROOT/etc/default/grub; then
			sed -i $ROOT/etc/default/grub -e "s/^\(GRUB_TERMINAL\)=.*/\1=serial/g"
		else
			echo "GRUB_TERMINAL=serial" >> $ROOT/etc/default/grub
		fi
		if grep -q "^GRUB_SERIAL_COMMAND=" $ROOT/etc/default/grub ; then
			sed -i $ROOT/etc/default/grub -e "s/^\(GRUB_SERIAL_COMMAND\)=.*/\1=\"`grub_serial_console $serial`\"/g"
		else
			echo "GRUB_SERIAL_COMMAND=\"`grub_serial_console $serial`\"" >> $ROOT/etc/default/grub
		fi
		update_grub # propagate to grub.cfg
		;;
	esac
fi 

# Generate menu.lst additions for other OSes
tmpfile=/tmp/menu.lst.extras
OLDIFS="$IFS"
IFS="$newline"

no_floppy=""
if $chroot $ROOT dpkg --compare-versions $grub_debian_version ge 1.96+20090609-1 ; then
	no_floppy="--no-floppy"
fi

for os in $(cat /tmp/os-probed); do
	IFS="$OLDIFS"
	title=$(echo "$os" | cut -d: -f2)
	shortname=$(echo "$os" | cut -d: -f3)
	type=$(echo "$os" | cut -d: -f4)
	case "$type" in
	    chain)
		partition=$(mapdevfs $(echo "$os" | cut -d: -f1))
		grubdrive=$(convert "$partition") || true
		if [ -n "$grubdrive" ]; then
			case $grub_package in
			    grub)	grub_write_chain ;;
			    grub-pc | grub-efi)
					grub2_write_chain ;;
			esac
		fi
		;;
	    linux)
		partition=$(echo "$os" | cut -d: -f1)
		mappedpartition=$(mapdevfs "$partition")
		IFS="$newline"
		for entry in $(linux-boot-prober "$partition"); do
			IFS="$OLDIFS"
			bootpart=$(echo "$entry" | cut -d: -f2)
			mappedbootpart=$(mapdevfs "$bootpart") || true
			if [ -z "$mappedbootpart" ]; then
				mappedbootpart="$bootpart"
			fi
			label=$(echo "$entry" | cut -d : -f3)
			if [ -z "$label" ]; then
				label="$title"
			fi
			kernel=$(echo "$entry" | cut -d : -f4)
			initrd=$(echo "$entry" | cut -d : -f5)
			if echo "$kernel" | grep -q '^/boot/' && \
			   [ "$mappedbootpart" != "$mappedpartition" ]; then
				# separate /boot partition
				kernel=$(echo "$kernel" | sed 's!^/boot!!')
				initrd=$(echo "$initrd" | sed 's!^/boot!!')
				grubdrive=$(convert "$mappedbootpart") || true
			else
				grubdrive=$(convert "$mappedpartition") || true
			fi
			params="$(echo "$entry" | cut -d : -f6-) $serial"
			case $grub_version in
			    grub)	grub_write_linux ;;
			    grub2)	grub2_write_linux ;;
			esac
			IFS="$newline"
		done
		IFS="$OLDIFS"
		;;
	    hurd)
		partition=$(mapdevfs $(echo "$os" | cut -d: -f1))
		grubdrive=$(convert "$partition") || true
		hurddrive=$(hurd_convert "$partition") || true
		# Use the standard hurd boilerplate to boot it.
		case $grub_version in
		    grub)	grub_write_hurd ;;
		    grub2)	grub2_write_hurd ;;
		esac
		;;
	    *)
		info "unhandled: $os"
		;;
	esac
	IFS="$newline"
done
IFS="$OLDIFS"
rm -f /tmp/os-probed

if [ -s $tmpfile ] ; then
	case $grub_version in
	    grub)
		grub_write_divider
		cat $tmpfile >> $ROOT/boot/grub/$menu_file
		;;
	    grub2)
		if ! $chroot $ROOT which os-prober >/dev/null 2>&1; then
			cat > $ROOT/etc/grub.d/30_otheros << EOF
#!/bin/sh
exec tail -n +3 \$0
EOF
			cat $tmpfile >> $ROOT/etc/grub.d/30_otheros
			chmod +x $ROOT/etc/grub.d/30_otheros
			update_grub # propagate 30_otheros to grub.cfg
		fi
		;;
	esac
	rm -f $tmpfile
fi

db_progress STEP 1
db_progress INFO grub-installer/progress/step_update_etc

if [ -e $ROOT/etc/kernel-img.conf ] ; then
	sed -i 's/do_bootloader = yes/do_bootloader = no/' $ROOT/etc/kernel-img.conf
fi
if [ -z "$(grep update-grub $ROOT/etc/kernel-img.conf)" ]; then
	(
		echo "postinst_hook = update-grub"
		echo "postrm_hook   = update-grub"
	) >> $ROOT/etc/kernel-img.conf
fi

db_progress STEP 1
db_progress STOP
