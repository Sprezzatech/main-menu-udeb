#!/bin/sh
set -e

log() {
	logger -t lilo-installer "$@"
}

error() {
	log "error: $@"
}

info() {
	log "info: $@"
}

. /usr/share/debconf/confmodule
db_capb backup

if [ -f /etc/mtab ]; then
    MTAB=/etc/mtab
else
    MTAB=/proc/mounts
fi

if ! apt-install lilo ; then
	info "Calling 'apt-install lilo' failed"
	# Hm, unable to install lilo into /target/, what should we do?
	db_input critical lilo-installer/apt-install-failed || [ $? -eq 30 ]
	if ! db_go; then
		exit 10 # back up to menu
	fi
	db_get lilo-installer/apt-install-failed
	if [ true != "$RET" ] ; then
		exit 1
	fi
fi

# detect which is the root partition: /target
# ugh, I wanted to use awk, but sed has better chance of being in busybox
rootfs=`/target/bin/sed -ne '/^[^ ]* \/target /s/ .*//p' $MTAB`

# detect which hard drive has /target/boot mounted on it. this does *not*
# have to be the same as the drive /target is mounted on.
defaultbootdev=`/target/bin/sed -ne '/^[^ ]* \/target\/boot /s/ .*//p' $MTAB`

if [ "$defaultbootdev" = '' ]; then
	defaultbootdev=$rootfs
fi

defaultbootdev=`/target/bin/echo $defaultbootdev | /target/bin/sed 's/part[0-9]\+$/disc/'` 

defaultbootdev=$(mapdevfs $defaultbootdev)

if [ "$defaultbootdev" = '' ]; then
	defaultbootdev='/dev/hda'
fi

db_fget lilo-installer/bootdev seen
[ "$RET" = true ] || db_set lilo-installer/bootdev "$defaultbootdev"
db_input high lilo-installer/bootdev || [ $? -eq 30 ]
db_go || exit 10 # back up

db_get lilo-installer/bootdev
bootdev=$RET

if [ "$bootdev" = '' ]; then
	bootdev=$defaultbootdev
fi

rootfs=`mapdevfs $rootfs`

# If installing to a partition (not MBR), offer to make it active
if echo "${bootdev}" | grep -q '[0-9]$'; then
    # Installing to a partition, check if it is already marked active
    disc=$(echo ${bootdev} | sed 's/part[0-9]\+$/disc/')
    if ! fdisk -l ${disc} | grep "^${bootdev}" | grep -q '\*'; then
        # partition is not marked active, offer to make it so
        db_input high lilo-installer/activate-part || [ $? -eq 30 ]
        db_go || exit 10 # back up
        db_get lilo-installer/activate-part
        if [ "${RET}" = "true"]; then
            pnum=$(echo ${bootdev} | sed 's/^.*\([0-9]\+\)$/\1/')
            echo -n "I: Setting partition to active..." >&2
            sfdisk -A${pnum} ${disc}
            echo "done." >&2
        fi
    fi
fi

# Use a serial console if current default console is a serial port.
# default console is last listed
defconsole=$(sed -e 's/.*console=/console=/' /proc/cmdline)
if echo "${defconsole}" | grep -q console=ttyS; then
    PORT=$(echo "${defconsole}" | sed -e 's%^console=ttyS%%' -e 's%,.*%%')
    SPEED=$(echo "${defconsole}" | sed -e 's%^console=ttyS[0-9]\+,%%' -e 's% .*%%')
    SERIAL="${PORT},${SPEED}"

    db_subst lilo-installer/serial-console PORT "ttyS${PORT}"
    db_subst lilo-installer/serial-console SPEED "${SPEED}"
    db_input medium lilo-installer/serial-console || [ $? -eq 30 ]
    db_go || exit 10 # back up
fi

#write out lilo.conf

if [ "${SERIAL}" ]; then
  SERIAL_CONSOLE="serial=${SERIAL}"
else
  SERIAL_CONSOLE="# serial="
fi

if [ "${SERIAL}" ]; then
  SERIAL_CONSOLE_APPEND="	append=\"console=ttyS${SERIAL}\""
fi

if [ -e "/target/initrd.img" ]; then
  INITRD="	initrd=/initrd.img"
fi

cat > /target/etc/lilo.conf <<EOF
# /etc/lilo.conf - See: \`lilo(8)' and \`lilo.conf(5)',
# ---------------       \`install-mbr(8)', \`/usr/share/doc/lilo/',
#                       and \`/usr/share/doc/mbr/'.

# +---------------------------------------------------------------+
# |                        !! Reminder !!                         |
# |                                                               |
# | Don't forget to run \`lilo' after you make changes to this     |
# | conffile, \`/boot/bootmess.txt' (if you have created it), or   |
# | install a new kernel.  The computer will most likely fail to  |
# | boot if a kernel-image post-install script or you don't       |
# | remember to run \`lilo'.                                       |
# |                                                               |
# +---------------------------------------------------------------+

# Specifies the boot device.  This is where Lilo installs its boot
# block.  It can be either a partition, or the raw device, in which
# case it installs in the MBR, and will overwrite the current MBR.
#
boot=${bootdev}

# Specifies the device that should be mounted as root. (\`/')
#
root=${rootfs}

# Enable map compaction:
# Tries to merge read requests for adjacent sectors into a single
# read request. This drastically reduces load time and keeps the
# map smaller.  Using \`compact' is especially recommended when
# booting from a floppy disk.  It is disabled here by default
# because it doesn't always work.
#
# compact

# Installs the specified file as the new boot sector
# You have the choice between: text, bmp, and menu
# Look in lilo.conf(5) manpage for details
#
#install=menu

# Specifies the location of the map file
#
map=/boot/map

# You can set a password here, and uncomment the \`restricted' lines
# in the image definitions below to make it so that a password must
# be typed to boot anything but a default configuration.  If a
# command line is given, other than one specified by an \`append'
# statement in \`lilo.conf', the password will be required, but a
# standard default boot will not require one.
#
# This will, for instance, prevent anyone with access to the
# console from booting with something like \`Linux init=/bin/sh',
# and thus becoming \`root' without proper authorization.
#
# Note that if you really need this type of security, you will
# likely also want to use \`install-mbr' to reconfigure the MBR
# program, as well as set up your BIOS to disallow booting from
# removable disk or CD-ROM, then put a password on getting into the
# BIOS configuration as well.  Please RTFM \`install-mbr(8)'.
#
# password=tatercounter2000

# Specifies the number of deciseconds (0.1 seconds) LILO should
# wait before booting the first image.
#
delay=20

# You can put a customized boot message up if you like.  If you use
# \`prompt', and this computer may need to reboot unattended, you
# must specify a \`timeout', or it will sit there forever waiting
# for a keypress.  \`single-key' goes with the \`alias' lines in the
# \`image' configurations below.  eg: You can press \`1' to boot
# \`Linux', \`2' to boot \`LinuxOLD', if you uncomment the \`alias'.
#
# message=/boot/bootmess.txt
#	prompt
#	delay=100
#	timeout=100

# Specifies the VGA text mode at boot time. (normal, extended, ask, <mode>)
#
# vga=ask
# vga=9
#
vga=normal

# Kernel command line options that apply to all installed images go
# here.  See: The \`boot-prompt-HOWTO' and \`kernel-parameters.txt' in
# the Linux kernel \`Documentation' directory.
#
# append=""
 
# If you used a serial console to install Debian, this option should be
# enabled by default.
${SERIAL_CONSOLE}

#
# Boot up Linux by default.
#
default=Linux

image=/vmlinuz
	label=Linux
${SERIAL_CONSOLE_APPEND}
${INITRD}
	read-only
#	restricted
#	alias=1

image=/vmlinuz.old
	label=LinuxOLD
${SERIAL_CONSOLE_APPEND}
${INITRD}.old
	read-only
	optional
#	restricted
#	alias=2

# If you have another OS on this machine to boot, you can uncomment the
# following lines, changing the device name on the \`other' line to
# where your other OS' partition is.
#
# other=/dev/hda4
#	label=HURD
#	restricted
#	alias=3
EOF

if chroot /target /sbin/lilo ; then
    :
else
    ERRCODE=$?
    db_subst lilo-installer/failed ERRCODE "$ERRCODE"
    db_input critical lilo-installer/failed || [ $? -eq  30 ]
    db_go || exit 10 # back up
    exit 1
fi

sed -e 's/do_bootloader = no/do_bootloader = yes/' -e 's/postinst_hook = \/sbin\/update-grub//' -e 's/postrm_hook   = \/sbin\/update-grub//' < /target/etc/kernel-img.conf > /target/etc/kernel-img.conf.$$
mv /target/etc/kernel-img.conf.$$ /target/etc/kernel-img.conf
