#!/bin/sh
set -e

. /usr/share/debconf/confmodule
db_capb backup

if [ -f "/etc/mtab" ]; then
    MTAB=/etc/mtab
else
    MTAB=/proc/mounts
fi

# detect which is the root partition: /target
rootfs=$(mapdevfs `/target/bin/sed -ne '/^[^ ]* \/target /s/ .*//p' $MTAB`)
foo=${rootfs%?}
rootpart=${rootfs#$foo}

# detect which hard drive has /target/boot mounted on it. this does *not*
# have to be the same as the drive /target is mounted on.
bootfs=$(mapdevfs `/target/bin/sed -ne '/^[^ ]* \/target\/boot /s/ .*//p' $MTAB`)
foo=${bootfs%?}
bootpart=${bootfs#$foo}

if [ $rootpart -ne $bootpart ]; then
	boot="${bootpart}"
else
	boot="${rootpart}/boot"
fi

if [ -e "/target/boot/initrd.img" ]; then
	initrd='initrd=/boot/initrd.img'
fi

# Write out silo.conf
cat > /target/boot/silo.conf << EOF
root=${rootfs}
partition=${bootpart}
default=Linux
read-only
timeout=100
${initrd}
image=${boot}/vmlinuz
	label=Linux
	
image=${boot}/vmlinuz.old
	label=LinuxOLD
EOF

chmod 644 /target/boot/silo.conf

# Compat links
ln -sf ../boot/silo.conf /target/etc/silo.conf
ln -sf . /target/boot/boot
ln -sf . /target/boot/etc

if chroot /target /sbin/silo -f; then
	db_input medium silo-installer/success || [ $? -eq 30 ]
	db_go || true
	exit 0
else
	ERRCODE=$?
	db_subst silo-installer/failed ERRCODE "$ERRCODE"
	db_input critical silo-installer/failed || [ $? -eq 30 ]
	db_go || exit 10 # back up
	exit 1
fi

