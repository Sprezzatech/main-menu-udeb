#! /bin/sh
set -e

# Copyright: Frans Pop <elendil@planet.nl>, 2007
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.

# HACK WARNING
# This script needs some cleaning up. In particular, a lot of variables names
# are in need of rationalizing.

### INITIALIZATION

NL="
"

OPERATION=""
KVERS=""
ARCHES=""
USE_INCOMING=""
DO_CLEAN=""
DO_DCH=""
CHANGELOG_EXTRA=""
LMIRROR=""
MIRROR=""
INCOMING=""

if [ ~/.d-i_massbuildrc ]; then
	# Can contain values for LMIRROR, MIRROR and INCOMING
	# A local mirror is only used if defined in this user config file
	. ~/.d-i_massbuildrc
fi

MIRROR=${MIRROR:-"http://ftp.nl.debian.org/debian"}
INCOMING=${INCOMING:-"http://incoming.debian.org"}

UNOFFICIAL="armel ppc64"

usage() {
	if [ "$@" ]; then
		echo "Error: $@"
		echo
	fi
	echo "Usage: $(basename $0) kbuild|mbuild --dch [-m <extra changelog entry>] [--incoming] [<architecture> ...]"
	echo "       $(basename $0) krelease|mrelease [<architecture> ...]"
	echo "       $(basename $0) kclean|mclean [<architecture> ...]"
	exit 1
}

list_arches() {
	local arch
	for arch in $1; do
		local udir=$UBASE-$arch-2.6
		echo $(egrep -v "^(#|[[:space:]]*$)" $udir/kernel-versions | \
			awk '{print $1}' | sort | uniq)
	done
}

# Parse arguments
OPERATION="$1"
shift
case "$OPERATION" in
    kbuild|krelease|kclean)
	TYPE=kernel
	;;
    mbuild|mrelease|mclean)
	TYPE=modules
	;;
    "")
	usage "operation not specified" ;;
    *)
	usage "unrecognized operation" ;;
esac
UBASE=linux-$TYPE-di
OUTDIR=massbuild.out.$TYPE

while true; do
	case "$1" in
	    "")
		break ;;
	    --dch)
		DO_DCH=1
		;;
	    -m)
		DO_DCH=1
		shift
		CHANGELOG_EXTRA="$1"
		;;
	    --incoming)
		USE_INCOMING=1
		;;
	    -*)
		usage "unrecognized argument '$1'" ;;
	    *)
		# Strip trailing slash
		ARCHES="${ARCHES:+$ARCHES }$1"
		;;
	esac
	shift
done

# Default to all possible architectures
REQUESTED=$ARCHES
if [ -z "$ARCHES" ]; then
	for uarch in $(ls -d $UBASE-*-2.6 | cut -d- -f4); do
		ARCHES=${ARCHES:+$ARCHES }$(list_arches $uarch)
	done
fi

# Some architectures are combined in the same source 
UARCHES=""
for arch in $ARCHES; do
	case $arch in
	    ppc64)	uarch=powerpc ;;
	    *)		uarch=$arch ;;
	esac

	if ! [ -f $UBASE-$uarch-2.6/kernel-versions ]; then
		usage "unsupported architecture '$arch'"
	fi
	if ! echo "$UARCHES" | grep -q $uarch; then
		UARCHES="${UARCHES:+$UARCHES }$uarch"
	fi
done

CL_TEMP="$(mktemp -t massbuild.changelog.XXXXXX)"
trap 'rm -f "$CL_TEMP"' EXIT HUP INT QUIT TERM


### FUNCTION DEFINITIONS

log() {
	echo "$@"
	echo "$@" >>$LOGFILE
}

clean_arch() {
	# Remove from both dirs to also clean manual or failed builds
	rm -f ./$UBASE-$arch-2.6_*.*
	rm -f ./*_$1.udeb
	rm -f ./$OUTDIR/$UBASE-$arch-2.6_*.*
	rm -f ./$OUTDIR/*_$1.udeb
}

init_changelog() {
	[ "$DO_DCH" ] || return 0

	>"$CL_TEMP"
	if [ "$CHANGELOG_EXTRA" ]; then
		echo "$CHANGELOG_EXTRA" >"$CL_TEMP"
	fi
}

add_changelog() {
	[ "$DO_DCH" ] || return 0

	# Avoid duplicate entries
	if ! grep -q "$1" "$CL_TEMP"; then
		echo "$1" >>"$CL_TEMP"
	fi
}

do_dch() {
	[ "$DO_DCH" ] || return 0

	local first_entry=1
	cat "$CL_TEMP" | while read CL; do
		if [ "$first_entry" ]; then
			if head -n 1 debian/changelog | grep -q UNRELEASED; then
				dch -r "$CL"
				dch --release-heuristic=log "$CL"
			else
	        		dch --release-heuristic=log -i "$CL"
			fi
			first_entry=""
		else
			dch --release-heuristic=log "$CL"
		fi
	done
}

select_source() {
	local PACKAGE=$1
	case $PACKAGE in
	    linux-image-2.6*)
		BDEP_SOURCE=linux-2.6
		BDEP_BIN=linux-image-2.6
		;;
	    squashfs-modules-2.6*)
		BDEP_SOURCE=linux-modules-extra-2.6
		BDEP_BIN=squashfs-modules-2.6
		;;
	    loop-aes-modules-2.6*)
		BDEP_SOURCE=loop-aes
		BDEP_BIN=loop-aes-modules-2.6
		;;
	    *)
		echo "Unsupported build-dependency '$1'"
		exit 1
		;;
	esac

	KVERS=$(grep "^$BDEP_SOURCE[[:space:]]" ../massbuild.versions | awk '{print $2}')
	if [ -z "$KVERS" ]; then
		echo "Could not determine desired version for $PACKAGE"
		exit 1
	fi
}

fetch_deblist () {
	KIMAGES="$(wget -q $1 -O - | \
		   sed "s:</tr><:</tr>\n<:g" | \
		   grep "$BDEP_BIN.*\.deb" | \
		   sed -r "s/^.*(href|HREF)=\"([^\"]*)\".*$/\2/" |
		   sed "s/%2B/+/")"
	if [ -z "$KIMAGES" ]; then
		echo "Failed to retrieve available build dependencies"
		exit 1
	fi
}

get_depends_source() {
	local WGET_FROM=$1

	case $WGET_FROM in
	    local)
		PSOURCE="$LMIRROR/pool/main/${BDEP_SOURCE:0:1}/$BDEP_SOURCE"
		;;
	    pool)
		PSOURCE="$MIRROR/pool/main/${BDEP_SOURCE:0:1}/$BDEP_SOURCE"
		;;
	    incoming)
		PSOURCE="$INCOMING"
		;;
	esac

	fetch_deblist $PSOURCE

	kimages="$(echo "$KIMAGES" | grep "${build_dep}_.*$kv_arch\.")"
	if [ -z "$kimages" ]; then
		log "  * no packages available matching $build_dep from $WGET_FROM"
		return 1
	fi

	# HACK ALERT
	# The binary packages for linux-modules-extra have a different
	# version than their source package.
	# The version of the module's source package is inserted between the
	# "upstream" part of the version and the "Debian" revision.
	KVERS_BASE=${KVERS%-*}
	KVERS_REV=${KVERS##*-}
	kimage="$(echo "$kimages" | egrep "_${KVERS_BASE}([^_]*)?-${KVERS_REV}_")"
	if [ -z "$kimage" ]; then
		log "  * version $KVERS of $BDEP_SOURCE for $kv_arch seems unavailable in $WGET_FROM"
		return 1
	fi

	log "  Retrieving $kimage from $WGET_FROM..."
	if ! wget -q $PSOURCE/$kimage -O $ARCH_TDIR/$kimage; then
		log "  * failed to retrieve $kimage for $USOURCE from $WGET_FROM"
		return 1
	fi
}

get_depends() {
	cat kernel-versions | egrep "^$1[[:space:]]" | \
	    while read kv_arch version flavour installedname suffix build_deps; do
		build_deps="$(echo $build_deps | sed "s/ ([^)]*)//" | \
			      sed "s/,[[:space:]]*/ /g")"
		for build_dep in $build_deps; do
			select_source $build_dep

			# exit on errors as we're in a subshell!
			if [ "$LMIRROR" ] && get_depends_source local; then
				:
			elif get_depends_source pool; then
				:
			elif [ "$USE_INCOMING" ] && get_depends_source incoming; then
				:
			else
				exit 1
			fi

			add_changelog "Built against version $KVERS of $BDEP_SOURCE."
			dpkg -x $ARCH_TDIR/$kimage $ARCH_TDIR/
		done
		if [ -d $ARCH_TDIR/lib/modules/$installedname ]; then
			/sbin/depmod -b $ARCH_TDIR/ $installedname
		fi
	done
	return $?
}

has_recent_upload() {
	local chlog="$USOURCE/debian/changelog"
	if ! head -n 1 $chlog | grep -q UNRELEASED; then
		sig="$(grep "^ --" $chlog | head -n 1)"
		sigdate="${sig#*  }"
		sigsec="$(date -d "$sigdate" +%s 2>/dev/null)" || true
		if [ "$sigsec" ]; then
			if [ $((($(date +%s) - $sigsec) / 86400)) -lt 5 ]; then
				return 0
			fi
		else
			echo "* Error parsing date from '$sig'"
		fi
	fi
	return 1
}


### MAINLINE

LOGFILE="$(pwd -P)/massbuild.$OPERATION.log"
: >$LOGFILE

case $OPERATION in
    krelease|mrelease)
	for uarch in $UARCHES; do
		cd $UBASE-$uarch-2.6
		log "Committing changes for $uarch..."
		SVN_ST="$(svn st)"
		if [ "$(echo "$SVN_ST" | egrep -q "^(\?|C)")" ]; then
			log "* Working copy is not clean; skipping"
			cd ..; log ""; continue
		fi
		if [ -z "$(echo "$SVN_ST" | egrep "^M.*debian/changelog")" ]; then
			log "* No changes to commit; skipping"
			cd ..; log ""; continue
		fi
		svn diff
		read -n 1 -s -p "Are you sure you want to commit these changes [yN]? " REPLY
		echo
		if [ "$REPLY" != y ] && [ "$REPLY" != Y ]; then
			log "* Aborted by user"
			cd ..; log ""; continue
		fi
		debcommit --release 2>&1 | tee -a $LOGFILE
		cd ..; log ""
	done
	;;
    kclean|mclean)
	for arch in $ARCHES; do
		log "Cleaning files for $arch..."
		clean_arch $arch
	done
	rmdir ./$OUTDIR 2>/dev/null || true
	;;
esac


## Rest of processing is for builds
if [ $OPERATION != kbuild ] && [ $OPERATION != mbuild ]; then
	exit 0
fi

# Require dpkg-cross unless we are building only for a single architecture
# and that architecture matches the host we're running on.
no_cross=""
hostarch_cpu=$(dpkg-architecture -qDEB_HOST_ARCH_CPU 2>/dev/null)
set $UARCHES
if [ ${#@} -eq 1 ]; then
	arch=$(list_arches "$UARCHES")
	set $arch
	if [ ${#@} -eq 1 ] && [ "$arch" = $hostarch_cpu ]; then
		no_cross=1
	fi
fi
if [ -z "$no_cross" ] && ! dpkg -l dpkg-cross | grep -q "^ii"; then
	echo "Error: dpkg-cross is not installed; unable to proceed"
	exit 1
fi


echo "This script will build kernel udebs from source packages of a specific"
echo "version either for all architectures or a specific architecture."
echo "Make sure you have updated 'massbuild.versions' before continuing."
if [ "$no_cross" ]; then
	echo "NOTE: Uploads of kernel/module udebs should only be done by a porter"
	echo "      for that architecture, or after checking with the D-I release"
	echo "      manager."
else
	echo "NOTE: This script should only be used to build and upload kernel/module"
	echo "      udebs for multiple architectures after checking with the D-I"
	echo "      release manager."
fi
read -n 1 -s -p "Do you wish to continue [yN]? " REPLY
echo
if [ "$REPLY" != y ] && [ "$REPLY" != Y ]; then
	exit 0
fi


for uarch in $UARCHES; do
	echo
	init_changelog

	USOURCE=$UBASE-$uarch-2.6
	for arch in $(list_arches $uarch); do
		if ! echo "$ARCHES" | egrep -q "(^| )$arch( |$)"; then
			continue
		fi

		# Skip unofficial arches unless specifically requested
		if echo "$UNOFFICIAL" | egrep -q "(^| )$arch( |$)" && \
		   ! echo "$REQUESTED" | egrep -q "(^| )$arch( |$)"; then
			echo "! Skipping architecture $arch (unofficial)"
			continue
		fi
		log "Processing $arch..."

		if has_recent_upload; then
			echo "There already has been a recent upload for this architecture."
			read -n 1 -s -p "Skip this architecture [Yn]? " REPLY
			echo
			if [ "$REPLY" != n ] && [ "$REPLY" != N ]; then
				continue
			fi
		fi

		clean_arch $arch
		rm -f massbuild.$arch.log

		cd $USOURCE
		ARCH_TDIR=../$arch
		rm -rf $ARCH_TDIR
		mkdir $ARCH_TDIR

		log "  Retrieving and extracting dependencies..."
		if get_depends $arch; then
			do_dch
			log "  Building udebs, please wait..."
			if ! kernel-wedge build-arch "$arch" >../massbuild.$TYPE.$arch.log 2>&1; then
				log "* There were errors building udebs for $arch"
				clean_arch $arch
			else
				mkdir -p ../$OUTDIR
				mv ../$UBASE-$arch-2.6_*.* ../$OUTDIR
				mv ../*_$arch.udeb ../$OUTDIR
			fi
		else
			log "* Skipping architecture $arch"
		fi

		rm -rf $ARCH_TDIR
		cd ..
	done
done

echo
if grep -q "^\*" $LOGFILE; then
	echo "There were errors processing some architectures!"
	echo "See the logfiles for details"
	echo
fi
