#!/bin/sh
# This is a special linuxrc for the boot floppy image. It just loads the
# next floppy.
# Throughout we use BOOT_DEBUG to turn on debugging. 1 = minimal,
# with 2 you'll get shells in strategic places.

if [ "$BOOT_DEBUG" -gt 1 ]; then
	set -x
fi

mount -t proc proc proc
mount -t devfs devfs dev

modprobe floppy
modprobe vfat
modprobe loop

if [ ! -d /dev/floppy ]; then
	echo
	echo "Linux cannot find your floppy drive."
	echo
	echo "Perhaps it is a USB floppy. If so, you should use the usbfloppy"
	echo "boot disk instead of this one."
	echo
	echo "Giving up.."
	while :; do
		sleep 100
	done
fi

LOADED=0
while [ "$LOADED" = 0 ]; do
	echo
	echo
	echo
	echo
	echo
	echo
	echo -n "Please insert the second floppy ..."
	MOUNTED=0

	if [ 1 -gt "$BOOT_DEBUG" ]; then
		# Shut up kernel errors if the disk is inserted at wrong time, etc.
		OLD_PRINTK=`cat /proc/sys/kernel/printk`
		echo 0 > /proc/sys/kernel/printk
	fi
	
	while [ "$MOUNTED" = 0 ]; do
		# avoid thrashing the floppy drive too much
		sleep 5
		echo -n "."
		
		for dev in dev/floppy/?; do
			if [ -b $dev ]; then
				if mount $dev -o ro -tvfat floppy 2>/dev/null; then
					if [ -e floppy/initrd.gz -a ! -e floppy/linux ]; then
						MOUNTED=1
						echo " floppy mounted."
					else
						umount floppy || echo "umount failed!"
					fi
				else
					echo -n ""
				fi
			fi
		done
	done

	if [ 1 -gt "$BOOT_DEBUG" ]; then
		# Restore kernel errors.
		echo $OLD_PRINTK > /proc/sys/kernel/printk
	fi
	
	# TODO progress display, this can take quite some time!
	echo "Loading the second floppy, please wait ..."
	mount -t shm shm mnt
	if zcat floppy/initrd.gz > mnt/tmp-initrd; then
		LOADED=1
	else
		echo "This floppy seems to be bad."
		if [ "$BOOT_DEBUG" -gt 0 ]; then
			echo "This is ia debug shell."
			sh
		fi
		umount mnt
	fi
	umount floppy
done

echo "Setting up filesystem, please wait ..."
mount -o loop mnt/tmp-initrd initrd
cp -a initrd/* mnt
umount initrd

# dev will be unmounted by rcS
umount proc

echo "Starting the installer.."
cd mnt
pivot_root . initrd
mount -t proc proc proc
mount -t devfs devfs dev

# If this is messing, things can get *really* weird.
if [ ! -x /usr/sbin/chroot ]; then
	echo "Bad initrd! Cannot chroot."
	sleep 5000
fi

# Close all open files on the initrd, and run busybox init.
rm -f linuxrc # probably not busybox init
ln -s /sbin/init linuxrc
if [ "$BOOT_DEBUG" -gt 0 ]; then
	echo "This is ia debug shell, just before running the new linuxrc."
	sh
fi
exec /usr/sbin/chroot . /linuxrc <dev/console >dev/console 2>&1
