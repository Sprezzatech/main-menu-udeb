#! /bin/sh

set -e
. /usr/share/debconf/confmodule
#set -x

# This is a gross and stupid hack, but needed because of Xu's
# unwillingness to run depmod in kernel-image's postinst.  See Debian
# bug #136743

depmod -a || true

log () {
    echo "$0: $@" >>/var/log/messages
}

load_modules()
{
    old=`cat /proc/sys/kernel/printk`
    echo 0 > /proc/sys/kernel/printk
    for module in $* ; do
	modprobe $module >> /var/log/messages 2>&1
    done
    echo $old > /proc/sys/kernel/printk
}

load_floppy_driver() {
    if [ ! -d /dev/floppy ] ; then
        load_modules floppy
    fi
    if [ ! -d /dev/floppy ] ; then
        log "error: Unable to load floppy device driver"
    fi
    floppydev=/dev/floppy/0
}

log "Detecting hardware..."

# Return list of lines with "Kernel module<tab>Vendor<tab>Model"
get_hw_info() {
    /sbin/discover --format="%m\t%V\t%M\n" \
	--disable-all --enable=pci,ide,scsi,pcmcia scsi
    # Manually load modules to enable things we can't detect.
    # XXX: This isn't the best way to do this; we should autodetect.
    # The order of these packages are important. [pere 2003-03-16]
    echo "ide-mod	Unknown	Unknown"
    echo "ide-probe-mod	Unknown	Unknown"
    echo "ide-disk	Unknown	Unknown"
    #echo "i82365	Unknown	Unknown"
    #echo "sr_mod	Unknown	Unknown"
    #echo "usb-storage	Unknown	Unknown"
}

set -- `get_hw_info | wc -l`
count="$1"
log "Progress bar from 0 to $count"
db_progress START 0 $count disk-detect/progress_title

found_scsi=

# Setting IFS to adjust how the for loop splits the values
IFS_SAVE="$IFS"
IFS="
"
for device in `get_hw_info`
do
    module="`echo $device | cut -f1`"
    vendor="`echo $device | cut -f2`"
    model="`echo $device | cut -f3`"
    # Restore IFS after extracting the fields.
    IFS="$IFS_SAVE"

    if [ "$vendor" != "Unknown" ]
    then
        name="$vendor $model"
    else
        name="$model"
    fi

    log "Detected load module '$module' for '$name', progress step 1"

    if [ "$module" ]
    then
	db_subst disk-detect/progress_step MODULE "$module"
    else
	db_subst disk-detect/progress_step MODULE "[Unknown]"
    fi
    if [ "$name" ]
    then
	db_subst disk-detect/progress_step CARDNAME "$name"
    else
	db_subst disk-detect/progress_step CARDNAME "[Unknown]"
    fi
    db_progress STEP 1 disk-detect/progress_step

    if [ -n "$module" -a "$module" != "ignore" ]
    then
        log "Trying to load module '$module'"

        if modprobe -l ${module}.o | grep ${module}.o > /dev/null
        then
                :
        else
            while true
            do
	        template=disk-detect/not_included
		db_fset "$template" seen false || true
		db_subst "$template" vendor "$name" || true
		db_subst "$template" module $module || true
		db_input critical "$template" || true
		db_go || true
		db_get "$template" || true
                mounted=0
                if [ "$RET" != "true" ]
                then
                    break
                fi
                load_floppy_driver
                if mount -t ext2 $floppydev /mnt
                then
                    if [ -f /mnt/modules.tgz ]
                    then
                        mounted=1
                        break
                    fi
                    umount /mnt
                fi
            done

            if [ "$mounted" = "1" ]
            then
                log "Copying modules.tgz from ext2 modules disk... "
                gunzip -c /mnt/modules.tgz | tar xf - $module.o
                umount /mnt
                # Make sure 'depmod -a' accepts the new module
                chown -R root /lib/modules
                depmod -a
            fi
        fi

        if modprobe -l ${module}.o | grep ${module}.o > /dev/null
        then
            found_scsi=true
            if load_modules $module
            then
                :
            else
                log "Error loading driver '$module' for $vendor $model!"
	    fi
        else
            log "Could not locate driver '$module' for $vendor $model."
        fi
    fi
    IFS="
"
done
IFS="$IFS_SAVE"

log "Progress bar stop"
db_progress STOP

# always load sd_mod if a scsi controller module was loaded
if [ "$found_scsi" ] ; then
    load_modules sd_mod
fi

# If PCMCIA was detected, load the PCMCIA drivers and load cardmgr
if [ -e /proc/bus/pccard ]
then
    pcmcia=0
    if [ -e /lib/modules/*/pcmcia ]
    then
	echo "PCMCIA was detected on this system."
	while true
        do
	    echo "Please insert the modules disk and press Enter to continue, or type"
            echo -n "\`q' to skip loading PCMCIA drivers: "
            read input
            mounted=0
            if [ "$input" = "q" ]
            then
                break
            fi
            load_floppy_driver
            mount -t ext2 $floppydev /mnt
            if [ "$?" = "0" ]
            then
                if [ -f /mnt/pcmcia.tgz ]
                then
                    mounted=1
                    break
                fi
                umount /mnt
            fi
        done
        if [ "$mounted" = "1" ]
        then
            echo -n "Copying drivers from modules disk... "
            gunzip -c /mnt/pcmcia.tgz | tar xf -
            echo "done."
            umount /mnt
	    pcmcia=1
        fi
    else
	pcmcia=1
    fi

    if [ "$pcmcia" = "1" ]
    then
	gunzip /etc/pcmcia/config.gz
	/sbin/cardmgr
    fi
fi

# Hey, we're done

exit 0

