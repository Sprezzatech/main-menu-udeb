#!/bin/sh

# Get the key bit of the specified channel type
# Parameters: $1: the channel type as string (required)
# Returns: $RET: the key bit in hexadecimal notation (0x..)
get_chantype () {
	if [ -f /proc/chandev ]; then
		RET=`grep "^chan_type key bitfield" /proc/chandev | sed -e "s/.*$1=\(0x[0-9a-f]*\).*/\\1/"`
	else
		RET="0xff"
	fi
}

# Print the header for print_chandevnos
print_chandevheader () {
	if [ -f /proc/chandev ]; then
		sed -n -e "1,/^channels detected/d;/^[ =]/p" /proc/chandev
	fi
}

# Print all lines from /proc/chandev matching a specific channel type key bit
# Parameters: $1: the channel type key bit in hexadecimal notation (required)
# Returns: stdout: all matching lines, order is from /proc/chandev
print_chandevnos () {
	if [ -f /proc/chandev ]; then
		sed -n -e "1,/^channels detected/d;/^0x.... 0x.... 0x../p" /proc/chandev | /usr/lib/debian-installer/changrep $1
	fi
}

# Checks wheter a string is a member of a list
# Parameters: $1 : the string to search in the list (required)
#             $2-: the list (strings separated by spaces) (optional)
# Returns: 0 if the string was found, 1 otherwise
in_list () {
	local a=$1
	local i
	shift

	for i in $*; do
		if [ "$i" = "$a" ]; then
			return 0
		fi
	done
	return 1
}

# Return an element from a list
# Parameters: $1 : the index postion to return (required)
#             $2-: the list (strings separated by spaces) (optional)
# Returns: 0 if the string was found, 1 otherwise
#          $element: the element at the index position
element_from_list () {
	local index=$1
	local i=1
	 shift

	for element in $*; do
		if [ $i = $index ]; then
			RET=$element
			return 0
		fi
		i=`expr $i + 1`
	done
	return 1
}

# Return the number of elements in a list
# Parameters: $1 : the list (strings separated by spaces) (required)
# Returns: the number of elements in the list
list_length () {
	local element
	local i=0

	for element in $*; do
		shift
		i=`expr $i + 1`
	done
	RET=$i
}

. /usr/share/debconf/confmodule

db_title "Network Device Configuration"

available_devicetypes="ctc: Channel to Channel (CTC) or ESCON connection, lcs: OSA-Express in QDIO mode / HiperSockets, qeth: OSA-2 Token Ring/Ethernet or OSA-Express Fast Ethernet (non-QDIO), iucv: Inter-User Communication Vehicle - available for VM guests only"

db_subst s390/netcfg/choose_networktype choices "$available_devicetypes"
db_input high s390/netcfg/choose_networktype || true
db_go || true
db_get s390/netcfg/choose_networktype

devicetype=`echo $RET | sed -e "s/\(.*\): .*/\\1/"`

if [ $devicetype = "iucv" ]; then
	db_input high s390/netcfg/iucv/peer || true
	db_go || true
	db_get s390/netcfg/iucv/peer

	module_parm="iucv=$RET"
else
	if [ $devicetype = "ctc" -o $devicetype = "lcs" ]; then
		if [ $devicetype = "ctc" ]; then
			get_chantype ctc
			chantype_ctc=`printf "%d" $RET`
			get_chantype escon
			chantype_escon=`printf "%d" $RET`
			chantype=0x`printf "%x" $(($chantype_ctc + $chantype_escon))`
		else
			get_chantype lcs
			chantype=$RET
		fi

		devno_list=`print_chandevnos $chantype | cut -d\  -f2`
		list_length $devno_list
		devno_count=$RET

		if [ $devno_count -eq 0 ]; then
			if [ $devicetype = "ctc" ]; then
				db_input high s390/netcfg/ctc/no || true
			else
				db_input high s390/netcfg/lcs/no || true
			fi
			db_go || true
			return 1
		elif [ $devno_count -eq 2 ]; then
			element_from_list 1 $devno_list
			devno_read=$RET
			element_from_list 2 $devno_list
			devno_write=$RET

			if [ $devicetype = "ctc" ]; then
				db_subst s390/netcfg/ctc/confirm_one devno_read "$devno_read"
				db_subst s390/netcfg/ctc/confirm_one devno_write "$devno_write"
				db_input high s390/netcfg/ctc/confirm_one || true
			else
				db_subst s390/netcfg/lcs/confirm_one devno_read "$devno_read"
				db_subst s390/netcfg/lcs/confirm_one devno_write "$devno_write"
				db_input high s390/netcfg/lcs/confirm_one || true
			fi
			db_go || true

			if [ ! $RET ]; then
				return 1
			fi
		else
			for element in $devno_list; do
				if [ -z $choices ]; then
					choices="$element"
				else
					choices="$choices, $element"
				fi
			done

			db_subst s390/netcfg/common/get_read choices "$choices"
			db_input high s390/netcfg/common/get_read || true
			db_go || true
			db_get s390/netcfg/common/get_read

			devno_read=$RET
			RET=`printf "%d" $RET`
			devno_write=`printf "0x%04x" $(($RET + 1))`

			in_list $devno_write $devno_list

			if [ $? -ne 0 ]; then
				db_subst s390/netcfg/common/get_write choices "$choices"
				db_input high s390/netcfg/common/get_write || true
				db_go || true
				db_get s390/netcfg/common/get_write
				devno_write=$RET
			fi
		fi

		if [ $devicetype = "ctc" ]; then
			db_input high s390/netcfg/ctc/protocol || true
			db_go || true
			db_get s390/netcfg/ctc/protocol
			protocol=`echo $RET | sed -e "s/\(.*\): .*/\\1/"`

			db_subst s390/netcfg/ctc/confirm devno_read "$devno_read"
			db_subst s390/netcfg/ctc/confirm devno_write "$devno_write"
			db_subst s390/netcfg/ctc/confirm protocol "$protocol"
			db_input high s390/netcfg/ctc/confirm || true
			db_go || true

			if [ ! $RET ]; then
				return 1
			fi

			chandev_module_parm="ctc-1,$devno_read,$devno_write,0,$protocol,0,0"
		else
			db_input high s390/netcfg/lcs/port || true
			db_go || true
			db_get s390/netcfg/lcs/port
			port=`echo $RET | sed -e "s/\(.*\): .*/\\1/"`

			db_subst s390/netcfg/lcs/confirm devno_read "$devno_read"
			db_subst s390/netcfg/lcs/confirm devno_write "$devno_write"
			db_subst s390/netcfg/lcs/confirm port "$port"
			db_input high s390/netcfg/lcs/confirm || true
			db_go || true

			if [ ! $RET ]; then
				return 1
			fi

			chandev_module_parm="lcs-1,$devno_read,$devno_write,0,$port"
		fi
	elif [ $devicetype = "qeth" ]; then
		get_chantype qeth
		chantype=$RET

		devno_list=`print_chandevnos $chantype | cut -d\  -f2`
		list_length $devno_list
		devno_count=$RET

		if [ $devno_count -eq 0 ]; then
			db_input high s390/netcfg/qeth/no || true
			db_go || true
			return 1
		elif [ $devno_count -eq 3 ]; then
			element_from_list 1 $devno_list
			devno_read=$RET
			element_from_list 2 $devno_list
			devno_write=$RET
			element_from_list 3 $devno_list
			devno_data=$RET

			db_subst s390/netcfg/qeth/confirm_one devno_read "$devno_read"
			db_subst s390/netcfg/qeth/confirm_one devno_write "$devno_write"
			db_subst s390/netcfg/qeth/confirm_one devno_data "$devno_data"
			db_input high s390/netcfg/qeth/confirm_one || true
		else
			for element in $devno_list; do
				if [ -z $choices ]; then
					choices="$element"
				else
					choices="$choices, $element"
				fi
			done

			db_subst s390/netcfg/common/get_read choices "$choices"
			db_input high s390/netcfg/common/get_read || true
			db_go || true
			db_get s390/netcfg/common/get_read

			devno_read=$RET
			RET=`printf "%d" $RET`
			devno_write=`printf "0x%04x" $(($RET + 1))`

			in_list $devno_write $devno_list

			if [ $? -ne 0 ]; then
				chandev_not_linear=1
				db_subst s390/netcfg/common/get_write choices "$choices"
				db_input high s390/netcfg/common/get_write || true
				db_go || true
				db_get s390/netcfg/common/get_write

				devno_write=$RET
				RET=`printf "%d" $RET`
				devno_data=`printf "0x%04x" $(($RET + 1))`

				in_list $devno_data $devno_list

				if [ $? -ne 0 ]; then
					db_subst s390/netcfg/common/get_data choices "$choices"
					db_input high s390/netcfg/common/get_data || true
					db_go || true
					db_get s390/netcfg/common/get_data
					devno_data=$RET
				fi
			fi
		fi

		db_input high s390/netcfg/qeth/port || true
		db_go || true
		db_get s390/netcfg/qeth/port
		port=`echo $RET | sed -e "s/\(.*\): .*/\\1/"`

		db_subst s390/netcfg/qeth/confirm devno_read "$devno_read"
		db_subst s390/netcfg/qeth/confirm devno_write "$devno_write"
		db_subst s390/netcfg/qeth/confirm devno_data "$devno_data"
		db_subst s390/netcfg/qeth/confirm port "$port"
		db_input high s390/netcfg/qeth/confirm || true
		db_go || true

		if [ ! $RET ]; then
			return 1
		fi

		db_input high s390/netcfg/qeth/portname || true
		db_go || true
		db_get s390/netcfg/qeth/portname

		if [ $RET ]; then
			portname=`echo $RET | tr [a-z] [A-Z]`

			if [ $chandev_not_linear -ne 0 ]; then
				chandev_parm="add_parms,$chantype,0x0000,0xffff,portname:$portname"
			else
				chandev_parm="add_parms,$chantype,$devno_read,$devno_data,portname:$portname"
			fi
		fi

		chandev_module_parm="qeth-1,$devno_read,$devno_write,$devno_data,0,$port"
	fi

	mkdir /etc/modutils

	if [ $chandev_parm ]; then
		echo "$chandev_parm" >> /etc/modutils/0chandev.chandev
		echo "$chandev_parm" > /proc/chandev
        fi

	echo "$chandev_module_parm" >> /etc/modutils/$devicetype.chandev
	echo "$chandev_module_parm" > /proc/chandev

	echo "reprobe" > /proc/chandev
fi

grep -q ^$devicetype /proc/modules
if [ $? -eq 0 ]; then
	rmmod -s $devicetype
fi

modprobe $devicetype $module_parm

