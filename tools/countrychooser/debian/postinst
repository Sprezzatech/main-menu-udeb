#!/bin/sh
set -e

. /usr/share/debconf/confmodule

db_capb backup

# This should match the INDENT variable in mktemplates.
INDENT="Â   "

localecode="debian-installer/locale"
languagechooserlocalecode="languagechooser/locale"
languagecode="debian-installer/language"
countrycode="debian-installer/country"
languagechooserlanguage="languagechooser/language-name"

# This is the iso_3166.tab file location
ISO3166TAB=/etc/iso_3166.tab

for list in $ISO3166TAB ; do 
	if [ -f "$list" ]; then
		countries="$list"
	fi
done

error() {
	logger -t countrychooser "error: $@"
	exit 1
}

log() {
	logger -t countrychooser "info: $@"
}

code2country() {
	COUNTRYCODE="$1"
	line=`grep "$COUNTRYCODE" $countries`

	if [ -n "$line" ]; then
		# Remember that country names may have spaces so the code
		# is different than in countrymap.
		printf "$INDENT"
		echo $line | cut -b 4-
	else
		error "Unable to locate info on country '$COUNTRYCODE'"
	fi
}

country2code() {
	COUNTRYNAME=$(echo "$1" | sed "s/^$INDENT//")
	line=`grep "$COUNTRYNAME$" $countries`

	if [ -n "$line" ]; then
		set $line
		if [ -n "$1" ]; then
			echo "$1"
		fi
	fi
}

# First grab back the country we got from languagechooser
# (or from elsewhere) and populate the debconf database with
# it so that it becomes the default choice
db_get "$countrycode"
if [ -n "$RET" ]; then
	# Remember which code was first used
	# This is needed at the end of the script
	COUNTRYCODE_LANGUAGECHOOSER="$RET"
	COUNTRY_LANGUAGECHOOSER="$(code2country "$RET")"
	db_set "countrychooser/country-name" "${COUNTRY_LANGUAGECHOOSER}"
	db_set "countrychooser/country-name-shortlist" "${COUNTRY_LANGUAGECHOOSER}"
fi

# Then grab back the language we got from languagechooser
db_get "$languagechooserlanguage"
if [ -n "$RET" ]; then
   LANGNAME="$RET"
    # languagemap is a script from languagechooser	    
    # languagemap returns the language list in LANGUAGELIST
    # languagemap returns the language alone in LANGUAGE
    # if languagemap couldn't be found
    # fall back to C
    if ! . languagemap ; then
	LANGUAGE=C
    fi
fi

# Then grab back the locale we got from languagechooser
db_get "$localecode"
if [ -n "$RET" ]; then
   DEFAULTLOCALE="$RET"
else
   # Just in case
   DEFAULTLOCALE="C"
fi

# At this step we should have either xx, or xx_YY in LANGNAME
while :; do
	# Build up the Choices list from the language selection
	shortlistcodes=`cat /etc/SUPPORTED-short | grep -e "^$LANGUAGE"|cut -b 4-5|sort|uniq`
	SHORTLIST=''
	for code in $shortlistcodes; do
	    line=`grep -e "^$code" $ISO3166TAB`
	    if [ "$line" ] ; then
		OLD_IFS="$IFS"
		IFS='	'
		set $line
		IFS="$OLD_IFS"
		if [ "$2" ] ; then countryname="${INDENT}$2"; fi
		if [ ! -z "${SHORTLIST}" ]; then
		    SHORTLIST="${SHORTLIST}, "
		fi
		SHORTLIST="${SHORTLIST}${countryname}"
	    fi
	done
	db_subst "countrychooser/country-name-shortlist" SHORTLIST "${SHORTLIST}"
	db_subst "countrychooser/country-name-shortlist" DEFAULTLOCALE "${DEFAULTLOCALE}"
	db_input critical "countrychooser/country-name-shortlist" || [ $? -eq 30 ]
        if ! db_go; then
		exit 10 # back up
	fi
	db_get "countrychooser/country-name-shortlist"
	if [ -z "$RET" ]; then
	    # Should not happen, but fall back to Others
	    RET="Others"
	fi
	if [ "$RET" = "Others" ]; then
	    db_subst "countrychooser/country-name" DEFAULTLOCALE "${DEFAULTLOCALE}"
	    db_input critical "countrychooser/country-name" || [ $? -eq 30 ]
	    if ! db_go; then
		exit 10 # back up
	    fi
	    db_get "countrychooser/country-name"
	fi
	COUNTRYCODE="$(country2code "$RET")" || true
	if [ -n "$COUNTRYCODE" ]; then
		break
	else
		# If the code cannot be found, the user probably
		# selected a while region.
		# TODO display error message?
		:
	fi
done

db_set "$countrycode"  "$COUNTRYCODE"
log "$countrycode = '$COUNTRYCODE'"

# Now set the locale
#
# We do this only if one of the supported countries has been chosen
db_get "countrychooser/country-name-shortlist"
if [ "$RET" != "Others" ]; then
   LOCALE=${LANGUAGE}_${COUNTRYCODE}
   db_set "$localecode" "${LOCALE}"
   log "$localecode = '${LOCALE}'"
fi

# The code below tries to add lang_COUNTRY at the beginning of the language
# list we got from languagechooser
# Example:
#   -user chooses "Arabic" at languagechooser-->she gets "ar_EG:ar:en_US:en"
#    (see the languagelist file from languagechooser)
#   -shes chooses "Syria" as country-->then we end up with 
#    "ar_SY:ar_EG:ar:en_UC:en"
# We shouldn't just add this before the former list in case the country 
# is changed several times.
#
if [ "$COUNTRYCODE" != "$COUNTRYCODE_LANGUAGECHOOSER" -a -n "$COUNTRYCODE" -a -n $LANGUAGE ]; then
	LANGUAGELIST=${LANGUAGE}_${COUNTRYCODE}:${LANGUAGELIST}
	# Languagelist setting
	db_set "$languagecode" "$LANGUAGELIST"
	log "$languagecode = '$LANGUAGELIST'"
fi

exit 0
