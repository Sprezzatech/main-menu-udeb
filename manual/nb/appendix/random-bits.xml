<!-- Start of file appendix/random-bits.xml -->
<!-- $Id: random-bits.xml 45239 2007-02-18 19:38:12Z fjp $ -->

<appendix id="random-bits"
><title
>Random Bits</title>


<!-- Start of file appendix/files.xml -->
<!-- $Id: files.xml 51571 2008-02-25 11:35:07Z cjwatson $ -->


 <sect1 id="linuxdevices"
><title
>Linux Devices</title>
<para
>In Linux various special files can be found under the directory <filename
>/dev</filename
>. These files are called device files and behave unlike ordinary files. The most common types of device files are for block devices and character devices. These files are an interface to the actual driver (part of the Linux kernel) which in turn accesses the hardware. Another, less common, type of device file is the named <firstterm
>pipe</firstterm
>. The most important device files are listed in the tables below. </para
><para>

<informaltable
><tgroup cols="2"
><tbody>
<row>
  <entry
><filename
>fd0</filename
></entry>
  <entry
>First Floppy Drive</entry>
</row
><row>
  <entry
><filename
>fd1</filename
></entry>
  <entry
>Second Floppy Drive</entry>
</row>
</tbody
></tgroup
></informaltable>

<informaltable
><tgroup cols="2"
><tbody>
<row>
  <entry
><filename
>hda</filename
></entry>
  <entry
>IDE Hard disk / CD-ROM on the first IDE port (Master)</entry>
</row
><row>
  <entry
><filename
>hdb</filename
></entry>
  <entry
>IDE Hard disk / CD-ROM on the first IDE port (Slave)</entry>
</row
><row>
  <entry
><filename
>hdc</filename
></entry>
  <entry
>IDE Hard disk / CD-ROM on the second IDE port (Master)</entry>
</row
><row>
  <entry
><filename
>hdd</filename
></entry>
  <entry
>IDE Hard disk / CD-ROM on the second IDE port (Slave)</entry>
</row
><row>
  <entry
><filename
>hda1</filename
></entry>
  <entry
>First partition of the first IDE hard disk</entry>
</row
><row>
  <entry
><filename
>hdd15</filename
></entry>
  <entry
>Fifteenth partition of the fourth IDE hard disk</entry>
</row>
</tbody
></tgroup
></informaltable>

<informaltable
><tgroup cols="2"
><tbody>
<row>
  <entry
><filename
>sda</filename
></entry>
  <entry
>SCSI Hard disk with lowest SCSI ID (e.g. 0)</entry>
</row
><row>
  <entry
><filename
>sdb</filename
></entry>
  <entry
>SCSI Hard disk with next higher SCSI ID (e.g. 1)</entry>
</row
><row>
  <entry
><filename
>sdc</filename
></entry>
  <entry
>SCSI Hard disk with next higher SCSI ID (e.g. 2)</entry>
</row
><row>
  <entry
><filename
>sda1</filename
></entry>
  <entry
>First partition of the first SCSI hard disk</entry>
</row
><row>
  <entry
><filename
>sdd10</filename
></entry>
  <entry
>Tenth partition of the fourth SCSI hard disk</entry>
</row>
</tbody
></tgroup
></informaltable>

<informaltable
><tgroup cols="2"
><tbody>
<row>
  <entry
><filename
>sr0</filename
></entry>
  <entry
>SCSI CD-ROM with the lowest SCSI ID</entry>
</row
><row>
  <entry
><filename
>sr1</filename
></entry>
  <entry
>SCSI CD-ROM with the next higher SCSI ID</entry>
</row>
</tbody
></tgroup
></informaltable>

<informaltable
><tgroup cols="2"
><tbody>
<row>
  <entry
><filename
>ttyS0</filename
></entry>
  <entry
>Serial port 0, COM1 under MS-DOS</entry>
</row
><row>
  <entry
><filename
>ttyS1</filename
></entry>
  <entry
>Serial port 1, COM2 under MS-DOS</entry>
</row
><row>
  <entry
><filename
>psaux</filename
></entry>
  <entry
>PS/2 mouse device</entry>
</row
><row>
  <entry
><filename
>gpmdata</filename
></entry>
  <entry
>Pseudo device, repeater data from GPM (mouse) daemon</entry>
</row>
</tbody
></tgroup
></informaltable>

<informaltable
><tgroup cols="2"
><tbody>
<row>
  <entry
><filename
>cdrom</filename
></entry>
  <entry
>Symbolic link to the CD-ROM drive</entry>
</row
><row>
  <entry
><filename
>mouse</filename
></entry>
  <entry
>Symbolic link to the mouse device file</entry>
</row>
</tbody
></tgroup
></informaltable>

<informaltable
><tgroup cols="2"
><tbody>
<row>
  <entry
><filename
>null</filename
></entry>
  <entry
>Anything written to this device will disappear</entry>
</row
><row>
  <entry
><filename
>zero</filename
></entry>
  <entry
>One can endlessly read zeros out of this device</entry>
</row>
</tbody
></tgroup
></informaltable>

</para>

  <sect2 arch="not-s390" id="device-mouse">
  <title
>Setting Up Your Mouse</title>
<para
>The mouse can be used in both the Linux console (with gpm) and the X window environment. Normally, this is a simple matter of installing <filename
>gpm</filename
> and the X server itself. Both should be configured to use <filename
>/dev/input/mice</filename
> as the mouse device. The correct mouse protocol is named <userinput
>exps2</userinput
> in gpm, and <userinput
>ExplorerPS/2</userinput
> in X. The respective configuration files are <filename
>/etc/gpm.conf</filename
> and <filename
>/etc/X11/xorg.conf</filename
>. </para
><para
>Certain kernel modules must be loaded in order for your mouse to work. In most cases the correct modules are autodetected, but not always for old-style serial and bus mice<footnote
> <para
> Serial mice usually have a 9-hole D-shaped connector; bus mice have an 8-pin round connector, not to be confused with the 6-pin round connector of a PS/2 mouse or the 4-pin round connector of an ADB mouse. </para
> </footnote
>, which are quite rare except on very old computers. Summary of Linux kernel modules needed for different mouse types: <informaltable
><tgroup cols="2"
><thead
> <row
> <entry
>Module</entry
> <entry
>Description</entry
> </row
> </thead
><tbody
> <row
> <entry
>psmouse</entry
> <entry
>PS/2 mice (should be autodetected)</entry
> </row
> <row
> <entry
>usbhid</entry
> <entry
>USB mice (should be autodetected)</entry
> </row
> <row
> <entry
>sermouse</entry
> <entry
>Most serial mice</entry
> </row
> <row
> <entry
>logibm</entry
> <entry
>Bus mouse connected to Logitech adapter card</entry
> </row
> <row
> <entry
>inport</entry
> <entry
>Bus mouse connected to ATI or Microsoft InPort card</entry
> </row
> </tbody
></tgroup
></informaltable
> To load a mouse driver module, you can use the <command
>modconf</command
> command (from the package with the same name) and look in the category <userinput
>kernel/drivers/input/mouse</userinput
>. </para
><para arch="powerpc"
>Modern kernels give you the capability to emulate a three-button mouse when your mouse only has one button. Just add the following lines to <filename
>/etc/sysctl.conf</filename
> file. <informalexample
><screen
># 3-button mouse emulation
# turn on emulation
/dev/mac_hid/mouse_button_emulation = 1
# Send middle mouse button signal with the F11 key
/dev/mac_hid/mouse_button2_keycode = 87
# Send right mouse button signal with the F12 key
/dev/mac_hid/mouse_button3_keycode = 88
# For different keys, use showkey to tell you what the code is.
</screen
></informalexample>

</para>
  </sect2>
 </sect1>

 <sect1 id="tasksel-size-list">
 <title
>Disk Space Needed for Tasks</title>
<para
>A standard installation for the i386 architecture, including all standard packages and using the default 2.6 kernel, takes up &std-system-size;MB of disk space. A minimal base installation, without the <quote
>Standard system</quote
> task selected, will take &base-system-size;MB. </para>
<important
><para
>In both cases this is the actual disk space used <emphasis
>after</emphasis
> the installation is finished and any temporary files deleted. It also does not take into account overhead used by the file system, for example for journal files. This means that significantly more disk space is needed both <emphasis
>during</emphasis
> the installation and for normal system use. </para
></important>
<para
>The following table lists sizes reported by aptitude for the tasks listed in tasksel. Note that some tasks have overlapping constituents, so the total installed size for two tasks together may be less than the total obtained by adding up the numbers. </para
><para
>Note that you will need to add the sizes listed in the table to the size of the standard installation when determining the size of partitions. Most of the size listed as <quote
>Installed size</quote
> will end up in <filename
>/usr</filename
> and in <filename
>/lib</filename
>; the size listed as <quote
>Download size</quote
> is (temporarily) required in <filename
>/var</filename
>. </para
><para>

<informaltable
><tgroup cols="4">
<thead>
<row>
  <entry
>Task</entry>
  <entry
>Installed size (MB)</entry>
  <entry
>Download size (MB)</entry>
  <entry
>Space needed to install (MB)</entry>
</row>
</thead>

<tbody>
<row>
  <entry
>Desktop environment</entry>
  <entry
>&task-desktop-inst;</entry>
  <entry
>&task-desktop-dl;</entry>
  <entry
>&task-desktop-tot;</entry>
</row>

<row>
  <entry
>Laptop<footnote
> <para
>There is some overlap of the Laptop task with the Desktop environment task. If you install both, the Laptop task will only require a few MB additional disk space. </para>

  </footnote
></entry>
  <entry
>&task-laptop-inst;</entry>
  <entry
>&task-laptop-dl;</entry>
  <entry
>&task-laptop-tot;</entry>
</row>

<row>
  <entry
>Web server</entry>
  <entry
>&task-web-inst;</entry>
  <entry
>&task-web-dl;</entry>
  <entry
>&task-web-tot;</entry>
</row>

<row>
  <entry
>Print server</entry>
  <entry
>&task-print-inst;</entry>
  <entry
>&task-print-dl;</entry>
  <entry
>&task-print-tot;</entry>
</row>

<row>
  <entry
>DNS server</entry>
  <entry
>&task-dns-inst;</entry>
  <entry
>&task-dns-dl;</entry>
  <entry
>&task-dns-tot;</entry>
</row>

<row>
  <entry
>File server</entry>
  <entry
>&task-file-inst;</entry>
  <entry
>&task-file-dl;</entry>
  <entry
>&task-file-tot;</entry>
</row>

<row>
  <entry
>Mail server</entry>
  <entry
>&task-mail-inst;</entry>
  <entry
>&task-mail-dl;</entry>
  <entry
>&task-mail-tot;</entry>
</row>

<row>
  <entry
>SQL database</entry>
  <entry
>&task-sql-inst;</entry>
  <entry
>&task-sql-dl;</entry>
  <entry
>&task-sql-tot;</entry>
</row>

</tbody>
</tgroup
></informaltable>

<note
><para
>The <emphasis
>Desktop</emphasis
> task will install the GNOME desktop environment. </para
></note>

</para
><para
>If you install in a language other than English, <command
>tasksel</command
> may automatically install a <firstterm
>localization task</firstterm
>, if one is available for your language. Space requirements differ per language; you should allow up to 350MB in total for download and installation. </para>
 </sect1>
<!--   End of file appendix/files.xml -->

<!-- Start of file appendix/chroot-install.xml -->
<!-- $Id: chroot-install.xml 55631 2008-09-06 15:06:58Z tbm $ -->

 <sect1 id="linux-upgrade">
 <title
>Installing &debian; from a Unix/Linux System</title>

<para
>This section explains how to install &debian; from an existing Unix or Linux system, without using the menu-driven installer as explained in the rest of the manual. This <quote
>cross-install</quote
> HOWTO has been requested by users switching to &debian; from Red Hat, Mandrake, and SUSE. In this section some familiarity with entering *nix commands and navigating the file system is assumed. In this section, <prompt
>$</prompt
> symbolizes a command to be entered in the user's current system, while <prompt
>#</prompt
> refers to a command entered in the Debian chroot. </para
><para
>Once you've got the new Debian system configured to your preference, you can migrate your existing user data (if any) to it, and keep on rolling. This is therefore a <quote
>zero downtime</quote
> &debian; install. It's also a clever way for dealing with hardware that otherwise doesn't play friendly with various boot or installation media. </para>

<note
><para
>As this is a mostly manual procedure, you should bear in mind that you will need to do a lot of basic configuration of the system yourself, which will also require more knowledge of Debian and of Linux in general than performing a regular installation. You cannot expect this procedure to result in a system that is identical to a system from a regular installation. You should also keep in mind that this procedure only gives the basic steps to set up a system. Additional installation and/or configuration steps may be needed. </para
></note>

  <sect2>
  <title
>Getting Started</title>
<para
>With your current *nix partitioning tools, repartition the hard drive as needed, creating at least one filesystem plus swap. You need around 350MB of space available for a console only install, or about 1GB if you plan to install X (more if you intend to install desktop environments like GNOME or KDE). </para
><para
>Next, create file systems on the partitions. For example, to create an ext3 file system on partition <filename
>/dev/hda6</filename
> (that's our example root partition): <informalexample
><screen
>
# mke2fs -j /dev/<replaceable>hda6</replaceable>
</screen
></informalexample
> To create an ext2 file system instead, omit <userinput
>-j</userinput
>. </para
><para
>Initialize and activate swap (substitute the partition number for your intended Debian swap partition): <informalexample
><screen
>
# mkswap /dev/<replaceable>hda5</replaceable>
# sync; sync; sync
# swapon /dev/<replaceable>hda5</replaceable>
</screen
></informalexample
> Mount one partition as <filename
>/mnt/debinst</filename
> (the installation point, to be the root (<filename
>/</filename
>) filesystem on your new system). The mount point name is strictly arbitrary, it is referenced later below. <informalexample
><screen
># mkdir /mnt/debinst
# mount /dev/<replaceable>hda6</replaceable> /mnt/debinst
</screen
></informalexample>

</para>
<note
><para
>If you want to have parts of the filesystem (e.g. /usr) mounted on separate partitions, you will need to create and mount these directories manually before proceding with the next stage. </para
></note>
  </sect2>

  <sect2>
  <title
>Install <command
>debootstrap</command
></title>
<para
>The utility used by the Debian installer, and recognized as the official way to install a Debian base system, is <command
>debootstrap</command
>. It uses <command
>wget</command
> and <command
>ar</command
>, but otherwise depends only on <classname
>/bin/sh</classname
> and basic Unix/Linux tools<footnote
> <para
> These include the GNU core utilities and commands like <command
>sed</command
>, <command
>grep</command
>, <command
>tar</command
> and <command
>gzip</command
>. </para
> </footnote
>. Install <command
>wget</command
> and <command
>ar</command
> if they aren't already on your current system, then download and install <command
>debootstrap</command
>. </para>

<!-- The files linked to here are from 2004 and thus currently not usable
<para>

If you have an rpm-based system, you can use alien to convert the
.deb into .rpm, or download an rpm-ized version at
<ulink url="http://people.debian.org/~blade/install/debootstrap"
></ulink>

</para>
-->

<para
>Or, you can use the following procedure to install it manually. Make a work folder for extracting the .deb into: <informalexample
><screen
>
# mkdir work
# cd work
</screen
></informalexample
> The <command
>debootstrap</command
> binary is located in the Debian archive (be sure to select the proper file for your architecture). Download the <command
>debootstrap</command
> .deb from the <ulink url="http://ftp.debian.org/debian/pool/main/d/debootstrap/"
> pool</ulink
>, copy the package to the work folder, and extract the files from it. You will need to have root privileges to install the files. <informalexample
><screen
># ar -x debootstrap_0.X.X_all.deb
# cd /
# zcat /full-path-to-work/work/data.tar.gz | tar xv
</screen
></informalexample>

</para>
  </sect2>

  <sect2>
  <title
>Run <command
>debootstrap</command
></title>
<para
><command
>debootstrap</command
> can download the needed files directly from the archive when you run it. You can substitute any Debian archive mirror for <userinput
>&archive-mirror;/debian</userinput
> in the command example below, preferably a mirror close to you network-wise. Mirrors are listed at <ulink url="http://www.debian.org/misc/README.mirrors"
></ulink
>. </para
><para
>If you have a &releasename; &debian; CD mounted at <filename
>/cdrom</filename
>, you could substitute a file URL instead of the http URL: <userinput
>file:/cdrom/debian/</userinput
> </para
><para
>Substitute one of the following for <replaceable
>ARCH</replaceable
> in the <command
>debootstrap</command
> command: <userinput
>alpha</userinput
>, <userinput
>amd64</userinput
>, <userinput
>arm</userinput
>, <userinput
>armel</userinput
>, <userinput
>hppa</userinput
>, <userinput
>i386</userinput
>, <userinput
>ia64</userinput
>, <userinput
>m68k</userinput
>, <userinput
>mips</userinput
>, <userinput
>mipsel</userinput
>, <userinput
>powerpc</userinput
>, <userinput
>s390</userinput
>, or <userinput
>sparc</userinput
>. <informalexample
><screen
># /usr/sbin/debootstrap --arch ARCH &releasename; \
     /mnt/debinst http://ftp.us.debian.org/debian
</screen
></informalexample>

</para>
  </sect2>

  <sect2>
  <title
>Configure The Base System</title>
<para
>Now you've got a real Debian system, though rather lean, on disk. <command
>chroot</command
> into it: <informalexample
><screen
>
# LANG=C chroot /mnt/debinst /bin/bash
</screen
></informalexample
> After chrooting you may need to set the terminal definition to be compatible with the Debian base system, for example: <informalexample
><screen
># export TERM=<replaceable>xterm-color</replaceable>
</screen
></informalexample>

</para>

   <sect3>
   <title
>Create device files</title>
<para
>At this point <filename
>/dev/</filename
> only contains very basic device files. For the next steps of the installation additional device files may be needed. There are different ways to go about this and which method you should use depends on the host system you are using for the installation, on whether you intend to use a modular kernel or not, and on whether you intend to use dynamic (e.g. using <classname
>udev</classname
>) or static device files for the new system. </para
><para
>A few of the available options are: <itemizedlist>
<listitem
><para
>create a default set of static device files using <informalexample
><screen
># cd /dev
# MAKEDEV generic
</screen
></informalexample>

</para
></listitem>
<listitem
><para
>manually create only specific device files using <command
>MAKEDEV</command
> </para
></listitem>
<listitem
><para
>bind mount /dev from your host system on top of /dev in the target system; note that the postinst scripts of some packages may try to create device files, so this option should only be used with care </para
></listitem>
</itemizedlist>

</para>
   </sect3>

   <sect3>
   <title
>Mount Partitions</title>
<para
>You need to create <filename
>/etc/fstab</filename
>. <informalexample
><screen
>
# editor /etc/fstab
</screen
></informalexample
> Here is a sample you can modify to suit: <informalexample
><screen
>
# /etc/fstab: static file system information.
#
# file system    mount point   type    options                  dump pass
/dev/XXX         /             ext3    defaults                 0    1
/dev/XXX         /boot         ext3    ro,nosuid,nodev          0    2

/dev/XXX         none          swap    sw                       0    0
proc             /proc         proc    defaults                 0    0

/dev/fd0         /media/floppy auto    noauto,rw,sync,user,exec 0    0
/dev/cdrom       /media/cdrom  iso9660 noauto,ro,user,exec      0    0

/dev/XXX         /tmp          ext3    rw,nosuid,nodev          0    2
/dev/XXX         /var          ext3    rw,nosuid,nodev          0    2
/dev/XXX         /usr          ext3    rw,nodev                 0    2
/dev/XXX         /home         ext3    rw,nosuid,nodev          0    2
</screen
></informalexample
> Use <userinput
>mount -a</userinput
> to mount all the file systems you have specified in your <filename
>/etc/fstab</filename
>, or, to mount file systems individually, use: <informalexample
><screen
>
# mount /path   # e.g.: mount /usr
</screen
></informalexample
> Current Debian systems have mountpoints for removable media under <filename
>/media</filename
>, but keep compatibility symlinks in <filename
>/</filename
>. Create these as as needed, for example: <informalexample
><screen
>
# cd /media
# mkdir cdrom0
# ln -s cdrom0 cdrom
# cd /
# ln -s media/cdrom
</screen
></informalexample
> You can mount the proc file system multiple times and to arbitrary locations, though <filename
>/proc</filename
> is customary. If you didn't use <userinput
>mount -a</userinput
>, be sure to mount proc before continuing: <informalexample
><screen
># mount -t proc proc /proc
</screen
></informalexample>

</para
><para
>The command <userinput
>ls /proc</userinput
> should now show a non-empty directory. Should this fail, you may be able to mount proc from outside the chroot: <informalexample
><screen
># mount -t proc proc /mnt/debinst/proc
</screen
></informalexample>

</para>
   </sect3>

   <sect3>
   <title
>Setting Timezone</title>
<para
>An option in the file <filename
>/etc/default/rcS</filename
> determines whether the system will interpret the hardware clock as being set to UTC or local time. The following command allow you to set that and choose your timezone. <informalexample
><screen
># editor /etc/default/rcS
# tzconfig
</screen
></informalexample>

</para>
   </sect3>

   <sect3>
   <title
>Configure Networking</title>
<para
>To configure networking, edit <filename
>/etc/network/interfaces</filename
>, <filename
>/etc/resolv.conf</filename
>, <filename
>/etc/hostname</filename
> and <filename
>/etc/hosts</filename
>. <informalexample
><screen
>
# editor /etc/network/interfaces
</screen
></informalexample
> Here are some simple examples from <filename
>/usr/share/doc/ifupdown/examples</filename
>: <informalexample
><screen
>
######################################################################
# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)
# See the interfaces(5) manpage for information on what options are
# available.
######################################################################

# We always want the loopback interface.
#
auto lo
iface lo inet loopback

# To use dhcp:
#
# auto eth0
# iface eth0 inet dhcp

# An example static IP setup: (broadcast and gateway are optional)
#
# auto eth0
# iface eth0 inet static
#     address 192.168.0.42
#     network 192.168.0.0
#     netmask 255.255.255.0
#     broadcast 192.168.0.255
#     gateway 192.168.0.1
</screen
></informalexample
> Enter your nameserver(s) and search directives in <filename
>/etc/resolv.conf</filename
>: <informalexample
><screen
>
# editor /etc/resolv.conf
</screen
></informalexample
> A simple example <filename
>/etc/resolv.conf</filename
>: <informalexample
><screen
>
search hqdom.local
nameserver 10.1.1.36
nameserver 192.168.9.100
</screen
></informalexample
> Enter your system's host name (2 to 63 characters): <informalexample
><screen
>
# echo DebianHostName &gt; /etc/hostname
</screen
></informalexample
> And a basic <filename
>/etc/hosts</filename
> with IPv6 support: <informalexample
><screen
>
127.0.0.1 localhost DebianHostName

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
</screen
></informalexample
> If you have multiple network cards, you should arrange the names of driver modules in the <filename
>/etc/modules</filename
> file into the desired order. Then during boot, each card will be associated with the interface name (eth0, eth1, etc.) that you expect. </para>
   </sect3>

   <sect3>
   <title
>Configure Apt</title>
<para
>Debootstrap will have created a very basic <filename
>/etc/apt/sources.list</filename
> that will allow installing additional packages. However, you may want to add some additional sources, for example for source packages and security updates: <informalexample
><screen
>
deb-src http://ftp.us.debian.org/debian &releasename; main

deb http://security.debian.org/ &releasename;/updates main
deb-src http://security.debian.org/ &releasename;/updates main
</screen
></informalexample
> Make sure to run <userinput
>aptitude update</userinput
> after you have made changes to the sources list. </para>
   </sect3>

   <sect3>
   <title
>Configure Locales and Keyboard</title>
<para
>To configure your locale settings to use a language other than English, install the <classname
>locales</classname
> support package and configure it. Currently the use of UTF-8 locales is recommended. <informalexample
><screen
>
# aptitude install locales
# dpkg-reconfigure locales
</screen
></informalexample
> To configure your keyboard (if needed): <informalexample
><screen
># aptitude install console-data
# dpkg-reconfigure console-data
</screen
></informalexample>

</para
><para
>Note that the keyboard cannot be set while in the chroot, but will be configured for the next reboot. </para>
   </sect3>
  </sect2>

  <sect2>
  <title
>Install a Kernel</title>
<para
>If you intend to boot this system, you probably want a Linux kernel and a boot loader. Identify available pre-packaged kernels with: <informalexample
><screen
># apt-cache search linux-image
</screen
></informalexample>

</para
><para
>If you intend to use a pre-packaged kernel, you may want to create the configuration file <filename
>/etc/kernel-img.conf</filename
> before you do so. Here's an example file: <informalexample
><screen
># Kernel image management overrides
# See kernel-img.conf(5) for details
do_symlinks = yes
relative_links = yes
do_bootloader = yes
do_bootfloppy = no
do_initrd = yes
link_in_boot = no
</screen
></informalexample>

</para
><para
>For detailed information about this file and the various options, consult its man page which will be available after installing the <classname
>kernel-package</classname
> package. We recommend that you check that the values are appropriate for your system. </para
><para
>Then install the kernel package of your choice using its package name. <informalexample
><screen
>
# aptitude install linux-image-<replaceable>&kernelversion;-arch-etc</replaceable>
</screen
></informalexample
> If you did not create a <filename
>/etc/kernel-img.conf</filename
> before installing a pre-packaged kernel, you may be asked some questions during its installation that refer to it. </para>
  </sect2>

  <sect2>
<title
>Set up the Boot Loader</title>
<para
>To make your &debian; system bootable, set up your boot loader to load the installed kernel with your new root partition. Note that <command
>debootstrap</command
> does not install a boot loader, though you can use <command
>aptitude</command
> inside your Debian chroot to do so. </para
><para arch="x86"
>Check <userinput
>info grub</userinput
> or <userinput
>man lilo.conf</userinput
> for instructions on setting up the bootloader. If you are keeping the system you used to install Debian, just add an entry for the Debian install to your existing grub <filename
>menu.lst</filename
> or <filename
>lilo.conf</filename
>. For <filename
>lilo.conf</filename
>, you could also copy it to the new system and edit it there. After you are done editing, call <command
>lilo</command
> (remember it will use <filename
>lilo.conf</filename
> relative to the system you call it from). </para
><para arch="x86"
>Installing and setting up <classname
>grub</classname
> is as easy as: <informalexample
><screen
>
# aptitude install grub
# grub-install /dev/<replaceable>hda</replaceable>
# update-grub
</screen
></informalexample
> The second command will install <command
>grub</command
> (in this case in the MBR of <literal
>hda</literal
>). The last command will create a sane and working <filename
>/boot/grub/menu.lst</filename
>. </para
><para
>Note that this assumes that a <filename
>/dev/hda</filename
> device file has been created. There are alternative methods to install <command
>grub</command
>, but those are outside the scope of this appendix. </para
><para arch="x86"
>Here is a basic <filename
>/etc/lilo.conf</filename
> as an example: <informalexample
><screen
>boot=/dev/<replaceable>hda6</replaceable>
root=/dev/<replaceable>hda6</replaceable>
install=menu
delay=20
lba32
image=/vmlinuz
initrd=/initrd.img
label=Debian
</screen
></informalexample>

</para
><para arch="x86"
>Depending on which bootloader you selected, you can now make some additional changes in <filename
>/etc/kernel-img.conf</filename
>. </para
><para arch="x86"
>For the <classname
>grub</classname
> bootloader, you should set the <literal
>do_bootloader</literal
> option to <quote
>no</quote
>. And to automatically update your <filename
>/boot/grub/menu.lst</filename
> on installation or removal of Debian kernels, add the following lines: <informalexample
><screen
>
postinst_hook = update-grub
postrm_hook   = update-grub
</screen
></informalexample
> For the <classname
>lilo</classname
> bootloader, the value of <literal
>do_bootloader</literal
> needs to remain <quote
>yes</quote
>. </para
><para arch="powerpc"
>Check <userinput
>man yaboot.conf</userinput
> for instructions on setting up the bootloader. If you are keeping the system you used to install Debian, just add an entry for the Debian install to your existing <filename
>yaboot.conf</filename
>. You could also copy it to the new system and edit it there. After you are done editing, call ybin (remember it will use <filename
>yaboot.conf</filename
> relative to the system you call it from). </para
><para arch="powerpc"
>Here is a basic <filename
>/etc/yaboot.conf</filename
> as an example: <informalexample
><screen
>
boot=/dev/hda2
device=hd:
partition=6
root=/dev/hda6
magicboot=/usr/lib/yaboot/ofboot
timeout=50
image=/vmlinux
label=Debian
</screen
></informalexample
> On some machines, you may need to use <userinput
>ide0:</userinput
> instead of <userinput
>hd:</userinput
>. </para>
  </sect2>

  <sect2>
<title
>Finishing touches</title>
<para
>As mentioned earlier, the installed system will be very basic. If you would like to make the system a bit more mature, there is an easy method to install all packages with <quote
>standard</quote
> priority: <informalexample
><screen
>
# tasksel install standard
</screen
></informalexample
> Of course, you can also just use <command
>aptitude</command
> to install packages individually. </para
><para
>After the installation there will be a lot of downloaded packages in <filename
>/var/cache/apt/archives/</filename
>. You can free up some diskspace by running: <informalexample
><screen
># aptitude clean
</screen
></informalexample>

</para>
  </sect2>
 </sect1>
<!--   End of file appendix/chroot-install.xml -->

<!-- Start of file appendix/plip.xml -->
<!-- $Id: plip.xml 39644 2006-08-08 22:08:57Z jfs $ -->

 <sect1 id="plip" arch="x86">
 <title
>Installing &debian; over Parallel Line IP (PLIP)</title>

<para
>This section explains how to install &debian; on a computer without an Ethernet card, but with just a remote gateway computer attached via a Null-Modem cable (also called Null-Printer cable). The gateway computer should be connected to a network that has a Debian mirror on it (e.g. to the Internet). </para
><para
>In the example in this appendix we will set up a PLIP connection using a gateway connected to the Internet over a dial-up connection (ppp0). We will use IP addresses 192.168.0.1 and 192.168.0.2 for the PLIP interfaces on the target system and the source system respectively (these addresses should be unused within your network address space). </para
><para
>The PLIP connection set up during the installation will also be available after the reboot into the installed system (see <xref linkend="boot-new"/>). </para
><para
>Before you start, you will need to check the BIOS configuration (IO base address and IRQ) for the parallel ports of both the source and target systems. The most common values are <literal
>io=0x378</literal
>, <literal
>irq=7</literal
>. </para>

  <sect2>
  <title
>Requirements</title>

<itemizedlist>
<listitem
><para
>A target computer, called <emphasis
>target</emphasis
>, where Debian will be installed. </para
></listitem>
<listitem
><para
>System installation media; see <xref linkend="installation-media"/>. </para
></listitem>
<listitem
><para
>Another computer connected to the Internet, called <emphasis
>source</emphasis
>, that will function as the gateway. </para
></listitem>
<listitem
><para
>A DB-25 Null-Modem cable. See the <ulink url="&url-plip-install-howto;"
>PLIP-Install-HOWTO</ulink
> for more information on this cable and instructions how to make your own. </para
></listitem>
</itemizedlist>

  </sect2>

  <sect2>
  <title
>Setting up source</title>
<para
>The following shell script is a simple example of how to configure the source computer as a gateway to the Internet using ppp0. <informalexample
><screen
>#!/bin/sh

# We remove running modules from kernel to avoid conflicts and to
# reconfigure them manually.
modprobe -r lp parport_pc
modprobe parport_pc io=<replaceable>0x378</replaceable> irq=<replaceable>7</replaceable>
modprobe plip

# Configure the plip interface (plip0 for me, see dmesg | grep plip)
ifconfig <replaceable>plip0 192.168.0.2</replaceable> pointopoint <replaceable>192.168.0.1</replaceable> netmask 255.255.255.255 up

# Configure gateway
modprobe iptable_nat
iptables -t nat -A POSTROUTING -o <replaceable>ppp0</replaceable> -j MASQUERADE
echo 1 > /proc/sys/net/ipv4/ip_forward
</screen
></informalexample>

</para>
  </sect2>

  <sect2>
  <title
>Installing target</title>
<para
>Boot the installation media. The installation needs to be run in expert mode; enter <userinput
>expert</userinput
> at the boot prompt. If you need to set parameters for kernel modules, you also need to do this at the boot prompt. For example, to boot the installer and set values for the <quote
>io</quote
> and <quote
>irq</quote
> options for the parport_pc module, enter the following at the boot prompt: <informalexample
><screen
>
expert parport_pc.io=<replaceable>0x378</replaceable> parport_pc.irq=<replaceable>7</replaceable>
</screen
></informalexample
> Below are the answers that should be given during various stages of the installation. </para>

<orderedlist>
<listitem
><para>

<guimenuitem
>Load installer components from CD</guimenuitem>

</para
><para
>Select the <userinput
>plip-modules</userinput
> option from the list; this will make the PLIP drivers available to the installation system. </para
></listitem>
<listitem
><para>

<guimenuitem
>Detect network hardware</guimenuitem>

</para>

 <itemizedlist>
 <listitem
><para
>If target <emphasis
>does</emphasis
> have a network card, a list of driver modules for detected cards will be shown. If you want to force &d-i; to use plip instead, you have to deselect all listed driver modules. Obviously, if target doesn't have a network card, the installer will not show this list. </para
></listitem>
 <listitem
><para
>Because no network card was detected/selected earlier, the installer will ask you to select a network driver module from a list. Select the <userinput
>plip</userinput
> module. </para
></listitem>
 </itemizedlist>

</listitem>
<listitem
><para>

<guimenuitem
>Configure the network</guimenuitem>
 
 <itemizedlist>
 <listitem
><para
>Auto-configure network with DHCP: No </para
></listitem>
 <listitem
><para
>IP address: <userinput
><replaceable
>192.168.0.1</replaceable
></userinput
> </para
></listitem>
 <listitem
><para
>Point-to-point address: <userinput
><replaceable
>192.168.0.2</replaceable
></userinput
> </para
></listitem>
 <listitem
><para
>Name server addresses: you can enter the same addresses used on source (see <filename
>/etc/resolv.conf</filename
>) </para
></listitem>
 </itemizedlist>

</para
></listitem>
</orderedlist>

  </sect2>
 </sect1>
<!--   End of file appendix/plip.xml -->

<!-- Start of file appendix/pppoe.xml -->
<!-- $Id: pppoe.xml 57313 2009-01-16 17:16:38Z fjp $ -->

 <sect1 id="pppoe" arch="not-s390">
 <title
>Installing &debian; using PPP over Ethernet (PPPoE)</title>

<para
>In some countries PPP over Ethernet (PPPoE) is a common protocol for broadband (ADSL or cable) connections to an Internet Service Provider. Setting up a network connection using PPPoE is not supported by default in the installer, but can be made to work very simply. This section explains how. </para
><para
>The PPPoE connection set up during the installation will also be available after the reboot into the installed system (see <xref linkend="boot-new"/>). </para
><para
>To have the option of setting up and using PPPoE during the installation, you will need to install using one of the CD-ROM/DVD images that are available. It is not supported for other installation methods (e.g. netboot<phrase condition="supports-floppy-boot"
> or floppy</phrase
>). </para
><para
>Installing over PPPoE is mostly the same as any other installation. The following steps explain the differences. </para>

<itemizedlist>
<listitem
><para
>Boot the installer with the boot parameter <userinput
>modules=ppp-udeb</userinput
><footnote arch="x86"
> <para
> See <xref linkend="boot-screen"/> for information on how to add a boot parameter. </para
> </footnote
>. This will ensure the component responsible for the setup of PPPoE (<classname
>ppp-udeb</classname
>) will be loaded and run automatically. </para
></listitem>
<listitem
><para
>Follow the regular initial steps of the installation (language, country and keyboard selection; the loading of additional installer components<footnote
> <para
> The <classname
>ppp-udeb</classname
> component is loaded as one of the additional components in this step. If you want to install at medium or low priority (expert mode), you can also manually select the <classname
>ppp-udeb</classname
> instead of entering the <quote
>modules</quote
> parameter at the boot prompt. </para
> </footnote
>). </para
></listitem>
<listitem
><para
>The next step is the detection of network hardware, in order to identify any Ethernet cards present in the system. </para
></listitem>
<listitem
><para
>After this the actual setup of PPPoE is started. The installer will probe all the detected Ethernet interfaces in an attempt to find a PPPoE concentrator (a type of server which handles PPPoE connections). </para
><para
>It is possible that the concentrator will not to be found at the first attempt. This can happen occasionally on slow or loaded networks or with faulty servers. In most cases a second attempt to detect the concentrator will be successful; to retry, select <guimenuitem
>Configure and start a PPPoE connection</guimenuitem
> from the main menu of the installer. </para
></listitem>
<listitem
><para
>After a concentrator is found, the user will be prompted to type the login information (the PPPoE username and password). </para
></listitem>
<listitem
><para
>At this point the installer will use the provided information to establish the PPPoE connection. If the correct information was provided, the PPPoE connection should be configured and the installer should be able to use it to connect to the Internet and retrieve packages over it (if needed). If the login information is not correct or some error appears, the installer will stop, but the configuration can be attempted again by selecting the menu entry <guimenuitem
>Configure and start a PPPoE connection</guimenuitem
>. </para
></listitem>
</itemizedlist>

 </sect1>
<!--   End of file appendix/pppoe.xml -->

<!-- Start of file appendix/graphical.xml -->
<!-- $Id: graphical.xml 56145 2008-09-26 10:47:02Z lunar $ -->

 <sect1 condition="gtk" id="graphical">
 <title
>The Graphical Installer</title>
<para
>The graphical version of the installer is only available for a limited number of architectures, including &arch-title;. The functionality of the graphical installer is essentially the same as that of the regular installer as it basically uses the same programs, but with a different frontend. </para
><para
>Although the functionality is identical, the graphical installer still has a few significant advantages. The main advantage is that it supports more languages, namely those that use a character set that cannot be displayed with the regular <quote
>newt</quote
> frontend. It also has a few usability advantages such as the option to use a mouse, and in some cases several questions can be displayed on a single screen. </para
><para arch="x86"
>The graphical installer is available with all CD images and with the hd-media installation method. To boot the graphical installer simply select the relevant option from the boot menu. Expert and rescue mode for the graphical installer can be selected from the <quote
>Advanced options</quote
> menu. The previously used boot methods <userinput
>installgui</userinput
>, <userinput
>expertgui</userinput
> and <userinput
>rescuegui</userinput
> can still be used from the boot prompt which is shown after selecting the <quote
>Help</quote
> option in the boot menu. </para
><para arch="x86"
>There is also a graphical installer image that can be netbooted. And there is a special <quote
>mini</quote
> ISO image<footnote id="gtk-miniiso"
> <para
> The mini ISO image can be downloaded from a Debian mirror as described in <xref linkend="downloading-files"/>. Look for <filename
>netboot/gtk/mini.iso</filename
>. </para
> </footnote
>, which is mainly useful for testing. </para
><para arch="powerpc"
>For &arch-title;, currently only an experimental <quote
>mini</quote
> ISO image is available<footnote id="gtk-miniiso"
> <para
> The mini ISO image can be downloaded from a Debian mirror as described in <xref linkend="downloading-files"/>. Look for <filename
>netboot/gtk/mini.iso</filename
>. </para
> </footnote
>. It should work on almost all PowerPC systems that have an ATI graphical card, but is unlikely to work on other systems. </para
><para
>Just as with the regular installer it is possible to add boot parameters when starting the graphical installer. One of those parameters allows to configure the mouse for left-handed use. Others allow to select the mouse device (e.g. for a serial mouse) and the mouse protocol. See <xref linkend="boot-parms"/> for valid parameters<phrase arch="x86"
> and <xref linkend="boot-screen"/> for information on how to pass them</phrase
>. </para>
<note
><para
>The graphical installer requires significantly more memory to run than the regular installer: &minimum-memory-gtk;. If insufficient memory is available, it will automatically fall back to the regular <quote
>newt</quote
> frontend. </para
><para
>If the amount of memory in your system is below &minimum-memory;, the graphical installer may fail to boot at all while booting the regular installer would still work. Using the regular installer is recommended for systems with little available memory. </para
></note>

  <sect2 id="gtk-using">
  <title
>Using the graphical installer</title>
<para
>As already mentioned, the graphical installer basically works the same as the regular installer and thus the rest of this manual can be used to guide you through the installation process. </para
><para
>If you prefer using the keyboard over the mouse, there are two things you need to know. To expand a collapsed list (used for example for the selection of countries within continents), you can use the <keycap
>+</keycap
> and <keycap
>-</keycap
> keys. For questions where more than one item can be selected (e.g. task selection), you first need to tab to the &BTN-CONT; button after making your selections; hitting enter will toggle a selection, not activate &BTN-CONT;. </para
><para
>To switch to another console, you will also need to use the <keycap
>Ctrl</keycap
> key, just as with the X Window System. For example, to switch to VT2 (the first debug shell) you would use: <keycombo
> <keycap
>Ctrl</keycap
> <keycap
>Left Alt</keycap
> <keycap
>F2</keycap
> </keycombo
>. The graphical installer itself runs on VT5, so you can use <keycombo
> <keycap
>Left Alt</keycap
> <keycap
>F5</keycap
> </keycombo
> to switch back. </para>
  </sect2>

  <sect2 id="gtk-issues">
  <title
>Known issues</title>
<para
>The graphical frontend to the installer is relatively new and because of that there are some known issues. We continue to work on resolving these. </para>

<itemizedlist>
<listitem
><para
>Information on some screens is not yet nicely formatted into columns as it should be. </para
></listitem>
<listitem
><para
>Support for touchpads is not yet optimal. </para
></listitem>
</itemizedlist>

  </sect2>
 </sect1>
<!--   End of file appendix/graphical.xml -->

</appendix>
<!--   End of file appendix/random-bits.xml -->
