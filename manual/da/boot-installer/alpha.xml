<!-- retain these comments for translator revision tracking -->
<!-- original version: 19466 untranslated -->

 <sect2 arch="alpha" id="alpha-firmware">
 <title>Alpha Console Firmware</title>
<para>

Console firmware is stored in a flash ROM and started when an Alpha
system is powered up or reset.  There are two different console
specifications used on Alpha systems, and hence two classes of console
firmware available:

</para>

<itemizedlist>
<listitem><para>

  <emphasis>SRM console</emphasis>, based on the Alpha Console Subsystem
  specification, which provides an operating environment for OpenVMS, Tru64
  UNIX, and Linux operating systems.

</para></listitem>
<listitem><para>

  <emphasis>ARC, AlphaBIOS, or ARCSBIOS console</emphasis>, based on the
  Advanced RISC Computing (ARC) specification, which provides an operating
  environment for Windows NT.

</para></listitem>
</itemizedlist>

<para>

From the user's perspective, the most important difference between SRM
and ARC is that the choice of console constrains the possible
disk-partitioning scheme for the hard disk which you wish to boot off
of.

</para><para>

ARC requires that you use an MS-DOS partition table (as created by
<command>cfdisk</command>) for the boot disk.  Therefore MS-DOS partition
tables are the ``native'' partition format when booting from ARC.  In
fact, since AlphaBIOS contains a disk partitioning utility, you may
prefer to partition your disks from the firmware menus before
installing Linux.

</para><para>

Conversely, SRM is <emphasis>incompatible</emphasis> with MS-DOS partition tables.
<footnote><para>Specifically, the bootsector format required by the Console
Subsystem Specification conflicts with the placement of the DOS
partition table.</para></footnote> Since Tru64 Unix uses the BSD disklabel format,
this is the ``native'' partition format for SRM installations.

</para><para>

Because GNU/Linux is the only operating system on Alpha that can be
booted from both console types, the choice will also depend on what
other operating systems you wish to run on the same machine.  All
other Unix-like operating systems (Tru64 Unix, FreeBSD, OpenBSD, and
NetBSD) and OpenVMS can only boot from SRM, whereas Windows NT can
only boot from ARC.

</para><para>

The following table summarizes available and supported system
type/console combinations (see <xref linkend="alpha-cpus"/> for the
system type names).  The word `ARC' below denotes any of the
ARC-compliant consoles.

</para><para>

<informaltable><tgroup cols="2">
<thead>
<row>
  <entry>System Type</entry>
  <entry>Console Type Supported</entry>
</row>
</thead>

<tbody>
<row>
  <entry>alcor</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>avanti</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>book1</entry>
  <entry>SRM only</entry>
</row><row>
  <entry>cabriolet</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>dp264</entry>
  <entry>SRM only</entry>
</row><row>
  <entry>eb164</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>eb64p</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>eb66</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>eb66p</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>jensen</entry>
  <entry>SRM only</entry>
</row><row>
  <entry>lx164</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>miata</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>mikasa</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>mikasa-p</entry>
  <entry>SRM only</entry>
</row><row>
  <entry>nautilus</entry>
  <entry>ARC only (see motherboard manual)</entry>
</row><row>
  <entry>noname</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>noritake</entry>
  <entry>SRM only</entry>
</row><row>
  <entry>noritake-p</entry>
  <entry>SRM only</entry>
</row><row>
  <entry>pc164</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>rawhide</entry>
  <entry>SRM only</entry>
</row><row>
  <entry>ruffian</entry>
  <entry>ARC only</entry>
</row><row>
  <entry>sable</entry>
  <entry>SRM only</entry>
</row><row>
  <entry>sable-g</entry>
  <entry>SRM only</entry>
</row><row>
  <entry>sx164</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>takara</entry>
  <entry>ARC or SRM</entry>
</row><row>
  <entry>xl</entry>
  <entry>ARC only</entry>
</row><row>
  <entry>xlt</entry>
  <entry>ARC or SRM</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</para><para>

Generally, none of these consoles can boot Linux directly, so the
assistance of an intermediary bootloader is required.  There are two
mainstream Linux loaders: <command>MILO</command> and <command>aboot</command>.

</para><para>

<command>MILO</command> is itself a console, which replaces ARC or SRM in
memory.  <command>MILO</command> can be booted from both ARC and SRM and is
the only way to bootstrap Linux from the ARC console.
<command>MILO</command> is platform-specific (a different <command>MILO</command>
is needed for each system type) and exist only for those systems, for
which ARC support is shown in the table above.  See also the
(unfortunately outdated) 
<ulink url="&url-milo-howto;">MILO HOWTO</ulink>.

</para><para>

<command>aboot</command> is a small, platform-independent bootloader, which
runs from SRM only.  See the (also unfortunately outdated) <ulink
url="&url-srm-howto;">SRM HOWTO</ulink> for more information on
<command>aboot</command>.

</para><para>

Thus, three scenarios are generally possible, depending on the
system's console firmware and whether or not <command>MILO</command> is
available:

<informalexample><screen>

SRM -> aboot
SRM -> MILO
ARC -> MILO

</screen></informalexample>

</para><para>

The UP1000 motherboard (subarchitecture name `nautilus') from Alpha
Processor, Inc. is different from all the others, in that it uses an
API-specific bootloader that runs under AlphaBIOS firmware.

</para><para>

Because <command>MILO</command> is not available for any of the Alpha
systems currently in production (as of February 2000), and because it
is no longer necessary to buy an OpenVMS or Tru64 Unix license to have
SRM firmware on your older Alpha, it is recommended that you use SRM and
<command>aboot</command> on new installations of GNU/Linux, unless you wish
to dual-boot with Windows NT.

</para><para>

The majority of AlphaServers and all current server and workstation
products contain both SRM and AlphaBIOS in their firmware.  For
"half-flash" machines such as the various evaluation boards, it is
possible to switch from one version to another by reflashing the
firmware.  Also, once SRM is installed, it is possible to run
ARC/AlphaBIOS from a floppy disk (using the <command>arc</command>
command).  For the
reasons mentioned above, we recommend switching to SRM before
installing &debian;.

</para><para>

As on other architectures, you should install the newest available
revision of the firmware <footnote><para>Except on Jensen, where
Linux is not supported on firmware versions newer than 1.7 - see
<ulink url="&url-jensen-howto;"></ulink> for more
information</para></footnote> before installing &debian;.  For
Alpha, firmware updates can be obtained from 
<ulink url="&url-alpha-firmware;">Alpha Firmware Updates</ulink>.

</para>
 </sect2>


  <sect2 arch="alpha"><title>Booting with TFTP</title>
<para>

In SRM, Ethernet interfaces are named with the <userinput>ewa</userinput>
prefix, and will be listed in the output of the <userinput>show dev</userinput> command,
like this (edited slightly):

<informalexample><screen>

>>> show dev
ewa0.0.0.9.0               EWA0              08-00-2B-86-98-65
ewb0.0.0.11.0              EWB0              08-00-2B-86-98-54
ewc0.0.0.2002.0            EWC0              00-06-2B-01-32-B0

</screen></informalexample>

You first need to set the boot protocol:
<informalexample><screen>

>>> set ewa0_protocol bootp

</screen></informalexample>

Then check the medium type is correct:

<informalexample><screen>

>>> set ewa0_mode <replaceable>mode</replaceable>

</screen></informalexample>

You can get a listing of valid modes with <userinput>>>>set ewa0_mode</userinput>.

</para><para>

Then, to boot from the first Ethernet interface, you would type:

<informalexample><screen>

>>> boot ewa0 -flags ""

</screen></informalexample>

</para><para>

This will boot using the default kernel parameters as included in the
netboot image.

</para><para>

If you wish to use a serial console, you <emphasis>must</emphasis>
pass the <userinput>console=</userinput> parameter to the kernel.
This can be done using the <userinput>-flags</userinput> argument to
the SRM <userinput>boot</userinput> command.  The serial ports are
named the same as their corresponding files in
<userinput>/dev</userinput>.  For example, to boot from
<userinput>ewa0</userinput> and use a console on the first serial
port, you would type: 

<informalexample><screen>

>>> boot ewa0 -flags console=ttyS0

</screen></informalexample>

</para>
  </sect2>

  <sect2 arch="alpha"><title>Booting from CD-ROM with the SRM Console</title>
<para>

Type

<informalexample><screen>

&gt;&gt;&gt; boot xxxx -flags 0

</screen></informalexample>

where <replaceable>xxxx</replaceable> is your CD-ROM drive in SRM notation.

</para>
  </sect2>

  <sect2 arch="alpha">
  <title>Booting from CD-ROM with the ARC or AlphaBIOS Console</title>
<para>

To boot a CD-ROM from the ARC console, find your sub-architecture code
name (see <xref linkend="alpha-cpus"/>), then enter
<filename>\milo\linload.exe</filename> as the boot loader and
<filename>\milo\<replaceable>subarch</replaceable></filename> (where
<replaceable>subarch</replaceable> is the proper subarchitecture name)
as the OS Path in the `OS Selection Setup' menu. Ruffians make an
exception: You need to use <filename>\milo\ldmilo.exe</filename> as
boot loader.

</para>
  </sect2>


  <sect2 arch="alpha">
  <title>Booting from Floppies with the SRM Console</title>
<para>

At the SRM prompt (<prompt>&gt;&gt;&gt;</prompt>), issue the following
command:

<informalexample><screen>

&gt;&gt;&gt; boot dva0 -flags 0
        
</screen></informalexample>

possibly replacing <filename>dva0</filename> with the actual device
name.  Usually, <filename>dva0</filename> is the floppy; type

<informalexample><screen>

&gt;&gt;&gt; show dev
        
</screen></informalexample>

to see the list of devices (e.g., if you want to boot from a CD).
Note that if you are booting via MILO, <command>-flags</command> argument
is ignored, so you can just type <command>boot dva0</command>.
If everything works OK, you will eventually see the Linux kernel boot.

</para><para>

If you want to specify kernel parameters when booting via
<command>aboot</command>, use the following command:
<informalexample><screen>

&gt;&gt;&gt; boot dva0 -file linux.bin.gz -flags "root=/dev/fd0 load_ramdisk=1 arguments"
        
</screen></informalexample>
(typed on one line), substituting, if necessary, the actual SRM boot
device name for <filename>dva0</filename>, the Linux boot device name for
<filename>fd0</filename>, and the desired kernel parameters for
<filename>arguments</filename>.

</para><para>

If you want to specify kernel parameters when booting via
<command>MILO</command>, you will have to interrupt bootstrap once you get
into MILO.  See <xref linkend="booting-from-milo"/>.
</para>
  </sect2>


  <sect2 arch="alpha">
  <title>Booting from Floppies with the ARC or AlphaBIOS Console</title>

<para>

In the OS Selection menu, set <command>linload.exe</command> as the boot
loader, and <command>milo</command> as the OS Path.  Bootstrap using the
newly created entry.

</para>
  </sect2>

  <sect2 arch="alpha">
  <title>Booting from Floppies with the APB Boot Loader (UP1000)</title>

<para>

To boot on this platform, run <command>\apb\apb.exe</command> from the
`Utility/Run Maintenance Program' menu, and type
      <informalexample><screen>

boot debian_install
      
</screen></informalexample>
 at the APB prompt.

</para>
  </sect2>

 <sect2 arch="alpha" id="booting-from-milo"><title>Booting with MILO</title>
<para>

MILO contained on the bootstrap media is configured to proceed straight
to Linux automatically.  Should you wish to intervene, all you need is to
press space during MILO countdown.

</para><para>

If you want to specify all the bits explicitly (for example, to supply
additional parameters), you can use a command like this:

<informalexample><screen>

MILO&gt; boot fd0:linux.bin.gz root=/dev/fd0 load_ramdisk=1 <!-- arguments -->
        
</screen></informalexample>

</para><para>

If you are booting from something other than a floppy, substitute
<filename>fd0</filename> in the above example with the appropriate device name
in Linux notation.  The <command>help</command> command would give you a brief
MILO command reference.

</para>
 </sect2>

