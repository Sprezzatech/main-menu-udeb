<?xml version="1.0" encoding="EUC-JP"?>
<!-- retain these comments for translator revision tracking -->
<!-- original version: 36730 -->

<!--
 <sect1 id="kernel-baking"><title>Compiling a New Kernel</title>
-->
 <sect1 id="kernel-baking"><title>新しいカーネルのコンパイル</title>
<para>

<!--
Why would someone want to compile a new kernel? It is often not
necessary since the default kernel shipped with Debian handles most
configurations. Also, Debian often offers several alternative kernels.
So you may want to check first if there is an alternative kernel image
package that better corresponds to your hardware. However, it can be
useful to compile a new kernel in order to:
-->
新しいカーネルをコンパイルしようとする動機はなんでしょう? Debian では、
標準で入っているカーネルで多くの機能をサポートしているので、ほとんどその
必要はありません。また、Debian は多くの場合、いくつかの代替カーネルを
提供しています。ですからおそらく、もっと自分のハードウェアに対応する代わりの
カーネルイメージパッケージがあるかどうかをまず確認したいと思うでしょう。
しかし、以下のような目的のためには、新しいカーネルをコンパイルすることは有益です。

<itemizedlist>
<listitem><para>

<!--
handle special hardware needs, or hardware conflicts with the
pre-supplied kernels
-->
特殊なハードウェアを使ったり、
標準カーネルとハードウェアとの競合を回避するため

</para></listitem>
<listitem><para>

<!--
use options of the kernel which are not supported in the pre-supplied
kernels (such as high memory support)
-->
(ハイメモリサポートなど)
標準カーネルでサポートされていない機能を利用するため

</para></listitem>
<listitem><para>

<!--
optimize the kernel by removing useless drivers to speed up boot time
-->
使わないドライバを取り除くことでカーネルを最適化し、
起動にかかる時間を短くするため

</para></listitem>
<listitem><para>

<!--
create a monolithic instead of a modularized kernel
-->
モジュール化されたカーネルの代わりに、一体化したカーネルを作成するため

</para></listitem>
<listitem><para>

<!--
run an updated or development kernel
-->
最新のカーネルや開発版のカーネルを使用するため

</para></listitem>
<listitem><para>

<!--
learn more about linux kernels
-->
linux カーネルに関してもっと学ぶため

</para></listitem>
</itemizedlist>

</para>

<!--
  <sect2><title>Kernel Image Management</title>
-->
  <sect2><title>カーネルイメージの管理</title>
<para>

<!--
Don't be afraid to try compiling the kernel.  It's fun and profitable.
-->
カーネルのコンパイルを恐がらないでください。楽しく、かつ役に立つ作業です。

</para><para>

<!--
To compile a kernel the Debian way, you need some packages:
<classname>fakeroot</classname>, <classname>kernel-package</classname>,
<phrase condition="classic-kpkg"><classname>kernel-source-&kernelversion;</classname>
(the most recent version at the time of this writing)</phrase>
<phrase condition="common-kpkg"><classname>linux-source-2.6</classname></phrase>
and a few others which are probably already installed (see
<filename>/usr/share/doc/kernel-package/README.gz</filename> for the
complete list).
-->
Debian 流にカーネルをコンパイルするのに必要なパッケージは、
<classname>fakeroot</classname>、<classname>kernel-package</classname>、
<phrase condition="classic-kpkg"><classname>kernel-source-&kernelversion;</classname>
(この文書を執筆している時点で最も新しいバージョンです)</phrase>
<phrase condition="common-kpkg"><classname>linux-source-2.6</classname></phrase>
、あとは多分すでにインストール済みのパッケージがいくつか、です (完全な一覧については 
<filename>/usr/share/doc/kernel-package/README.gz</filename> を
ご覧ください)。

</para><para>

<!--
This method will make a .deb of your kernel source, and, if you have
non-standard modules, make a synchronized dependent .deb of those
too. It's a better way to manage kernel images;
<filename>/boot</filename> will hold the kernel, the System.map, and a
log of the active config file for the build.
-->
この方法はカーネルソースから .deb を作り、また非標準のモジュールが
あれば、作成したカーネルに依存した .deb も同時に作ります。
これはカーネルイメージの管理には良い方法で、
<filename>/boot</filename> にカーネル、System.map、
ビルドに使った設定ファイルの記録を保存します。

</para><para>

<!--
Note that you don't <emphasis>have</emphasis> to compile your kernel
the <quote>Debian way</quote>; but we find that using the packaging system
to manage your kernel is actually safer and easier.  In fact, you can get
your kernel sources right from Linus instead of
<phrase condition="classic-kpkg"><classname>kernel-source-&kernelversion;</classname>,</phrase>
<phrase condition="common-kpkg"><classname>linux-source-2.6</classname>,</phrase>
yet still use the <classname>kernel-package</classname> compilation method.
-->
必ずしも「Debian 流」にカーネルをコンパイルする必要は
<emphasis>ありません</emphasis>。しかし、カーネルの管理にもパッケージング
システムを用いるほうが、実際に安全で簡単です。実は
<phrase condition="classic-kpkg"><classname>kernel-source-&kernelversion;</classname></phrase>
<phrase condition="common-kpkg"><classname>linux-source-2.6</classname></phrase>
ではなく、Linus が配付しているカーネルソースをそのまま利用することもできますが、
その場合でも <classname>kernel-package</classname> を用いてコンパイルしてください。

</para><para>

<!--
Note that you'll find complete documentation on using
<classname>kernel-package</classname> under
<filename>/usr/share/doc/kernel-package</filename>.  This section just
contains a brief tutorial.
-->
<classname>kernel-package</classname> の利用に必要な文書すべては、
<filename>/usr/share/doc/kernel-package</filename>
ディレクトリにあります。
そのため、この節では簡単な解説のみを行います。

</para><para>

<!--
Hereafter, we'll assume you have free rein over your machine and will
extract your kernel source to somewhere in your home directory<footnote>
-->
以降では、あなたがマシン上で行動する自由があって、ホームディレクトリの
どこかにカーネルソースを展開すると仮定します<footnote>

<para>

<!--
There are other locations where you can extract kernel sources and build
your custom kernel, but this is easiest as it does not require special
permissions.
-->
他にも、カーネルソースを展開してカスタムカーネルをビルドできる場所は
ありますが、特別なパーミッションを必要としないここが最も簡単です。

</para>

<!--
</footnote>. We'll also assume that your kernel version is
&kernelversion;. Make sure you are in the directory to where you want to
unpack the kernel sources, extract them using
<phrase condition="classic-kpkg"><userinput>tar xjf
/usr/src/kernel-source-&kernelversion;.tar.bz2</userinput></phrase>
<phrase condition="common-kpkg"><userinput>tar xjf
/usr/src/linux-source-&kernelversion;.tar.bz2</userinput></phrase>
and change to the directory
<phrase condition="classic-kpkg"><filename>kernel-source-&kernelversion;</filename></phrase>
<phrase condition="common-kpkg"><filename>linux-source-&kernelversion;</filename></phrase>
that will have been created.
-->
</footnote>。また、カーネルバージョンが &kernelversion; だと仮定します。
カーネルソースを取り出したいディレクトリにいることを確認してから、
<phrase condition="classic-kpkg"><userinput>tar xjf
/usr/src/kernel-source-&kernelversion;.tar.bz2</userinput></phrase>
<phrase condition="common-kpkg"><userinput>tar xjf
/usr/src/linux-source-&kernelversion;.tar.bz2</userinput></phrase>
としてソースを展開し、作成された
<phrase condition="classic-kpkg"><filename>kernel-source-&kernelversion;</filename></phrase>
<phrase condition="common-kpkg"><filename>linux-source-&kernelversion;</filename></phrase>
ディレクトリに移動してください。

</para><para>

<!--
Now, you can configure your kernel.  Run <userinput>make
xconfig</userinput> if X11 is installed, configured and being run; run
<userinput>make menuconfig</userinput> otherwise (you'll need
<classname>libncurses5-dev</classname> installed). Take the time to read
the online help and choose carefully. When in doubt, it is typically
better to include the device driver (the software which manages
hardware peripherals, such as Ethernet cards, SCSI controllers, and so
on) you are unsure about.  Be careful: other options, not related to a
specific hardware, should be left at the default value if you do not
understand them.  Do not forget to select <quote>Kernel module loader</quote>
in <quote>Loadable module support</quote> (it is not selected by default).
If not included, your Debian installation will experience problems.
-->
次にカーネルコンパイルの設定を行います。X11 のインストールおよび設定が
済んでいて、X11 を実行中の場合は <userinput>make xconfig</userinput> を、
そうでない場合は <userinput>make menuconfig</userinput> を実行します (後者では
<classname>libncurses5-dev</classname> がインストールされている必要があります)。
オンラインヘルプを時間をかけて読み、注意深く選択してください。
一般的に、迷った場合はそのデバイスドライバ (イーサネットカードや、
SCSI コントローラなどの周辺機器を制御するソフトウェア) を入れた方が
よいでしょう。なお注意していただきたいのですが、
特定のハードウェアに関係のないその他のオプションで、
よく理解できないものはデフォルトの値のままにしておいてください。
また、<quote>Loadable module support</quote> にある <quote>Kernel module loader</quote>
(デフォルトでは選択されていません) は忘れずに選択してください。
さもないと、Debian のインストールに問題が生じることもあります。

</para><para>

<!--
Clean the source tree and reset the <classname>kernel-package</classname>
parameters.  To do that, do <userinput>make-kpkg clean</userinput>.
-->
続いてソースツリーをクリアし、<classname>kernel-package</classname> のパラメータを
リセットします。これには、<userinput>make-kpkg clean</userinput> を実行してください。

</para><para>

<!--
Now, compile the kernel:
<userinput>fakeroot make-kpkg -\-initrd -\-revision=custom.1.0 kernel_image</userinput>.
The version number of <quote>1.0</quote> can be changed at will; this is just
a version number that you will use to track your kernel builds.
Likewise, you can put any word you like in place of <quote>custom</quote>
(e.g., a host name).  Kernel compilation may take quite a while, depending on
the power of your machine.
-->
さあ、カーネルをコンパイルしましょう。
<userinput>fakeroot make-kpkg --initrd --revision=custom.1.0 kernel_image</userinput>
を実行してください。バージョン番号 <quote>1.0</quote> は自由に変えられます。
この番号は、構築したカーネルを後から確認できるようにするためのものだからです。
同様に、<quote>custom</quote> の箇所にもお好みのキーワード (例えばホスト名など)
を使うことができます。マシンのパワーにもよりますが、カーネルのコンパイルには
かなり時間がかかります。

</para><para>

<!--
Once the compilation is complete, you can install your custom kernel
like any package.  As root, do 
<phrase condition="classic-kpkg">
<userinput>dpkg -i
../kernel-image-&kernelversion;-<replaceable>subarchitecture</replaceable>_custom.1.0_&architecture;.deb</userinput>.
</phrase>
<phrase condition="common-kpkg">
<userinput>dpkg -i
../linux-image-&kernelversion;-<replaceable>subarchitecture</replaceable>_custom.1.0_&architecture;.deb</userinput>.
</phrase>
The <replaceable>subarchitecture</replaceable> part is an optional
sub-architecture,
<phrase arch="x86"> such as <quote>i586</quote>, </phrase>
depending on what kernel options you set.
<userinput>dpkg -i</userinput> will install the
kernel, along with some other nice supporting files.  For instance,
the <filename>System.map</filename> will be properly installed
(helpful for debugging kernel problems), and
<filename>/boot/config-&kernelversion;</filename> will be installed,
containing your current configuration set.  Your new
kernel package is also clever enough to automatically update your boot
loader to use the new kernel. If you have created a modules package,
<phrase condition="classic-kpkg">e.g., if you have PCMCIA,</phrase>
you'll need to install that package as well.
-->
一旦コンパイルが完了すれば、他のパッケージと同じように、そのカスタムカーネルを
インストールできます。root アカウントで
<phrase condition="classic-kpkg">
<userinput>dpkg -i
../kernel-image-&kernelversion;-<replaceable>subarchitecture</replaceable>_custom.1.0_&architecture;.deb</userinput>
</phrase>
<phrase condition="common-kpkg">
<userinput>dpkg -i
../linux-image-&kernelversion;-<replaceable>subarchitecture</replaceable>_custom.1.0_&architecture;.deb</userinput>.
</phrase>
を実行してください。<replaceable>subarchitecture</replaceable> は、
カーネルのオプションで設定された
<phrase arch="x86"> <quote>i586</quote> のような</phrase>
任意のサブアーキテクチャを表しています。
また <userinput>dpkg -i</userinput> とすると、カーネルと一緒に
役に立つ補助的なファイルもいくつかインストールされます。例えば
カーネルの問題をデバッグするのに役立つ <filename>System.map</filename> や、
現行のカーネルの設定が記録されている
<filename>/boot/config-&kernelversion;</filename> などが適切にインストールされます。
さらに、新たに作成されたカーネルパッケージは、新しいカーネルを使用するように
ブートローダの設定を自動的に更新してくれます。なお、モジュールパッケージを作成した場合、
<phrase condition="classic-kpkg">例えば PCMCIA がある場合は、</phrase>
同様にそれらもインストールする必要があるでしょう。

</para><para>

<!--
It is time to reboot the system: read carefully any warning that the
above step may have produced, then <userinput>shutdown -r now</userinput>.
-->
さて、システムを再起動する時がやってきました。これまでの作業の間に何か警告が表示されていたら
それらを注意深く読み、それから <userinput>shutdown -r now</userinput> を実行してください。

</para><para>

<!--
For more information on Debian kernels and kernel compilation, see the
<ulink url="&url-kernel-handbook;">Debian Linux Kernel Handbook</ulink>.
For more information on <classname>kernel-package</classname>, read
the fine documentation in <filename>/usr/share/doc/kernel-package</filename>.
-->
Debian カーネルやカーネルのコンパイルに関するより詳しい情報については、
<ulink url="&url-kernel-handbook;">Debian Linux Kernel Handbook</ulink> をご覧ください。
<classname>kernel-package</classname> に関するより詳しい情報については、
<filename>/usr/share/doc/kernel-package</filename> にある素晴しいドキュメントをお読みください。

</para>
  </sect2>
 </sect1>
